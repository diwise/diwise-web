package components

import (
	"fmt"
	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
	"github.com/diwise/diwise-web/internal/pkg/presentation/web/assets"
	"strings"
)

type ThingDetailsViewModel struct {
	Thing         ThingViewModel
	Related       []ThingViewModel
	Measurements  []MeasurementViewModel
	Organisations []string
	Tenant        string
	TableView     bool
	ValidSensors  []ValidSensorViewModel
	Tags          []string
	RelatedDevice string
}

type ValidSensorViewModel struct {
	SensorID string
	DeviceID string
	Decoder  string
}

templ ThingDetailsPage(l10n locale.Localizer, asset assets.AssetLoaderFunc, model ThingDetailsViewModel) {
	<div class="flex flex-col items-start gap-14 flex-[1_0_0] py-8 w-full" id="things-view">
		@ThingDetails(l10n, asset, model)
	</div>
}

templ FilterStatistics(l10n locale.Localizer, model ThingDetailsViewModel) {
	/*
	<div class="flex flex-col items-start gap-2">
		
		<div class="font-bold">
			{ l10n.Get("measurementtype") }
		</div>
		<div class="relative min-w-48 border border-input-surface rounded-xl px-3 py-2 dark:border dark:border-white-50">
			//TODO: Ersätt med en riktig Select() när data finns.
		
			<select class="appearance-none min-w-48 dark:bg-input-surface-dark dark:text-secondary focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-xl bg-white">
				<option value="Fyllnadsnivå">{ l10n.Get("fillinglevel") }</option>
				<option value="Temperatur">{ l10n.Get("temperature") }</option>
			</select>
			
			<div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
				<svg class="w-[18px] h-[18px] dark:fill-white">
					@templ.Raw(iconSVG("chevron-down"))
				</svg>
			</div>
		</div>
		
	</div>
	*/
	<div class="flex flex-col items-start gap-2">
		<div class="font-bold">
			{ l10n.Get("timeinterval") }
		</div>
		<div class="">
			<input
				name="timeAt"
				type="date"
				id="timeAt"
				hx-trigger="change, load"
				hx-include="#sensorMeasurementTypes,#endTimeAt"
				hx-target="#measurementCharts"
				hx-get={ fmt.Sprintf("/components/things/measurements/%s", strings.ToLower(model.Thing.Type)) }
				hx-params="*"
				class="border border-input-surface rounded-xl py-2 px-3 dark:text-secondary-dark"
			/>
			-
			<input
				name="endTimeAt"
				type="date"
				id="endTimeAt"
				hx-trigger="change"
				hx-include="#sensorMeasurementTypes,#timeAt"
				hx-target="#measurementCharts"
				hx-get={ fmt.Sprintf("/components/things/measurements/%s", strings.ToLower(model.Thing.Type)) }
				hx-params="*"
				class="border border-input-surface rounded-xl py-2 px-3 dark:text-secondary-dark"
			/>
		</div>
	</div>
}

templ StatisticsData(l10n locale.Localizer, graphComponent, tableComponent templ.Component, tableView bool) {
	<div id="graphOrTable" class="w-full flex flex-col gap-6 items-start inline-flex">
		<input
			type="hidden"
			id="tableview"
			name="tableview"
			class="filter"
			if tableView {
				value="true"
			} else {
				value="false"
			}
		/>
		<div
			if tableView {
				id="tableview"
			} else {
				id="graphview"
			}
			class="w-full"
		>
			if tableView {
				@tableComponent
			} else {
				@graphComponent
			}
		</div>
	</div>
}

templ ThingDetails(l10n locale.Localizer, asset assets.AssetLoaderFunc, model ThingDetailsViewModel) {
	<script>
		document.addEventListener('htmx:afterSwap', function(evt) {
			function checkTagsLoaded() {
				var tagItems = document.querySelectorAll('.tagItem');
				if (tagItems.length > 0) {
					initializeTags(); 
					document.getElementById('addTagButton').addEventListener('click', function() {
						var selectedValue = document.getElementById('tagInput').value;
						if (selectedValue) { 
							updateSelectedTag(selectedValue); 
							document.getElementById('tagInput').value = ""; 
						}
					});
				} 
				if (document.getElementById('addTagButton') != undefined) {
					document.getElementById('addTagButton').addEventListener('click', function() {
						var selectedValue = document.getElementById('tagInput').value;
						if (selectedValue) { 
							updateSelectedTag(selectedValue); 
							document.getElementById('tagInput').value = ""; 
						}
					});
				}
			}
			checkTagsLoaded();
		});

		// Funktion för att uppdatera datalistan genom att ta bort en tagg
		function removeTagFromDatalist(tag) {
			const datalist = document.getElementById('tag-options');
			const option = datalist.querySelector(`option[value="${tag}"]`);
			if (option) {
				option.remove();
			}
		}

		// Funktion för att lägga tillbaka en tagg till datalistan
		function addTagToDatalist(tag) {
			const datalist = document.getElementById('tag-options');
			const option = document.createElement('option');
			option.value = tag;
			option.textContent = tag;

			// Hitta rätt plats att sätta in optionen i bokstavsordning
			const options = Array.from(datalist.children);
			let inserted = false;

			for (let i = 0; i < options.length; i++) {
				if (options[i].value.localeCompare(tag) > 0) {
					datalist.insertBefore(option, options[i]);
					inserted = true;
					break;
				}
			}

			// Om vi inte hittade någon tidigare option att sätta in före, lägg den sist
			if (!inserted) {
				datalist.appendChild(option);
			}
		}

		// Funktion för att skapa en ny tag med en stängningsikon
		function createTagElement(tag) {
			return `
				<div class="flex items-center p-2 rounded-full gap-1 tagItem border-gray-30 dark:border-white-30 border stroke-primary-dark dark:stroke-white">
					<span>${tag}</span>
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x removeTagIcon cursor-pointer">
						<line x1="18" y1="6" x2="6" y2="18"></line>
						<line x1="6" y1="6" x2="18" y2="18"></line>
					</svg>
				</div>
			`;
		}

		// Funktion för att uppdatera hidden input med aktuella taggar
		function updateHiddenInput(tags) {
			var hiddenInput = document.getElementById('selectedTags');
			hiddenInput.value = tags.join(',');
		}

		// Funktion för att lägga till händelselyssnare på en tag och hantera borttagning
		function addRemoveTagListener(tagElement, tagText, currentTags) {
			const removeIcon = tagElement.querySelector('.removeTagIcon');
			if (removeIcon) {
				removeIcon.addEventListener('click', function() {
					tagElement.remove(); // Ta bort hela tag-elementet

					// Lägg tillbaka taggen till datalistan
					addTagToDatalist(tagText);

					// Uppdatera hidden input genom att ta bort taggen
					var index = currentTags.indexOf(tagText);
					if (index > -1) {
						currentTags.splice(index, 1);
					}
					updateHiddenInput(currentTags);
				});
			} 
		}

		// Funktion för att hantera både server-renderade och dynamiskt tillagda taggar
		function initializeTags() {
			var hiddenInput = document.getElementById('selectedTags');
			var currentTags = hiddenInput.value ? hiddenInput.value.split(',') : [];

			// Lägg till händelselyssnare på befintliga taggar (server-renderade)
			var tagItems = document.querySelectorAll('.tagItem');
			tagItems.forEach(function(tagElement) {
				var tagText = tagElement.querySelector('span').innerText;
				addRemoveTagListener(tagElement, tagText, currentTags);
				removeTagFromDatalist(tagText);
			});
		}

		// Funktion för att lägga till ny tagg i container och uppdatera hidden input
		function updateSelectedTag(tag) {
			if (tag) {
				var tagElement = document.createElement('div');
				tagElement.innerHTML = createTagElement(tag).trim(); // Skapa taggen
				tagElement = tagElement.firstChild;
				
				document.getElementById('selectedTagContainer').appendChild(tagElement); // Lägg till i DOM

				// Lägg till taggen i hidden input (komma-separerade värden)
				var hiddenInput = document.getElementById('selectedTags');
				var currentTags = hiddenInput.value ? hiddenInput.value.split(',') : [];
				currentTags.push(tag);
				updateHiddenInput(currentTags);

				// Lägg till händelselyssnare för den nya taggen
				addRemoveTagListener(tagElement, tag, currentTags);

				// Ta bort taggen från datalistan
				removeTagFromDatalist(tag);
			}
		}
	</script>

	<div class="w-full px-8">
		<div class="flex items-center w-full justify-between">
			if model.Thing.ThingID == "" {
				<div class="flex items-center align-middle">
					<h1 class="py-3">&nbsp;</h1>
				</div>
			} else {
				<div class="flex items-center gap-6 align-middle">
					<h1 class="text-black dark:text-white text-2xl font-bold font-heading leading-loose">{ model.Thing.ThingID }</h1>
				</div>
			}
			@Button(Tertiary, l10n.Get("edit"), "pen", Target("#things-view"), HxUrl("get", (fmt.Sprintf("/components/things/details?id=%s&mode=edit", model.Thing.ThingID))))
		</div>
		<div class="flex flex-col items-start gap-10">
			//Statistikdel
			<div class="flex flex-col items-start self-stretch pt-6">
				//Rubrik Statistik
				<div class="flex items-center gap-3 self-stretch">
					@SVG("chartline", Size(24), NoFill(), Box(24, 24), StrokeColor("primary-dark", "zinc-100"), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
					<h2 class="font-heading text-xl font-bold dark:text-white whitespace-nowrap">{ l10n.Get("statistics") }</h2>
					<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
				</div>
				if strings.ToLower(model.Thing.Type) == "wastecontainer" {
					@StatisticsWasteContainer(l10n, model)
				} else if strings.ToLower(model.Thing.Type) == "combinedsewageoverflow" {
					@StatisticsCombinedSewageOverflow(l10n, model)
				} else if strings.ToLower(model.Thing.Type) == "passage" {
					@StatisticsPassage(l10n, model)
				}
			</div>
			//Uppgifter och position
			<div class="flex items-start self-stretch py-6 gap-10">
				//Uppgifter och larm
				<div class="flex flex-col items-start gap-6 flex-[1_0_0]">
					//Uppgifter
					<div class="flex items-center gap-3 self-stretch">
						//Rubrik
						@SVG("info", Size(24), NoFill(), Box(24, 24), StrokeColor("primary-dark", "zinc-100"), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
						<h2 class="font-heading text-xl font-bold dark:text-white">{ l10n.Get("details") }</h2>
						<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
					</div>
					//Innehåll Uppgifter
					<div class="flex flex-col items-start self-stretch gap-6 px-9 text-secondary-dark dark:text-secondary">
						<div class="flex flex-start gap-2">
							<div class="font-bold">{ l10n.Get("id") }</div>
							<div class="">{ model.Thing.ThingID }</div>
						</div>
						<div class="flex flex-start gap-2">
							<div class="font-bold">{ l10n.Get("type") }</div>
							<div class="">{ l10n.Get(model.Thing.Type) }</div>
						</div>
						<div class="flex flex-start gap-2">
							<div class="font-bold">{ l10n.Get("name") }</div>
							<div class="">
								{ l10n.Get(model.Thing.Name) }
							</div>
						</div>
						<div class="flex flex-start gap-2">
							<div class="font-bold">{ l10n.Get("description") }</div>
							<div class="">
								{ l10n.Get(model.Thing.Description) }
							</div>
						</div>
						<div class="flex flex-start gap-2">
							<div class="font-bold">{ l10n.Get("sensorconnected") }</div>
							if len(model.Related) == 0 {
								<div class="italic text-secondary-outline-hover dark:text-secondary">{ l10n.Get("sensormissing") }</div>
							} else {
								for _, r := range model.Related {
									<div class="underline text-primary-surface-blue dark:text-primary-surface-blue-dark">
										<a href={ templ.SafeURL(fmt.Sprintf("/sensors/%s", r.ID)) }>{ r.ThingID }</a>
									</div>
								}
							}
						</div>
						<div class="flex flex-start gap-2">
							<div class="font-bold">{ l10n.Get("organisation") }</div>
							<div class="">{ model.Thing.Tenant }</div>
						</div>
						<div class="flex items-center gap-2">
							<div class="flex flex-col gap-2">
								<div class="font-bold">{ l10n.Get("tags") }</div>
								<div class="flex items-center gap-2 flex-wrap">
									for _, tag := range model.Thing.Tags {
										<div class="dark:bg-primary-surface-dark dark:text-primary-dark px-2 py-1 rounded-full text-sm border-gray-30 dark:border-white-30 border-2">
											{ tag }
										</div>
									}
								</div>
							</div>
						</div>
					</div>
				</div>
				//@AlarmList(l10n)
				//Vertikal gray-30 mellan uppgifter och position
				<div class="flex flex-col items-start self-stretch gap-2 border-l border-gray-30 dark:border-white-30 h-auto"></div>
				//Position
				<div class="flex flex-col items-start gap-6 flex-[1_0_0]">
					<div class="flex flex-col items-start self-stretch">
						//Karta
						<div class="flex items-center gap-3 self-stretch">
							//Position rubrik
							@SVG("map-pin", Size(24), NoFill(), Box(24, 24), StrokeColor("primary-dark", "zinc-100"), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
							<h2 class="font-heading text-xl font-bold dark:text-white">{ l10n.Get("location") }</h2>
							<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
						</div>
						<div class="flex flex-col items-start self-stretch gap-6 py-6 px-9 text-secondary-dark dark:text-secondary">
							//
							<div class="flex flex-start gap-2">
								<div class="font-bold">{ l10n.Get("latitude") }</div>
								<div class="">{ fmt.Sprintf("%f", model.Thing.Latitude) }</div>
							</div>
							<div class="flex flex-start gap-2">
								<div class="font-bold">{ l10n.Get("longitude") }</div>
								<div class="">{ fmt.Sprintf("%f", model.Thing.Longitude) }</div>
							</div>
							@Map("small", false, newMapData(model.Thing.Latitude, model.Thing.Longitude), thingsToMapFeature(l10n, []ThingViewModel{model.Thing}))
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ EditThingDetails(l10n locale.Localizer, asset assets.AssetLoaderFunc, model ThingDetailsViewModel) {
	<div class="w-full px-8">
		<div class="flex items-center w-full justify-between">
			if model.Thing.ThingID == "" {
				<div class="flex items-center align-middle">
					<h1 class="py-3">&nbsp;</h1>
				</div>
			} else {
				<div class="flex items-center gap-6 align-middle">
					<h1 class="text-black dark:text-white text-2xl font-bold font-heading leading-loose">{ l10n.Get("edit") } { model.Thing.ThingID }</h1>
				</div>
			}
		</div>
		<form action="/components/things/details" method="post">
			<input type="hidden" name="id" value={ model.Thing.ThingID }/>
			<div class="w-full flex py-6 gap-10 text-primary-dark dark:text-white">
				<div class="flex flex-col items-start gap-20 flex-[1_0_0]">
					//Status och uppgifter
					<div class="flex flex-col items-start self-stretch">
						<div class="flex items-center gap-3 self-stretch">
							//Rubrik uppgifter
							@SVG("info", Size(24), NoFill(), Box(24, 24), StrokeColor("primary-dark", "zinc-100"), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
							<h2 class="font-heading text-xl font-bold">{ l10n.Get("details") }</h2>
							<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
						</div>
						<div class="flex flex-col items-start self-stretch gap-6 py-6 px-9">
							//Uppgifter
							<div class="flex flex-start gap-10 self-stretch">
								<div class="flex flex-col gap-2 flex-1">
									<div class="font-bold">{ l10n.Get("id") }</div>
									<div class="break-all">
										{ model.Thing.ThingID }
									</div>
								</div>
								<div class="flex flex-col gap-2 flex-1">
									<div class="font-bold">{ l10n.Get("thingtype") }</div>
									<div class="">
										{ l10n.Get(model.Thing.Type) }
									</div>
								</div>
							</div>
							<div class="flex flex-start gap-10 self-stretch">
								<div class="flex flex-col gap-2 flex-1">
									<div class="font-bold">{ l10n.Get("name") }</div>
									<div class="">
										<input
											type="text"
											name="name"
											class="border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl p-2"
											placeholder=""
											value={ model.Thing.Name }
										/>
									</div>
								</div>
								<div class="flex flex-col gap-2 flex-1">
									<div class="font-bold">{ l10n.Get("organisation") }</div>
									<div class="border border-input-surface rounded-xl">
										<label for="organisation" class="hidden block text-sm font-medium text-gray-700">
											{ l10n.Get("pickOption") }
										</label>
										@OrganisationSelect(l10n, asset, "organisation", model.Thing.Tenant, model.Organisations)
									</div>
								</div>
							</div>
							<div class="flex flex-start self-stretch">
								<div class="flex flex-col gap-2 flex-1">
									<div class="font-bold">{ l10n.Get("sensorconnected") }</div>
									if len(model.Related) == 0 {
										<div class="italic text-secondary-outline-hover dark:text-secondary">{ l10n.Get("sensormissing") }</div>
									} 
									<div class="relative inline-block w-full border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl">
										<input type="hidden" name="currentDevice" value={ model.RelatedDevice }/>
										<input
											list="filter-options"
											name="relatedDevice"
											placeholder={ l10n.Get("picksensor") }
											class="text-sm p-2 rounded-xl w-full block focus:outline-none"
											value={ model.RelatedDevice }
											id="sensorInput"
										/>
										<datalist id="filter-options">
											for _, sensor := range model.ValidSensors {
												<option value={ sensor.DeviceID }>{ fmt.Sprintf("%s (%s)", sensor.SensorID, sensor.Decoder) }</option>
											}
										</datalist>
										<div class="pointer-events-none absolute bg-white rounded-xl inset-y-0 right-0 flex items-center px-2 text-gray-700">
											<svg class="w-[18px] h-[18px] dark:fill-white">
												@templ.Raw(iconSVG("chevron-down"))
											</svg>
										</div>
									</div>
								</div>
							</div>
							//Lägg till taggar
							<div class="flex flex-start self-stretch">
								<div class="flex flex-col gap-6 flex-1">
									<div class="flex flex-col gap-2 flex-1">
										<div class="font-bold">{ l10n.Get("tags") }</div>
										<div class="flex items-center gap-2 self-stretch text-sm dark:text-white">
											<div id="selectedTagContainer" class="flex items-center gap-2 flex-wrap overflow-hidden max-w-full">
												for _, tag := range model.Thing.Tags {
													<div class="flex items-center p-2 rounded-full gap-1 tagItem border-gray-30 dark:border-white-30 border stroke-primary-dark dark:stroke-white">
														<span>{ tag }</span>
														<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x removeTagIcon cursor-pointer">
															<line x1="18" y1="6" x2="6" y2="18"></line>
															<line x1="6" y1="6" x2="18" y2="18"></line>
														</svg>
													</div>
												}
											</div>
										</div>
									</div>	
									<div class="flex flex-start self-stretch gap-3">
										<div class="relative inline-block w-full border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl">
											<input
												list="tag-options"
												name="tags"
												placeholder={ l10n.Get("addtag") }
												class="text-sm p-2 rounded-xl w-full block focus:outline-none"
												id="tagInput"
											/>
											<datalist id="tag-options">
												for _, t := range model.Tags {
													<option value={ t }>{ t }</option>
												}
											</datalist>
											<div class="pointer-events-none absolute bg-white rounded-xl inset-y-0 right-0 flex items-center px-2 text-gray-700">
												<svg class="w-[18px] h-[18px] dark:fill-white">
													@templ.Raw(iconSVG("chevron-down"))
												</svg>
											</div>
										</div>
										<div id="addTagButton" class="flex gap-2 rounded-xl whitespace-nowrap cursor-pointer font-bold px-4 py-2 bg-tertiary-surface rounded-xl hover:bg-tertiary-surface-hover dark:bg-primary-surface-white dark:hover:bg-white-30 text-primary-dark dark:text-white">
											Lägg till
										</div>
									</div>

									<!-- Ett hidden input för alla taggar separerade med kommatecken, förifylld från backend -->
									<input type="hidden" id="selectedTags" name="selectedTags" value={ strings.Join(model.Thing.Tags, ",") }>
								</div>
							</div>

							

							
							<div class="flex flex-start gap-10 self-stretch">
								<div class="flex flex-col gap-2 flex-[1_0_0]">
									<div class="font-bold">{ l10n.Get("description") }</div>
									<textarea type="text" name="description" class="w-full min-h-[150px] border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl p-2" placeholder={ l10n.Get("description") }>
										{ model.Thing.Description }
									</textarea>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="border-l border-gray-30 dark:border-white-30 h-auto"></div> //Vertikal gray-30 mellan uppgifter och position
				<div class="flex flex-col items-start gap-20 flex-[1_0_0]">
					<div class="flex flex-col items-start self-stretch">
						//Karta
						<div class="flex items-center gap-3 self-stretch">
							//Position rubrik
							@SVG("map-pin", Size(24), NoFill(), Box(24, 24), StrokeColor("primary-dark", "zinc-100"), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
							<h2 class="font-heading text-xl font-bold">{ l10n.Get("location") }</h2>
							<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
						</div>
						<div class="flex flex-col items-start self-stretch gap-6 py-6 px-9">
							//Position
							<div class="flex flex-start gap-10 self-stretch">
								<div class="flex flex-col gap-2 flex-[1_0_0]">
									<div class="font-bold">{ l10n.Get("latitude") }</div>
									<input type="number" name="latitude" value={ fmt.Sprintf("%f", model.Thing.Latitude) } class="w-auto h-[40px] border border-input-surface dark:border-white-50 dark:bg-input-surface-dark font-bold focus:ring-0 placeholder-gray-500 rounded-xl p-2" placeholder="Latitud"/>
								</div>
								<div class="flex flex-col gap-2 flex-[1_0_0]">
									<div class="font-bold">{ l10n.Get("longitude") }</div>
									<input type="number" name="longitude" value={ fmt.Sprintf("%f", model.Thing.Longitude) } class="w-auto h-[40px] border border-input-surface dark:border-white-50 dark:bg-input-surface-dark font-bold focus:ring-0 placeholder-gray-500 rounded-xl p-2" placeholder="Longitud"/>
								</div>
							</div>
							@Map("medium", false, newMapData(model.Thing.Latitude, model.Thing.Longitude), thingsToMapFeature(l10n, []ThingViewModel{model.Thing}))
						</div>
					</div>
				</div>
			</div>
			<div class="h-px border-t border-gray-30 w-full"></div>
			<div class="flex items-center justify-end py-6">
				//@Button(Error, l10n.Get("delete"), "trashcan", Name("delete"))
				<div class="flex items-center gap-4">
					@Button(Secondary, l10n.Get("cancel"), "close", Name("cancel"))
					@Button(Primary, l10n.Get("save"), "check", Name("save"), BtnType("submit"))
				</div>
			</div>
		</form>
	</div>
}

templ graphTableButtons(l10n locale.Localizer, hxGet string) {
	<div class="flex items-center self-stretch gap-6">
		<div class="flex p-2 items-center gap-4 bg-tertiary-surface bg-opacity-20 dark:bg-primary-surface-white rounded-2xl gap-2">
			<div class="relative group">
				<button
					id="graphButton"
					class="flex p-1.5 rounded-[10px] justify-center items-center gap-1 cursor-pointer bg-black stroke-white dark:bg-white dark:stroke-black hover:bg-tertiary-surface-hover"
					hx-get={ string(templ.SafeURL(fmt.Sprintf("%s?graphview=true", hxGet))) }
					hx-target="#graphOrTable"
					hx-on="click: this.classList.add('bg-black', 'stroke-white', 'dark:bg-white', 'dark:stroke-black'); this.classList.remove('stroke-black', 'dark:stroke-white'); 
					document.getElementById('tableButton').classList.add('fill-black', 'dark:fill-white', 'stroke-black'); 
					document.getElementById('tableButton').classList.remove('bg-black', 'fill-white', 'dark:bg-white', 'dark:fill-black', 'stroke-white');"
				>
					<svg class="w-[18px] h-[18px]">
						@SVG("chartline", Size(24), NoFill(), Box(24, 24), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
					</svg>
				</button>
				@Tooltip(l10n.Get("graph"))
			</div>
			<div class="relative group">
				<button
					id="tableButton"
					class="flex p-1.5 rounded-[10px] justify-center items-center gap-1 cursor-pointer stroke-black dark:stroke-white dark:fill-white hover:bg-tertiary-surface-hover"
					hx-get={ string(templ.SafeURL(fmt.Sprintf("%s?graphview=false", hxGet))) }
					hx-target="#graphOrTable"
					hx-on="click: this.classList.add('bg-black', 'fill-white', 'dark:bg-white', 'dark:fill-black', 'dark:stroke-black', 'stroke-white' ); this.classList.remove('dark:fill-white', 'dark:stroke-white'); 
					document.getElementById('graphButton').classList.add('stroke-black', 'dark:stroke-white'); 
					document.getElementById('graphButton').classList.remove('bg-black', 'stroke-white', 'dark:bg-white', 'dark:stroke-black');"
				>
					<svg class="w-[18px] h-[18px]">
						@SVG("table", Size(24), NoFill(), Box(24, 24), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
					</svg>
				</button>
				@Tooltip(l10n.Get("table"))
			</div>
		</div>
	</div>
}
