package components

import (
	"fmt"
	. "github.com/diwise/frontend-toolkit"
	"sort"
	"strings"
)

type ThingDetailsViewModel struct {
	Thing         ThingViewModel
	Organisations []string
	Tenant        string
	TableView     bool
	ValidSensors  []ValidSensorViewModel
	Tags          []string
}

type ValidSensorViewModel struct {
	SensorID string
	DeviceID string
	Decoder  string
}

type NewThingViewModel struct {
	ThingType     []string
	ThingSubType  []string
	Organisations []string
	Tags          []string
	Thing         ThingViewModel
}

templ ThingDetailsPage(l10n Localizer, asset AssetLoaderFunc, thingDetails templ.Component) {
	<div class="flex flex-col items-start gap-14 flex-[1_0_0] w-full" id="things-view">
		@thingDetails
	</div>
}

templ ThingDetails(l10n Localizer, asset AssetLoaderFunc, model ThingDetailsViewModel) {
	@afterSwap()
	<div class="w-full">
		// Header, name + edit button
		<div class="flex items-center w-full justify-between">
			if model.Thing.Name != "" {
				<div class="flex items-center gap-6 align-middle">
					<h1 class="text-primary-dark dark:text-white text-2xl font-bold font-heading leading-loose">{ model.Thing.Name }</h1>
				</div>
			} else if model.Thing.ID == "" {
				<div class="flex items-center align-middle">
					<h1 class="py-3">&nbsp;</h1>
				</div>
			} else {
				<div class="flex items-center gap-6 align-middle">
					<h1 class="text-primary-dark dark:text-white text-2xl font-bold font-heading leading-loose">{ model.Thing.ID }</h1>
				</div>
			}
			@Button(Tertiary, l10n.Get("edit"), "pen", Target("#things-view"), HxUrl("get", (fmt.Sprintf("/components/things/%s?mode=edit", model.Thing.ID))))
		</div>
		// Contents
		<div class="flex flex-col items-start gap-10">
			// Stats, chart or table
			<div class="flex flex-col items-start self-stretch pt-6">
				// Header for stats
				<div class="flex items-center gap-3 self-stretch">
					@SVG("chartline", Size(24), NoFill(), Box(24, 24), StrokeColor("primary-dark", "zinc-100"), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
					<h2 class="font-heading text-xl font-bold dark:text-white whitespace-nowrap">{ l10n.Get("statistics") }</h2>
					<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
				</div>
				@ThingStatistics(l10n, asset, model)
			</div>
			//Uppgifter och position
			<div class="flex items-start self-stretch py-6 gap-10">
				//Uppgifter och larm
				<div class="flex flex-col items-start gap-6 flex-[1_0_0]">
					//Uppgifter
					<div class="flex items-center gap-3 self-stretch">
						//Rubrik
						@SVG("info", Size(24), NoFill(), Box(24, 24), StrokeColor("primary-dark", "zinc-100"), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
						<h2 class="font-heading text-xl font-bold dark:text-white">{ l10n.Get("details") }</h2>
						<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
					</div>
					//Inneh√•ll Uppgifter
					<div class="flex flex-col items-start self-stretch gap-6 px-9 text-secondary-dark dark:text-secondary">
						<div class="flex flex-start gap-2">
							<div class="font-bold">{ l10n.Get("thingtype") }</div>
							<div class="">{ l10n.Get(model.Thing.Type) }</div>
						</div>
						if model.Thing.SubType != "" {
							<div class="flex flex-start gap-2">
								<div class="font-bold">{ l10n.Get("category") }</div>
								<div class="">{ l10n.Get(model.Thing.SubType) }</div>
							</div>
						}
						<div class="flex flex-start gap-2">
							<div class="font-bold">{ l10n.Get("name") }</div>
							if model.Thing.Name == "" {
								<div class="italic text-secondary-outline-hover dark:text-secondary">{ l10n.Get("missing") }</div>
							} else {
								<div class="">
									{ l10n.Get(model.Thing.Name) }
								</div>
							}
						</div>
						if strings.ToLower(model.Thing.Type) == "container" {
							if strings.ToLower(model.Thing.SubType) == "wastecontainer" {
								@WasteContainerProperties(l10n, model)
							}
							if strings.ToLower(model.Thing.SubType) == "sandstorage" {
								@SandStorageProperties(l10n, model)
							}
						}
						if strings.ToLower(model.Thing.Type) == "sewer" {
							@SewerProperties(l10n, model)
						}
						<div class="flex flex-start gap-2">
							<div class="font-bold">{ l10n.Get("description") }</div>
							if model.Thing.Description == "" {
								<div class="italic text-secondary-outline-hover dark:text-secondary">{ l10n.Get("missing") }</div>
							} else {
								<div class="">
									{ l10n.Get(model.Thing.Description) }
								</div>
							}
						</div>
						<div class="flex flex-start gap-2">
							<div class="font-bold text-nowrap">{ l10n.Get("sensorconnected") }</div>
							if len(model.Thing.RefDevice) == 0 {
								<div class="italic text-secondary-outline-hover dark:text-secondary">{ l10n.Get("sensormissing") }</div>
							} else {
								for _, r := range model.Thing.RefDevice {
									<div class="underline text-primary-surface-blue dark:text-primary-surface-blue-dark">
										<a href={ templ.SafeURL(fmt.Sprintf("/sensors/%s", r)) }>{ r }</a>
									</div>
								}
							}
						</div>
						<div class="flex flex-start gap-2">
							<div class="font-bold">{ l10n.Get("organisation") }</div>
							<div class="">{ model.Thing.Tenant }</div>
						</div>
						<div class="flex items-center gap-2">
							<div class="flex flex-col gap-2">
								<div class="flex items-center gap-2 flex-wrap">
									for _, tag := range model.Thing.Tags {
										<div class="px-2 py-1 rounded-full text-sm border-gray-30 dark:border-white-30 border-2 dark:text-secondary ">
											{ tag }
										</div>
									}
								</div>
							</div>
						</div>
					</div>
				</div>
				//@AlarmList(l10n)
				//Vertikal gray-30 mellan uppgifter och position
				<div class="flex flex-col items-start self-stretch gap-2 border-l border-gray-30 dark:border-white-30 h-auto"></div>
				//Position
				<div class="flex flex-col items-start gap-6 flex-[1_0_0]">
					<div class="flex flex-col items-start self-stretch">
						//Karta
						<div class="flex items-center gap-3 self-stretch">
							//Position rubrik
							@SVG("map-pin", Size(24), NoFill(), Box(24, 24), StrokeColor("primary-dark", "zinc-100"), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
							<h2 class="font-heading text-xl font-bold dark:text-white">{ l10n.Get("location") }</h2>
							<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
						</div>
						<div class="flex flex-col items-start self-stretch gap-6 py-6 px-9 text-secondary-dark dark:text-secondary">
							//
							<div class="flex flex-start gap-2">
								<div class="font-bold">{ l10n.Get("latitude") }</div>
								<div class="">{ fmt.Sprintf("%f", model.Thing.Latitude) }</div>
							</div>
							<div class="flex flex-start gap-2">
								<div class="font-bold">{ l10n.Get("longitude") }</div>
								<div class="">{ fmt.Sprintf("%f", model.Thing.Longitude) }</div>
							</div>
							@Map("small", false, false, newMapData(model.Thing.Latitude, model.Thing.Longitude), thingsToMapFeature(l10n, []ThingViewModel{model.Thing}))
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ DeleteThing(l10n Localizer, asset AssetLoaderFunc, thingID, thingName string) {
	<div id="modalDeleteThing" class="fixed inset-0 bg-gray-30 z-50 flex items-center justify-center">
		<div class="bg-white rounded-lg shadow-xl w-full max-w-xl p-6">
			<div class="w-full">
				<div class="flex items-center w-full justify-between">
					<div class="flex items-center gap-6 align-middle">
						<h1 class="text-primary-dark dark:text-white text-2xl font-bold font-heading leading-loose">
							{ l10n.Get("deletethingconfirm") }{ fmt.Sprintf(" %s", thingName) }?
						</h1>
					</div>
				</div>
				<div class="w-full flex py-6 gap-10 text-primary-dark dark:text-white">
					<div class="flex flex-col items-start gap-20 flex-[1_0_0]">
						{ fmt.Sprintf("%s ", thingName) }
						{ l10n.Get("deletethinginformation") }
					</div>
				</div>
				<div class="flex items-center justify-end pt-6">
					<div class="flex items-center gap-4">
						<div id="cancelButton">
							@Button(Secondary, l10n.Get("cancel"), "close", Name("cancel"), BtnType("button"))
						</div>
						@Button(Error, l10n.Get("delete"), "trashcan", Name("delete"),
							HxUrl("delete", "/things/"+thingID+"?confirmed=true"),
							Target("#body"))
					</div>
				</div>
				<script>
					document.getElementById('cancelButton').addEventListener('click', function() {
						document.getElementById('modalDeleteThingContainer').classList.add('hidden');
					});
				</script>
			</div>
		</div>
	</div>
}

templ WasteContainerProperties(l10n Localizer, model ThingDetailsViewModel) {
	<div class="flex flex-start gap-2">
		<div class="font-bold">{ l10n.Get("size") }</div>
		<div class="font-normal">
			if model.Thing.GetFloatOrDefault("maxd", 0) != 0 {
				<div>
					{ l10n.Get("containerheight") }
					<span>{ fmt.Sprintf("%0.2f",model.Thing.GetFloatOrDefault("maxd", 0)) }</span> m
				</div>
			}
			if model.Thing.GetFloatOrDefault("maxl", 0) != 0 {
				<div>
					{ l10n.Get("maxfillingheight") }
					<span>{ fmt.Sprintf("%0.2f",model.Thing.GetFloatOrDefault("maxl", 0)) }</span> m.
				</div>
			}
			if model.Thing.GetFloatOrDefault("maxd", 0) == 0 && model.Thing.GetFloatOrDefault("maxl", 0) == 0 {
				<div class="italic text-secondary-outline-hover dark:text-secondary">
					{ l10n.Get("missing") }
				</div>
			}
		</div>
	</div>
}

templ SandStorageProperties(l10n Localizer, model ThingDetailsViewModel) {
	<div class="flex flex-start gap-2">
		<div class="font-bold">{ l10n.Get("size") }</div>
		<div class="font-normal">
			if model.Thing.GetFloatOrDefault("maxd", 0) != 0 {
				<div>
					{ l10n.Get("containerheight") }
					<span>{ fmt.Sprintf("%0.2f",model.Thing.GetFloatOrDefault("maxd", 0)) }</span> m
				</div>
			}
			if model.Thing.GetFloatOrDefault("maxl", 0) != 0 {
				<div>
					{ l10n.Get("maxfillingheight") }
					<span>{ fmt.Sprintf("%0.2f",model.Thing.GetFloatOrDefault("maxl", 0)) }</span> m.
				</div>
			}
			if model.Thing.GetFloatOrDefault("angle", 0) != 0 {
				<div>
					{ l10n.Get("angleis") }
					<span>{ fmt.Sprintf("%0.2f",model.Thing.GetFloatOrDefault("angle", 0)) }</span> { l10n.Get("degrees") }.
				</div>
			} else {
				<div class="italic text-secondary-outline-hover dark:text-secondary">
					{ l10n.Get("angleismissing") }
				</div>
			}
		</div>
	</div>
}

templ SewerProperties(l10n Localizer, model ThingDetailsViewModel) {
	<div class="flex flex-start gap-2">
		<div class="font-bold">{ l10n.Get("measurements") }</div>
		<div class="font-normal">
			if model.Thing.GetFloatOrDefault("maxd", 0) != 0 {
				<div>
					{ l10n.Get("sewerheight") }
					<span>{ fmt.Sprintf("%0.2f",model.Thing.GetFloatOrDefault("maxd", 0)) }</span> m
				</div>
			}
			if model.Thing.GetFloatOrDefault("offset", 0) != 0 {
				<div>
					{ l10n.Get("offsetsetting") }
					<span>{ fmt.Sprintf("%0.2f",model.Thing.GetFloatOrDefault("offset", 0)) }</span> m.
				</div>
			}
			if model.Thing.GetFloatOrDefault("maxl", 0) != 0 {
				<div>
					{ l10n.Get("maxwaterlevelheight") }
					<span>{ fmt.Sprintf("%0.2f",model.Thing.GetFloatOrDefault("maxl", 0)) }</span> m.
				</div>
			}
		</div>
	</div>
}

templ RoomProperties(l10n Localizer, model ThingDetailsViewModel) {
	//TODO: Beh√∂ver vi n√•gra s√§rskilda rumsegenskaper?
	/*<div class="">
		<div class="">Beh√•llaren har en h√∂jd p√•
			<span>222</span> mm</div>
		<div>
			med en max fyllnadsh√∂jd p√• 
			<span>200</span> mm.
		</div>
	</div>*/
}

func TypeSelect(l10n Localizer, asset AssetLoaderFunc, id, selected string, types []string) templ.Component {
	viewModel := []OptionViewModel{
		{
			Value:    "",
			Text:     l10n.Get("choose"),
			Selected: true,
			Hidden:   true,
			Disabled: true,
		},
	}

	for _, t := range types {
		viewModel = append(viewModel, OptionViewModel{
			Value:    t,
			Text:     l10n.Get(t),
			Selected: t == selected,
		})
	}

	sort.Slice(viewModel, func(i, j int) bool {
		return viewModel[i].Text < viewModel[j].Text
	})

	return Select(id, false, "", "", viewModel)
}

templ afterSwap() {
	<script>
		document.addEventListener('htmx:afterSwap', function(evt) {
			function checkItemsLoaded() {
				initializeItems('.tagItem', 'tagInput', 'addTagButton', 'selectedTags', 'tag-options', 'selectedTagContainer', "tagItem", "removeTagIcon");
				initializeItems('.sensorItem', 'sensorInput', 'addSensorButton', 'selectedSensors', 'sensor-options', 'selectedSensorContainer', "sensorItem", "removeSensorIcon");
			}

			function initializeItems(itemType, inputId, buttonId, hiddenInputId, datalistId, containerId, itemClass, iconClass) {
				var items = document.querySelectorAll(itemType);
				var hiddenInput = document.getElementById(hiddenInputId);
				var currentItems = hiddenInput ? hiddenInput.value.split(',') : [];
				
				currentItems.forEach(function(sensor) {
					updateSelectedItem(sensor, containerId, hiddenInputId, datalistId, itemClass, iconClass);
				});

				var buttonElement = document.getElementById(buttonId);
				if (buttonElement) {
					buttonElement.addEventListener('click', function() {
						var selectedValue = document.getElementById(inputId).value;
						if (selectedValue) {
							updateSelectedItem(selectedValue, containerId, hiddenInputId, datalistId, itemClass, iconClass);
							document.getElementById(inputId).value = "";
						}
					});
				} 
			}

			function removeItemFromDatalist(item, datalistId) {
				const datalist = document.getElementById(datalistId);
				const option = datalist.querySelector(`option[value="${item}"]`);
				if (option) {
					option.remove();
				}
			}

			function addItemToDatalist(item, datalistId) {
				const datalist = document.getElementById(datalistId);
				if (datalist.querySelector(`option[value="${item}"]`)) {
					return;
				}

				const option = document.createElement('option');
				option.value = item;
				option.textContent = item;

				const options = Array.from(datalist.children);
				let inserted = false;
				for (let i = 0; i < options.length; i++) {
					if (options[i].value.localeCompare(item) > 0) {
						datalist.insertBefore(option, options[i]);
						inserted = true;
						break;
					}
				}

				if (!inserted) {
					datalist.appendChild(option);
				}
			}

			function createElement(item, className, iconClass) {
				return `
					<div data-item="${item}" class="flex items-center p-2 rounded-full gap-1 ${className} border-gray-30 dark:border-white-30 border stroke-primary-dark dark:stroke-white">
						<span>${item}</span>
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x ${iconClass} cursor-pointer">
							<line x1="18" y1="6" x2="6" y2="18"></line>
							<line x1="6" y1="6" x2="18" y2="18"></line>
						</svg>
					</div>
				`;
			}

			function updateHiddenInput(items, hiddenInputId) {
				var hiddenInput = document.getElementById(hiddenInputId);
				hiddenInput.value = items.join(',');
			}

			function addRemoveItemListener(itemElement, itemText, currentItems, hiddenInputId, datalistId) {
				const removeIcon = itemElement.querySelector('.feather-x');
				if (removeIcon) {
					removeIcon.addEventListener('click', function() {
						itemElement.remove();
						addItemToDatalist(itemText, datalistId);
						var index = currentItems.indexOf(itemText);
						if (index > -1) {
							currentItems.splice(index, 1);
						}
						updateHiddenInput(currentItems, hiddenInputId);
					});
				}
			}

			function updateSelectedItem(item, containerId, hiddenInputId, datalistId, itemClass, iconClass) {
				if (item) {
					const container = document.getElementById(containerId);
					if (container.querySelector(`.${itemClass}[data-item="${item}"]`)) {
						return;
					}
					
					var itemElement = document.createElement('div');
					itemElement.innerHTML = createElement(item, itemClass, iconClass).trim();
					itemElement = itemElement.firstChild;

					document.getElementById(containerId).appendChild(itemElement);

					var hiddenInput = document.getElementById(hiddenInputId);
					var currentItems = hiddenInput.value ? hiddenInput.value.split(',') : [];
					currentItems.push(item);
					currentItems = [...new Set(currentItems)];
					updateHiddenInput(currentItems, hiddenInputId);

					addRemoveItemListener(itemElement, item, currentItems, hiddenInputId, datalistId);
					removeItemFromDatalist(item, datalistId);
				}
			}

			checkItemsLoaded();
		});
	</script>
}
