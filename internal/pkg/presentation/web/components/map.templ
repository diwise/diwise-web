package components

import (
    "fmt"
)

type mapData struct {
	Latitude  float64
	Longitude float64
	Zoom      int
    CurrentView string
}

func newMapData(lat, lon float64) mapData {
	md := mapData{Latitude: lat, Longitude: lon, Zoom: 15}

	if md.Latitude < 1 {
		md.Latitude = 62.3908
		md.Longitude = 17.3069
		md.Zoom = 9
        md.CurrentView = "sensor"
	}

	return md
}

func NewFeatureCollection(features []Feature) FeatureCollection {
	return FeatureCollection{
		Type:     "FeatureCollection",
		Features: features,
	}
}

type FeatureCollection struct {
	Type     string    `json:"type"`
	Features []Feature `json:"features"`
}

func NewFeature(point Point) Feature {
	return Feature{
		Type:       "Feature",
		Geometry:   point,
		Properties: make(map[string]any), 
	}
}

type Feature struct {
	Type       string         `json:"type"`
	Geometry   Point          `json:"geometry"`
	Properties map[string]any `json:"properties"`
}

func (f *Feature) AddProperty(key string, value any) {
	f.Properties[key] = value
}

func NewPoint(lat, lon float64) Point {
	return Point{
		Type:        "Point",
		Coordinates: []float64{lon, lat},
	}
}

type Point struct {
	Type        string    `json:"type"`
	Coordinates []float64 `json:"coordinates"`
}

templ Map(mapsize string, showPopup, editmode bool, data mapData, featureCollection ...FeatureCollection) {
    <div id="map" 
        data-map={ templ.JSONString(data) } 
        data-features={ templ.JSONString(featureCollection) }
        data-show-popup={ fmt.Sprintf("%t", showPopup) }
        data-edit-mode={ fmt.Sprintf("%t", editmode) }
        if mapsize == "small" {
            class="w-full z-0 h-[30vh]"
        } else if mapsize == "medium" {
            class="w-full z-0 h-[50vh]"
        } else if mapsize == "large" {
            class="w-full z-0 h-[60vh]"
        }></div>
	<script>
        var map, lightModeTileLayer, darkModeTileLayer;
        
    (() => {
        function updateMapForTheme(isDarkMode) {
            if (!map) {
                return;
            }

            if (isDarkMode) {
                if (map.hasLayer(lightModeTileLayer)) {
                    map.removeLayer(lightModeTileLayer);
                }
                darkModeTileLayer.addTo(map);
            } else {
                if (map.hasLayer(darkModeTileLayer)) {
                    map.removeLayer(darkModeTileLayer);
                }
                lightModeTileLayer.addTo(map);
            }
        }

        lightModeTileLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
            maxZoom: 19,
        });

        darkModeTileLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
            maxZoom: 19,
        });

        function createMarker(latlng, icon, editMode = false, onDragCallback = null, zIndexOffset = 0) {
            const marker = L.marker(latlng, {
                icon: icon,
                zIndexOffset: zIndexOffset,
                draggable: editMode
            });

            if (editMode) {
                marker.on('drag', function(event) {
                    const position = marker.getLatLng();
                    document.getElementById('latitude').value = position.lat.toFixed(6);
                    document.getElementById('longitude').value = position.lng.toFixed(6);

                    if (onDragCallback) {
                        onDragCallback(position);
                    }
                });

                marker.on('dragend', function(event) {
                    const position = marker.getLatLng();
                    document.getElementById('latitude').value = position.lat.toFixed(6);
                    document.getElementById('longitude').value = position.lng.toFixed(6);

                    if (onDragCallback) {
                        onDragCallback(position);
                    }
                });
            }

            marker.on('click', function() {
                resetZIndex();
                marker.setZIndexOffset(1000);
            });

            return marker;
        }

        function resetZIndex() {
            map.eachLayer(function(layer) {
                if (layer instanceof L.Marker) {
                    layer.setZIndexOffset(0);
                }
            });
        }

        const m = document.getElementById('map');
        const mapData = JSON.parse(m.getAttribute('data-map'));
        const geodata = JSON.parse(m.getAttribute('data-features'));
        const showPopup = m.getAttribute('data-show-popup') === 'true';
        const editMode = m.getAttribute('data-edit-mode') === 'true';

        var map = L.map('map').setView([mapData.Latitude, mapData.Longitude], mapData.Zoom);

        const isDarkMode = document.body.classList.contains('dark');
        if (isDarkMode) {
            darkModeTileLayer.addTo(map);
        } else {
            lightModeTileLayer.addTo(map);
        }

        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
            const isDarkMode = e.matches;
            updateMapForTheme(isDarkMode);
        });
        
        function createIcon(iconUrl, iconSize = [40, 40], iconAnchor = [12, 41], popupAnchor = [1, -34], shadowSize = [41, 41]) {
            return L.icon({
                iconUrl: iconUrl,
                iconSize: iconSize,
                iconAnchor: iconAnchor,
                popupAnchor: popupAnchor,
                shadowSize: shadowSize
            });
        }

        function getIconByTypeAndTheme(type, isDarkMode) {
            let iconUrl;

            switch (type) {
                case 'sensor':
                    iconUrl = isDarkMode ? '/assets/ea4fbf040ffc101dcc425140ef38ba0f840c63af0f7b5a1d3d5f3868a8c6c5fb/sensorblack.svg' : '/assets/34ed2a96f7750c911539c45ae445b9b3cf95264ac9eb7f194718b86215aadb6b/sensor.svg';
                    break;
                case 'wastecontainer':
                    iconUrl = isDarkMode ? '/assets/fffe78b7b16e41765bad95685cbbbcb529b6ceb2e7e6ee4b5086b57b9b451768/wastecontainerblack.svg' : '/assets/5d00f7f613cd020b3a46427c3854f9f2b3b42f35a2de051b4f5187df4984cbdd/wastecontainer.svg';
                    break;
                case 'lifebuoy':
                    iconUrl = '/assets/70586d0ec04481509c957c9c53e29e8dff01ccdff43490521c6748cef7301dea/lifebuoy.svg';
                    break;
                case 'thermometer':
                    iconUrl = '/assets/f1fb89b6ac04649840b18d82bd99c07e0bd15dabb4e1a571d5268f89e7b90c33/thermometer.svg';
                    break;
                case 'sewer':
                case 'sewagepumpingstation':
                case 'combinedsewageoverflow':
                case 'drain':
                    iconUrl = isDarkMode ? '/assets/894182e183a94ca34fd8014583fd81269bcb97a88dddfd3ca4c438df4542c41c/sewerblack.svg' : '/assets/b7c62f1202a77226a1a6ca1012eb9ea996f1924135cf82fdbc725f2bfacee904/sewer.svg';
                    break;
                case 'passage':
                    iconUrl = isDarkMode ? '/assets/f44acacb4b3153a86ca0464fb739a7d5fd82b132314f30cd838636cbad441a7e/doorblack.svg' : '/assets/3c104c608445896f17b034513f9a4403d6042e40e0e5c64cee35e3d9a0aa0585/door.svg';
                    break;
                default:
                    iconUrl = isDarkMode ? '/assets/ea4fbf040ffc101dcc425140ef38ba0f840c63af0f7b5a1d3d5f3868a8c6c5fb/sensorblack.svg' : '/assets/34ed2a96f7750c911539c45ae445b9b3cf95264ac9eb7f194718b86215aadb6b/sensor.svg';
                    break;
            }

            return { iconUrl };
        }

        var layers = {};

        if (geodata && Array.isArray(geodata)) {
            geodata.forEach(data => {
                data.features.forEach(feature => { 
                    function getColorByState(state) {
                        switch(state) {
                            case "red":
                                return { colorClass: 'bg-red-600 dark:bg-err-prim-surf', lightipColor: '#D62E2E', darktipColor: '#FBC1C1' };
                            case "orange":
                                return { colorClass: 'bg-orange-600 dark:bg-primary-surface-orange-accent', lightipColor: '#DB6900', darktipColor: '#FFA34D' };
                            case "green": 
                                return { colorClass: 'bg-green-700 dark:bg-primary-surface-green-accent', lightipColor: '#00733B', darktipColor: '#AAD4BF' };
                            default: 
                                return { colorClass: 'bg-primary-dark dark:bg-white', lightipColor: '#1F1F25', darktipColor: '#FFFFFF' };
                        }
                    }

                    L.geoJSON(feature, { 
                       pointToLayer: function(feature, latlng) {
                            const type = feature.properties.type.toLowerCase();
                            const { colorClass, lightipColor, darktipColor } = getColorByState(feature.properties.state);
                            const tipColor = isDarkMode ? darktipColor : lightipColor;
                            const tipIcon = '<svg width="41" height="8" viewBox="0 0 41 8" fill="none">' +
                                                '<g clip-path="url(#clip0_1768_10260)">'+ 
                                                    '<rect x="6.5" y="-8" width="20" height="20" transform="rotate(-45 6.5 -8)" fill="' + tipColor + '"/>' +
                                                '</g>' +
                                                '<defs>' + 
                                                    '<clipPath id="clip0_1768_10260">' +
                                                        '<rect width="40" height="8" fill="white" transform="translate(0.5)"/>' +
                                                    '</clipPath>' +
                                                '</defs>' +
                                            '</svg>';

                            // Hämta rätt ikon-URL och storlek beroende på typen och om det är mörkt eller ljust tema
                            const { iconUrl } = getIconByTypeAndTheme(type, isDarkMode);
                            const fillingLevelHtml = feature.properties.fillinglevel ? '<div class="text-sm font-bold">' + feature.properties.fillinglevel + '%</div>' : '';

                            const divIcon = L.divIcon({
                                className: '',
                                html: '<div class="flex flex-col items-center"><div class="flex flex-col items-center justify-center ' + colorClass + ' text-white dark:text-primary-dark p-2 rounded-lg shadow-md gap-2">' + 
                                        '<div class="flex flex-row items-center gap-2">' +
                                            '<img src="' + iconUrl + '">' +
                                            fillingLevelHtml +
                                        '</div></div>' +
                                    '<div class="flex items-center">' + tipIcon + '</div></div>',
                                iconSize: [60, 44],
                                iconAnchor: [30, 44],
                                popupAnchor: [0, -50], 
                                shadowSize: [41, 41]
                            });

                            const marker = createMarker([feature.geometry.coordinates[1], feature.geometry.coordinates[0]], divIcon, editMode);
                            return marker;
                        },
                        onEachFeature: function(feature, layer) {
                            if (showPopup) {
                                var cv = mapData.CurrentView;
                                var popupContent = null;

                                var tagList = '';
                                if (feature.properties.tags && Array.isArray(feature.properties.tags)) {
                                    tagList = `<div class="flex flex-wrap gap-1">` + feature.properties.tags.map(tag => 
                                                `<span class="dark:bg-primary-surface-dark dark:text-primary-dark px-2 py-1 mr-2 rounded-full text-sm border-gray-30 dark:border-white-30 border-2">
                                                    ${tag}
                                                </span>`).join('')+ 
                                              `</div>`; 
                                } else {
                                    tagList = '';
                                }

                                if (cv === "sensor") {
                                    popupContent = '<div class="flex flex-col items-start gap-6 py-3 text-base">' +
                                                        '<div class="flex flex-col items-start self-stretch justify-center gap-6">' +
                                                            '<div class="flex flex-col items-start gap-2">' +
                                                                '<span class="px-2.5 py-1 rounded-full justify-start items-center gap-1.5 ' + (feature.properties.status ? 'bg-primary-green-accent' : 'bg-tertiary-surface') + '">' +
                                                                    '<span class="text-sm font-bold font-sans leading-none ' + (feature.properties.status ? 'text-primary-green' : 'text-primary-dark"') + '">' + 
                                                                        (feature.properties.status ? feature.properties.text_active : feature.properties.text_inactive) + 
                                                                    '</span>' +
                                                                '</span>' +
                                                                '<h2 class="font-heading text-xl font-bold first-letter:uppercase">' + feature.properties.name + '</h2>' +
                                                            '</div>' +
                                                            '<div class="flex flex-col items-start gap-2">' +
                                                                '<div class="flex items-center gap-2">' +
                                                                    '<div class="font-bold">' + feature.properties.text_deveui + '</div>' +
                                                                    '<div class="">' + feature.properties.deveui + '</div>' +
                                                                '</div>' +
                                                                '<div class="flex items-center gap-2">' + 
                                                                    '<div class="font-bold">' + feature.properties.text_sensortype + '</div>' +
                                                                    '<div class="">' + feature.properties.type + '</div>' +
                                                                '</div>' +
                                                                '<div class="flex items-center gap-2">' +
                                                                    '<div class="font-bold">' + feature.properties.text_batterylevel + '</div>' +
                                                                    '<div class="">' + feature.properties.batterylevel + '</div>' +
                                                                '</div>' +
                                                                '<div class="flex items-start gap-2">' +
                                                                    '<div class="font-bold">' + feature.properties.text_position + '</div>' +
                                                                    '<div class="">' + feature.properties.latitude + ', ' + feature.properties.longitude + '</div>' +
                                                                '</div>' +
                                                                '<div class="flex items-center gap-2">' +
                                                                    '<div class="font-bold">' + feature.properties.text_lastseen + '</div>' +
                                                                    '<div class="">' + feature.properties.lastseen + '</div>' +
                                                                '</div>' +
                                                            '</div>' +
                                                        '</div>' +
                                                        '<div class="h-px border-t border-gray-30 dark:border-white-30 w-full"></div>' +
                                                        '<a href="' + feature.properties.url + ' "class="flex justify-center items-center gap-2 rounded-xl cursor-pointer font-bold px-4 py-2 text-white dark:text-primary-surface-hover bg-primary-surface hover:bg-primary-surface-hover dark:bg-white dark:hover:bg-primary-surface-dark-hover">' + 
                                                            feature.properties.text_moreinformation +
                                                            '<div class="w-[20px] h-[20px]">' +
                                                                '<svg class="stroke-white dark:stroke-primary-surface-hover fill-none h-5 w-5" viewBox="0 0 24 24" stroke-width="2"><path fill-rule="evenodd" d="M4 12a1 1 0 0 1 1-1h14a1 1 0 1 1 0 2H5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M11.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L17.586 12l-6.293-6.293a1 1 0 0 1 0-1.414Z" clip-rule="evenodd"></path></svg>' +
                                                            '</div>' +
                                                        '</a>' +
                                                    '</div>';
                                } else if (cv === "thing" && feature.properties.type.toLowerCase() === "wastecontainer") {
                                    var colourClass = "bg-background-200";

                                    if (feature.properties.fillinglevel >= 51) {
                                        colourClass = "bg-red-600 dark:bg-err-prim-surf";
                                    } else if (feature.properties.fillinglevel <= 30) {
                                        colourClass = "bg-green-700 dark:bg-primary-surface-green-accent";
                                    } else {
                                        colourClass = "bg-orange-600 dark:bg-primary-surface-orange-accent";
                                    }
                                        popupContent = '<div class="flex flex-col items-start gap-6 py-3 text-base">' +
                                                            '<div class="flex flex-col items-start self-stretch justify-center gap-6">' +
                                                                '<div class="flex flex-col items-start gap-4 text-primary-dark dark:text-white">' +
                                                                    '<div class="flex items-center gap-2">' +
                                                                        '<div class="font-bold">' + feature.properties.text_id + '</div>' +
                                                                        '<div class="">' + feature.properties.id + '</div>' +
                                                                    '</div>' +
                                                                    '<div class="flex flex-col items-start justify-center gap-2 self-stretch">' +
                                                                        '<div class="font-bold">' + feature.properties.text_fillinglevel + '</div>' +
                                                                        '<div class="flex w-full items-center gap-2 text-sm">' +
                                                                            '<div class="w-[75%] bg-background-200 dark:bg-primary-surface-white rounded-lg">' +
                                                                                '<div class="' + colourClass + ' rounded-lg" style="width: ' + feature.properties.fillinglevel + '%; height: 6px;"></div>' +
                                                                            '</div>' +
                                                                            '<div class="text-sm text-right w-auto">' + feature.properties.fillinglevel + '%</div>' +
                                                                        '</div>' + 
                                                                    '</div>' +
                                                                    '<div class="flex items-start gap-2">' +
                                                                        '<div class="font-bold">' + feature.properties.text_position + '</div>' +
                                                                        '<div class="">' + feature.properties.latitude + ', ' + feature.properties.longitude + '</div>' +
                                                                    '</div>' +
                                                                    '<div class="flex items-start gap-2">' +
                                                                        '<div class="">' + tagList + '</div>' +
                                                                    '</div>' +
                                                                '</div>' +
                                                                '<div class="h-px border-t border-gray-30 dark:border-white-30 w-full"></div>' +					
                                                                '<a href="' + feature.properties.url + '" class="flex justify-center items-center gap-2 rounded-xl cursor-pointer font-bold px-4 py-2 text-white dark:text-primary-surface-hover bg-primary-surface hover:bg-primary-surface-hover dark:bg-white dark:hover:bg-primary-surface-dark-hover">' +
                                                                    feature.properties.text_moreinformation + 
                                                                    '<div class="w-[20px] h-[20px]">' +
                                                                        '<svg class="stroke-white dark:stroke-primary-surface-hover fill-none h-5 w-5" viewBox="0 0 24 24" stroke-width="2"><path fill-rule="evenodd" d="M4 12a1 1 0 0 1 1-1h14a1 1 0 1 1 0 2H5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M11.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L17.586 12l-6.293-6.293a1 1 0 0 1 0-1.414Z" clip-rule="evenodd"></path></svg>' +
                                                                    '</div>' +
                                                                '</a>' +
                                                            '</div>';
                                } else if (cv === "thing" && feature.properties.type.toLowerCase() === "passage") {
                                    popupContent = '<div class="flex flex-col items-start gap-6 py-3 text-base">' +
                                                        '<div class="flex flex-col items-start self-stretch justify-center gap-6">' +
                                                            '<div class="flex flex-col items-start gap-4 text-primary-dark dark:text-white">' +
                                                                '<div class="flex items-center gap-2">' +
                                                                    '<div class="font-bold">' + feature.properties.text_id + '</div>' +
                                                                    '<div class="">' + feature.properties.id + '</div>' +
                                                                '</div>' +
                                                                '<div class="flex items-center gap-2"></div>' +
                                                                    '<div class="flex items-start gap-2">' +
                                                                        '<div class="font-bold">' + feature.properties.text_position + '</div>' +
                                                                        '<div class="">' + feature.properties.latitude + ', ' + feature.properties.longitude + '</div>' +
                                                                    '</div>' +
                                                                    '<div class="flex items-start gap-2">' +
                                                                        '<div class="">' + tagList + '</div>' +
                                                                    '</div>' +
                                                                '</div>' +
                                                                '<div class="h-px border-t border-gray-30 dark:border-white-30 w-full"></div>' +					
                                                                '<a href="' + feature.properties.url + '" class="flex justify-center items-center gap-2 rounded-xl cursor-pointer font-bold px-4 py-2 text-white dark:text-primary-surface-hover bg-primary-surface hover:bg-primary-surface-hover dark:bg-white dark:hover:bg-primary-surface-dark-hover">' +
                                                                    feature.properties.text_moreinformation + 
                                                                    '<div class="w-[20px] h-[20px]">' +
                                                                        '<svg class="stroke-white dark:stroke-primary-surface-hover fill-none h-5 w-5" viewBox="0 0 24 24" stroke-width="2"><path fill-rule="evenodd" d="M4 12a1 1 0 0 1 1-1h14a1 1 0 1 1 0 2H5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M11.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L17.586 12l-6.293-6.293a1 1 0 0 1 0-1.414Z" clip-rule="evenodd"></path></svg>' +
                                                                    '</div>' +
                                                                '</a>' +
                                                            '</div>';
                                } else if (cv === "thing" && feature.properties.type.toLowerCase() === "combinedsewageoverflow") {
                                    popupContent = '<div class="flex flex-col items-start gap-6 py-3 text-base">' +
                                                        '<div class="flex flex-col items-start self-stretch justify-center gap-6">' +
                                                            '<div class="flex flex-col items-start gap-4 text-primary-dark dark:text-white">' +
                                                                '<div class="flex items-center gap-2">' +
                                                                    '<div class="font-bold">' + feature.properties.text_id + '</div>' +
                                                                    '<div class="">' + feature.properties.id + '</div>' +
                                                                '</div>' +
                                                                '<div class="flex items-center gap-2">' +
                                                                    '<div class="font-bold">' + feature.properties.text_overflow + '</div>' +
                                                                    '<div class="">' + feature.properties.state + '</div>' +
                                                                '</div>' +
                                                                '<div class="flex items-start gap-2">' +
                                                                    '<div class="font-bold">' + feature.properties.text_position + '</div>' +
                                                                    '<div class="">' + feature.properties.latitude + ', ' + feature.properties.longitude + '</div>' +
                                                                '</div>' +
                                                                '<div class="flex items-start gap-2">' +
                                                                    '<div class="">' + tagList + '</div>' +
                                                                '</div>' +
                                                            '</div>' +
                                                            '<div class="h-px border-t border-gray-30 dark:border-white-30 w-full"></div>' +					
                                                            '<a href="' + feature.properties.url + '" class="flex justify-center items-center gap-2 rounded-xl cursor-pointer font-bold px-4 py-2 text-white dark:text-primary-surface-hover bg-primary-surface hover:bg-primary-surface-hover dark:bg-white dark:hover:bg-primary-surface-dark-hover">' +
                                                                feature.properties.text_moreinformation + 
                                                                '<div class="w-[20px] h-[20px]">' +
                                                                    '<svg class="stroke-white dark:stroke-primary-surface-hover fill-none h-5 w-5" viewBox="0 0 24 24" stroke-width="2"><path fill-rule="evenodd" d="M4 12a1 1 0 0 1 1-1h14a1 1 0 1 1 0 2H5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M11.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L17.586 12l-6.293-6.293a1 1 0 0 1 0-1.414Z" clip-rule="evenodd"></path></svg>' +
                                                                '</div>' +
                                                            '</a>' +
                                                        '</div>';
                                } else {
                                    popupContent = '<div class="flex flex-col items-start gap-6 py-3 text-base">' +
                                                        '<div class="flex flex-col items-start self-stretch justify-center gap-6">' +
                                                            '<div class="flex flex-col items-start gap-4 text-primary-dark dark:text-white">' +
                                                                '<div class="flex items-center gap-2">' +
                                                                    '<div class="font-bold">' + feature.properties.text_id + '</div>' +
                                                                    '<div class="">' + feature.properties.id + '</div>' +
                                                                '</div>' +
                                                                '<div class="flex items-center gap-2">' +
                                                                    '<div class="font-bold">' + feature.properties.text_information + '</div>' +
                                                                    '<div class="text-italic">Saknas</div>' +
                                                                '</div>' +
                                                                '<div class="flex items-start gap-2">' +
                                                                    '<div class="font-bold">' + feature.properties.text_position + '</div>' +
                                                                    '<div class="">' + feature.properties.latitude + ', ' + feature.properties.longitude + '</div>' +
                                                                '</div>' +
                                                                '<div class="flex items-start gap-2">' +
                                                                    '<div class="">' + tagList + '</div>' +
                                                                '</div>' +
                                                            '</div>' +
                                                            '<div class="h-px border-t border-gray-30 dark:border-white-30 w-full"></div>' +					
                                                            '<a href="' + feature.properties.url + '" class="flex justify-center items-center gap-2 rounded-xl cursor-pointer font-bold px-4 py-2 text-white dark:text-primary-surface-hover bg-primary-surface hover:bg-primary-surface-hover dark:bg-white dark:hover:bg-primary-surface-dark-hover">' +
                                                                feature.properties.text_moreinformation + 
                                                                '<div class="w-[20px] h-[20px]">' +
                                                                    '<svg class="stroke-white dark:stroke-primary-surface-hover fill-none h-5 w-5" viewBox="0 0 24 24" stroke-width="2"><path fill-rule="evenodd" d="M4 12a1 1 0 0 1 1-1h14a1 1 0 1 1 0 2H5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M11.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L17.586 12l-6.293-6.293a1 1 0 0 1 0-1.414Z" clip-rule="evenodd"></path></svg>' +
                                                                '</div>' +
                                                            '</a>' +
                                                        '</div>';
                                }
                                
                                layer.bindPopup(popupContent);
                            }  
                        }
                    }).addTo(map);

                    function resetZIndex() {
                        map.eachLayer(function(layer) {
                            if (layer instanceof L.Marker) {
                                layer.setZIndexOffset(0); 
                            }
                        });
                    }
                });
            });
        }

        L.control.scale({ maxWidth: 200, metric: true, imperial: false }).addTo(map);

        function getBoundsCoordinates() {
            var bounds = map.getBounds();

            var southwest = bounds.getSouthWest();
            var northeast = bounds.getNorthEast();
        }

        // Kontrollera hörnkoordinater när kartan laddas och vid varje dragning eller zoomning
        map.on('load moveend zoomend', getBoundsCoordinates);

        /*
        document.querySelectorAll('.map-checkbox').forEach(checkbox => {
            checkbox.onchange = function() {
                var layerGroup = layers[this.id.replace('show', '').toLowerCase()];
                if (this.checked) {
                    layerGroup.addTo(map);
                } else {
                    map.removeLayer(layerGroup);
                }
            }
        });
        */

    })()
    </script>
}
