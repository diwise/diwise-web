package components

import (
    "fmt"
)

type mapData struct {
	Latitude  float64
	Longitude float64
	Zoom      int
    CurrentView string
}

func newMapData(lat, lon float64) mapData {
	md := mapData{Latitude: lat, Longitude: lon, Zoom: 15}

	if md.Latitude < 1 {
		md.Latitude = 62.3908
		md.Longitude = 17.3069
		md.Zoom = 9
        md.CurrentView = "sensor"
	}

	return md
}

func NewFeatureCollection(features []Feature) FeatureCollection {
	return FeatureCollection{
		Type:     "FeatureCollection",
		Features: features,
	}
}

type FeatureCollection struct {
	Type     string    `json:"type"`
	Features []Feature `json:"features"`
}

func NewFeature(point Point) Feature {
	return Feature{
		Type:       "Feature",
		Geometry:   point,
		Properties: make(map[string]any), 
	}
}

type Feature struct {
	Type       string         `json:"type"`
	Geometry   Point          `json:"geometry"`
	Properties map[string]any `json:"properties"`
}

func (f *Feature) AddProperty(key string, value any) {
	f.Properties[key] = value
}

func NewPoint(lat, lon float64) Point {
	return Point{
		Type:        "Point",
		Coordinates: []float64{lon, lat},
	}
}

type Point struct {
	Type        string    `json:"type"`
	Coordinates []float64 `json:"coordinates"`
}

templ Map(mapsize string, showPopup bool, data mapData, featureCollection ...FeatureCollection) {
    <div id="map" 
        data-map={ templ.JSONString(data) } 
        data-features={ templ.JSONString(featureCollection) }
        data-show-popup={ fmt.Sprintf("%t", showPopup) }
        if mapsize == "small" {
            class="w-full z-0 h-[30vh]"
        } else if mapsize == "medium" {
            class="w-full z-0 h-[50vh]"
        } else if mapsize == "large" {
            class="w-full z-0 h-[60vh]"
        }></div>
	<script>
    (() => {
        const m = document.getElementById('map');
        const mapData = JSON.parse(m.getAttribute('data-map'));
        const geodata = JSON.parse(m.getAttribute('data-features'));
        const showPopup = m.getAttribute('data-show-popup') === 'true';

        var map = L.map('map').setView([mapData.Latitude, mapData.Longitude], mapData.Zoom);

        L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
            maxZoom: 19,
            //attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
        }).addTo(map);

        var sensorIcon = L.icon({
            iconUrl: '/assets/092df4bb8f2c8826dd2f1b5c79a16a145d421f40d28c4656a6205cd4816766ac/sensor.svg',  
            iconSize: [40, 40],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });
        
        var trashcanIcon = L.icon({
            iconUrl: '/assets/0b061153871049297688d0f2a639afb3df59daa5d0f4a1afe414bc1a63d6fca3/trashcan.svg',  
            iconSize: [40, 40],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        var trachcanIconGreen = L.icon({
            iconUrl: '/assets/6dafe48f14417aefa79996a91a5bb92d241c465d47343829a7bb77c18b3ad312/trashcangreen.svg',
            iconSize: [40, 40],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        var trachcanIconRed = L.icon({
            iconUrl: '/assets/76d439309aa36b003fa76abd617fb0341e67714035f03ca1aa99a270931465d5/traschcanred.svg',
            iconSize: [40, 40],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        var lifebuoyIcon = L.icon({
            iconUrl: '/assets/70586d0ec04481509c957c9c53e29e8dff01ccdff43490521c6748cef7301dea/lifebuoy.svg',
            iconSize: [40, 40],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        var thermometerIcon = L.icon({
            iconUrl: '/assets/f1fb89b6ac04649840b18d82bd99c07e0bd15dabb4e1a571d5268f89e7b90c33/thermometer.svg',
            iconSize: [40, 40],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        var passageIcon = L.icon({
            iconUrl: '/assets/16fbeaa496501a4ac0a1b54d2530258c2b4b74090b6703aebdf94d3a3ec3766d/door.svg',
            iconSize: [40, 40],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        var drainIcon = L.icon({
            iconUrl: '/assets/4b6f555f94417954a8a1d3eace3803fed8bed1a57821134a6f75079d85b4989b/drain.svg',
            iconSize: [40, 40],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        var layers = {};

        if (geodata && Array.isArray(geodata)) {
            geodata.forEach(data => {
                data.features.forEach(feature => { 
                    var type = feature.properties.type;
                    var icon;

                    if (feature.properties.type.toLowerCase() === 'wastecontainer') {
                        const fillinglevel = feature.properties.fillinglevel;

                        if (fillinglevel <= 40) {
                            icon = trachcanIconGreen; // Låg fyllnadsnivå
                        } else if (fillinglevel > 40 && fillinglevel <= 69) {
                            icon = trashcanIcon; // Medel fyllnadsnivå
                        } else {
                            icon = trachcanIconRed; // Hög fyllnadsnivå
                        }
                    } else {
                        switch (type) {
                            case 'sensor':
                                icon = sensorIcon;
                                break;
                            case 'trashcan':
                            case 'wastecontainer':
                                icon = trashcanIcon;
                                break;
                            case 'lifebuoy':
                                icon = lifebuoyIcon;
                                break;
                            case 'thermometer':
                                icon = thermometerIcon;
                                break;
                            case 'sewer':
                            case 'sewagepumpingstation':
                            case 'combinedsewageoverflow':
                            case 'drain':
                                icon = drainIcon;
                                break;
                            case 'passage':
                                icon = passageIcon;
                                break;
                            default:
                                icon = sensorIcon;
                        }
                    }
                    L.geoJSON(feature, { 
                        pointToLayer: function(feature, latlng) {
                            if (feature.properties.type.toLowerCase() === 'wastecontainer') {
                                
                                const fillinglevel = feature.properties.fillinglevel;
                                let colorClass = 'bg-green-700';
                                let tipColor = '#00733B';

                                if (fillinglevel >= 70) {
                                    colorClass = 'bg-red-600';
                                    tipColor = '#D62E2E';
                                } else if (fillinglevel > 40 && fillinglevel < 70) {
                                    colorClass = 'bg-orange-600';
                                    tipColor = '#DB6900';
                                }

                                const wastecontainerIcon = '<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.3335 4.00008C1.3335 3.63189 1.63197 3.33341 2.00016 3.33341H14.0002C14.3684 3.33341 14.6668 3.63189 14.6668 4.00008C14.6668 4.36827 14.3684 4.66675 14.0002 4.66675H2.00016C1.63197 4.66675 1.3335 4.36827 1.3335 4.00008Z" fill="white"/><path fill-rule="evenodd" clip-rule="evenodd" d="M3.3335 3.33341C3.70169 3.33341 4.00016 3.63189 4.00016 4.00008V13.3334C4.00016 13.4499 4.06513 13.6222 4.22157 13.7787C4.378 13.9351 4.55032 14.0001 4.66683 14.0001H11.3335C11.45 14.0001 11.6223 13.9351 11.7788 13.7787C11.9352 13.6222 12.0002 13.4499 12.0002 13.3334V4.00008C12.0002 3.63189 12.2986 3.33341 12.6668 3.33341C13.035 3.33341 13.3335 3.63189 13.3335 4.00008V13.3334C13.3335 13.8836 13.0651 14.3779 12.7216 14.7215C12.378 15.065 11.8837 15.3334 11.3335 15.3334H4.66683C4.11668 15.3334 3.62232 15.065 3.27876 14.7215C2.93519 14.3779 2.66683 13.8836 2.66683 13.3334V4.00008C2.66683 3.63189 2.96531 3.33341 3.3335 3.33341Z" fill="white"/><path fill-rule="evenodd" clip-rule="evenodd" d="M6.22157 2.22149C6.06513 2.37792 6.00016 2.55024 6.00016 2.66675V4.00008C6.00016 4.36827 5.70169 4.66675 5.3335 4.66675C4.96531 4.66675 4.66683 4.36827 4.66683 4.00008V2.66675C4.66683 2.11659 4.93519 1.62224 5.27876 1.27868C5.62232 0.935113 6.11668 0.666748 6.66683 0.666748H9.3335C9.88365 0.666748 10.378 0.935113 10.7216 1.27868C11.0651 1.62224 11.3335 2.11659 11.3335 2.66675V4.00008C11.3335 4.36827 11.035 4.66675 10.6668 4.66675C10.2986 4.66675 10.0002 4.36827 10.0002 4.00008V2.66675C10.0002 2.55024 9.93519 2.37792 9.77876 2.22149C9.62232 2.06505 9.45001 2.00008 9.3335 2.00008H6.66683C6.55032 2.00008 6.378 2.06505 6.22157 2.22149Z" fill="white"/></svg>';
                                const tipIcon = '<svg width="41" height="8" viewBox="0 0 41 8" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0_1768_10260)"><rect x="6.5" y="-8" width="20" height="20" transform="rotate(-45 6.5 -8)" fill="' + tipColor + '"/></g><defs><clipPath id="clip0_1768_10260"><rect width="40" height="8" fill="white" transform="translate(0.5)"/></clipPath></defs></svg>'

                                const divIcon = L.divIcon({
                                    className: '',
                                    html: '<div class="flex flex-col items-center"><div class="flex flex-col items-center justify-center ' + colorClass + ' text-white p-2 rounded-lg shadow-md gap-2">' + 
                                                '<div class="flex flex-row items-center gap-2">' +
                                                    wastecontainerIcon + '<div class="text-sm font-bold">' + fillinglevel + '%</div>' +
                                                '</div></div>' +
                                           '<div class="flex items-center">' + tipIcon + '</div></div>',
                                    iconSize: [60, 44],
                                    iconAnchor: [30, 44],
                                    popupAnchor: [0, -50], 
                                    shadowSize: [41, 41]
                                });

                                const marker = L.marker(latlng, { 
                                    icon: divIcon,
                                    zIndexOffset: 0 
                                });

                                marker.on('click', function () {
                                    resetZIndex();
                                    marker.setZIndexOffset(1000);
                                });

                                return marker;
                            } else {
                                return L.marker(latlng, { icon: icon });
                            }
                        },
                        onEachFeature: function(feature, layer) {
                            if (showPopup) {
                                var cv = mapData.CurrentView;
                                var popupContent = null;

                                var tagList = '';
                                if (feature.properties.tags && Array.isArray(feature.properties.tags)) {
                                    tagList = `<div class="flex flex-wrap gap-1">` + feature.properties.tags.map(tag => 
                                        `<span class="dark:bg-primary-surface-dark dark:text-primary-dark px-2 py-1 mr-2 rounded-full text-sm border-gray-30 dark:border-white-30 border-2">
                                            ${tag}
                                        </span>`).join('')+ 
                                        `</div>`; 
                                } else {
                                    tagList = '-';
                                }

                                if (cv === "sensor") {
                                    popupContent = '<div class="flex flex-col items-start gap-6 py-3 text-base"><div class="flex flex-col items-start self-stretch justify-center gap-6"><div class="flex flex-col items-start gap-2">' +
                                    '<span class="px-2.5 py-1 rounded-full justify-start items-center gap-1.5 ' + (feature.properties.status ? 'bg-primary-green-accent' : 'bg-tertiary-surface') + '"><span class="text-sm font-bold font-sans leading-none ' + (feature.properties.status ? 'text-primary-green' : 'text-primary-dark"') + '">' + (feature.properties.status ? feature.properties.text_active : feature.properties.text_inactive) + '</span></span>' +
                                    '<h2 class="font-heading text-xl font-bold first-letter:uppercase">' + feature.properties.name + '</h2></div><div class="flex flex-col items-start gap-2"><div class="flex items-center gap-2">' +
                                    '<div class="font-bold">' + feature.properties.text_deveui + '</div><div class="">' + feature.properties.deveui + '</div></div><div class="flex items-center gap-2">' + 
                                    '<div class="font-bold">' + feature.properties.text_sensortype + '</div><div class="">' + feature.properties.type + '</div></div><div class="flex items-center gap-2">' +
                                    '<div class="font-bold">' + feature.properties.text_batterylevel + '</div><div class="">' + feature.properties.batterylevel + '</div></div><div class="flex items-center gap-2">' +
                                    '<div class="font-bold">' + feature.properties.text_position + '</div><div class="">' + feature.properties.latitude + ', ' + feature.properties.longitude + '</div></div><div class="flex items-center gap-2">' +
                                    '<div class="font-bold">' + feature.properties.text_lastseen + '</div><div class="">' + feature.properties.lastseen + '</div></div></div></div><div class="h-px border-t border-gray-30 w-full"></div>' +		
                                    '<a href="' + feature.properties.url + ' "class="flex justify-center items-center gap-2 rounded-xl cursor-pointer font-bold px-4 py-2 !text-white dark:text-primary-dark bg-primary-surface hover:bg-primary-surface-hover">' + feature.properties.text_moreinformation +
                                    '<div class="w-[20px] h-[20px]"><svg class="stroke-white fill-none h-5 w-5" viewBox="0 0 24 24" stroke-width="2"><path fill-rule="evenodd" d="M4 12a1 1 0 0 1 1-1h14a1 1 0 1 1 0 2H5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M11.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L17.586 12l-6.293-6.293a1 1 0 0 1 0-1.414Z" clip-rule="evenodd"></path></svg></div></a></div>';
                                } else if (cv === "thing" && feature.properties.type.toLowerCase() === "wastecontainer") {
                                    var colourClass = "bg-background-200";

                                    if (feature.properties.fillinglevel >= 70) {
                                        colourClass = "bg-red-600";
                                    } else if (feature.properties.fillinglevel <= 40) {
                                        colourClass = "bg-green-700";
                                    } else {
                                        colourClass = "bg-orange-600";
                                    }
                                        popupContent = '<div class="flex flex-col items-start gap-6 py-3 text-base"><div class="flex flex-col items-start self-stretch justify-center gap-6"><div class="flex flex-col items-start gap-4 text-primary-dark"><div class="flex items-center gap-2">' +
                                        '<div class="font-bold">' + feature.properties.text_id + '</div><div class="">' + feature.properties.id + '</div></div><div class="flex flex-col items-start justify-center gap-2 self-stretch">' +
                                        '<div class="font-bold text-primary-dark">' + feature.properties.text_fillinglevel + '</div><div class="flex w-full items-center gap-2 text-sm"><div class="w-[75%] bg-background-200 rounded-lg">' +
                                        '<div class="' + colourClass + ' rounded-lg" style="width: ' + feature.properties.fillinglevel + '%; height: 6px;"></div></div>' +
                                        '<div class="text-sm text-right w-auto">' + feature.properties.fillinglevel + '%</div></div></div><div class="flex items-start gap-2">' +
                                        '<div class="font-bold">' + feature.properties.text_position + '</div><div class="">' + feature.properties.latitude + ', ' + feature.properties.longitude + '</div></div><div class="flex items-start gap-2">' +
                                        '<div class="font-bold">' + feature.properties.text_tags + '</div>' +
                                        '<div class="">' + tagList + '</div></div></div><div class="h-px border-t border-gray-30 w-full"></div>' +					
                                        '<a href="' + feature.properties.url + '" class="flex justify-center items-center gap-2 rounded-xl cursor-pointer font-bold px-4 py-2 !text-white bg-primary-surface hover:bg-primary-surface-hover">' +
                                        '' + feature.properties.text_moreinformation + '<div class="w-[20px] h-[20px]"><svg class="stroke-white fill-none h-5 w-5" viewBox="0 0 24 24" stroke-width="2"><path fill-rule="evenodd" d="M4 12a1 1 0 0 1 1-1h14a1 1 0 1 1 0 2H5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M11.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L17.586 12l-6.293-6.293a1 1 0 0 1 0-1.414Z" clip-rule="evenodd"></path></svg></div></a></div>';
                                } else if (cv === "thing" && feature.properties.type.toLowerCase() === "passage") {
                                    popupContent = '<div class="flex flex-col items-start gap-6 py-3 text-base"><div class="flex flex-col items-start self-stretch justify-center gap-6"><div class="flex flex-col items-start gap-4 text-primary-dark"><div class="flex items-center gap-2">' +
                                        '<div class="font-bold">' + feature.properties.text_id + '</div><div class="">' + feature.properties.id + '</div></div><div class="flex items-center gap-2"></div><div class="flex items-start gap-2">' +
                                        '<div class="font-bold">' + feature.properties.text_position + '</div><div class="">' + feature.properties.latitude + ', ' + feature.properties.longitude + '</div></div><div class="flex items-start gap-2">' +
                                        '<div class="font-bold">' + feature.properties.text_tags + '</div>' +
                                        '<div class="">' + tagList + '</div></div></div><div class="h-px border-t border-gray-30 w-full"></div>' +					
                                        '<a href="' + feature.properties.url + '" class="flex justify-center items-center gap-2 rounded-xl cursor-pointer font-bold px-4 py-2 !text-white bg-primary-surface hover:bg-primary-surface-hover">' +
                                        '' + feature.properties.text_moreinformation + '<div class="w-[20px] h-[20px]"><svg class="stroke-white fill-none h-5 w-5" viewBox="0 0 24 24" stroke-width="2"><path fill-rule="evenodd" d="M4 12a1 1 0 0 1 1-1h14a1 1 0 1 1 0 2H5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M11.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L17.586 12l-6.293-6.293a1 1 0 0 1 0-1.414Z" clip-rule="evenodd"></path></svg></div></a></div>';
                                } else if (cv === "thing" && feature.properties.type.toLowerCase() === "combinedsewageoverflow") {
                                    popupContent = '<div class="flex flex-col items-start gap-6 py-3 text-base"><div class="flex flex-col items-start self-stretch justify-center gap-6"><div class="flex flex-col items-start gap-4 text-primary-dark"><div class="flex items-center gap-2">' +
                                        '<div class="font-bold">' + feature.properties.text_id + '</div><div class="">' + feature.properties.id + '</div></div><div class="flex items-center gap-2">' +
                                        '<div class="font-bold">' + feature.properties.text_overflow + '</div><div class="">' + feature.properties.state + '</div></div><div class="flex items-start gap-2">' +
                                        '<div class="font-bold">' + feature.properties.text_position + '</div><div class="">' + feature.properties.latitude + ', ' + feature.properties.longitude + '</div></div><div class="flex items-start gap-2">' +
                                        '<div class="font-bold">' + feature.properties.text_tags + '</div>' +
                                        '<div class="">' + tagList + '</div></div></div><div class="h-px border-t border-gray-30 w-full"></div>' +					
                                        '<a href="' + feature.properties.url + '" class="flex justify-center items-center gap-2 rounded-xl cursor-pointer font-bold px-4 py-2 !text-white bg-primary-surface hover:bg-primary-surface-hover">' +
                                        '' + feature.properties.text_moreinformation + '<div class="w-[20px] h-[20px]"><svg class="stroke-white fill-none h-5 w-5" viewBox="0 0 24 24" stroke-width="2"><path fill-rule="evenodd" d="M4 12a1 1 0 0 1 1-1h14a1 1 0 1 1 0 2H5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M11.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L17.586 12l-6.293-6.293a1 1 0 0 1 0-1.414Z" clip-rule="evenodd"></path></svg></div></a></div>';
                                } else {
                                    popupContent = '<div class="flex flex-col items-start gap-6 py-3 text-base"><div class="flex flex-col items-start self-stretch justify-center gap-6"><div class="flex flex-col items-start gap-4 text-primary-dark"><div class="flex items-center gap-2">' +
                                        '<div class="font-bold">' + feature.properties.text_id + '</div><div class="">' + feature.properties.id + '</div></div><div class="flex items-center gap-2">' +
                                        '<div class="font-bold">' + feature.properties.text_information + '</div><div class="text-italic">Saknas</div></div><div class="flex items-start gap-2">' +
                                        '<div class="font-bold">' + feature.properties.text_position + '</div><div class="">' + feature.properties.latitude + ', ' + feature.properties.longitude + '</div></div><div class="flex items-start gap-2">' +
                                        '<div class="font-bold">' + feature.properties.text_tags + '</div>' +
                                        '<div class="">' + tagList + '</div></div></div><div class="h-px border-t border-gray-30 w-full"></div>' +					
                                        '<a href="' + feature.properties.url + '" class="flex justify-center items-center gap-2 rounded-xl cursor-pointer font-bold px-4 py-2 !text-white bg-primary-surface hover:bg-primary-surface-hover">' +
                                        '' + feature.properties.text_moreinformation + '<div class="w-[20px] h-[20px]"><svg class="stroke-white fill-none h-5 w-5" viewBox="0 0 24 24" stroke-width="2"><path fill-rule="evenodd" d="M4 12a1 1 0 0 1 1-1h14a1 1 0 1 1 0 2H5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M11.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L17.586 12l-6.293-6.293a1 1 0 0 1 0-1.414Z" clip-rule="evenodd"></path></svg></div></a></div>';
                                }
                                
                                layer.bindPopup(popupContent);
                            }  
                        }
                    }).addTo(map);

                    function resetZIndex() {
                        map.eachLayer(function(layer) {
                            if (layer instanceof L.Marker) {
                                layer.setZIndexOffset(0); 
                            }
                        });
                    }
                });
            });
        }

        L.control.scale({ maxWidth: 200, metric: true, imperial: false }).addTo(map);

        function getBoundsCoordinates() {
            var bounds = map.getBounds();

            var southwest = bounds.getSouthWest();
            var northeast = bounds.getNorthEast();
        }

        // Kontrollera hörnkoordinater när kartan laddas och vid varje dragning eller zoomning
        map.on('load moveend zoomend', getBoundsCoordinates);

        /*
        document.querySelectorAll('.map-checkbox').forEach(checkbox => {
            checkbox.onchange = function() {
                var layerGroup = layers[this.id.replace('show', '').toLowerCase()];
                if (this.checked) {
                    layerGroup.addTo(map);
                } else {
                    map.removeLayer(layerGroup);
                }
            }
        });
        */

    })()
    </script>
}
