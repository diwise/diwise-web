package ui

import (
	"fmt"
	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
	"slices"
	"strings"
	"time"
)

type PagingViewModel struct {
	PageIndex int
	PageLast  int
	PageSize  int
	Offset    int
	Pages     []int64
	Query     string
}

type ThingsListViewModel struct {
	Things  []ThingViewModel
	Pageing PagingViewModel
}

type MeasurementViewModel struct {
	ID          string    `json:"id"`
	Timestamp   time.Time `json:"timestamp"`
	Urn         string    `json:"urn"`
	BoolValue   *bool     `json:"vb,omitempty"`
	StringValue string    `json:"vs,omitempty"`
	Unit        string    `json:"unit,omitempty"`
	Value       *float64  `json:"v,omitempty"`
}

type ThingViewModel struct {
	ThingID      string
	ID           string
	Type         string
	Latitude     float64
	Longitude    float64
	Tenant       string
	Measurements []MeasurementViewModel
}

templ ThingsTable(l10n locale.Localizer, model ThingsListViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-dark-primary dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("ID") }</th>
				<th class="px-6 py-3">{ l10n.Get("Typ") }</th>
				<th class="px-6 py-3">{ l10n.Get("Status") }</th>
			</tr>
		</thead>
		<tbody>
			@ThingsRows(l10n, model.Things)
		</tbody>
		<tfoot>
			<tr>
				<td colspan="3">
					@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ ThingsRows(l10n locale.Localizer, things []ThingViewModel) {
	for _, thing := range things {
		@ThingRow(l10n, thing)
	}
}

templ ThingRow(l10n locale.Localizer, thing ThingViewModel) {
	<tr
		class="border-b border-divider-gray border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20 hover:cursor-pointer"
		hx-get={ string(templ.SafeURL(fmt.Sprintf("/components/things/details?id=%s", thing.ThingID))) }
		hx-target="#thing-view"
		hx-push-url={ string(templ.SafeURL(fmt.Sprintf("/things/%s", thing.ThingID))) }
		hx-trigger="click"
	>
		<td class="px-6 py-3"><span class="font-bold">{ thing.ID }</span></td>
		<td class="px-6 py-3">{ thing.Type }</td>
		<td class="px-6 py-3">
			@ThingStatusCell(l10n, thing)
		</td>
	</tr>
}

func ThingStatusCell(l10n locale.Localizer, thing ThingViewModel) templ.Component {
	switch strings.ToLower(thing.Type) {
	case "combinedsewageoverflow":
		return CombinedSewageOverflowCell(l10n, thing)
	case "wastecontainer":
		return WasteContainerCell(l10n, thing)
	case "sewer":
		return SewerCell(l10n, thing)
	case "sewagepumpingstation":
		return SewagePumpingstationCell(l10n, thing)
	default:
		return templ.NopComponent
	}
}

func CombinedSewageOverflowCell(l10n locale.Localizer, thing ThingViewModel) templ.Component {
	return templ.NopComponent
}
func SewagePumpingstationCell(l10n locale.Localizer, thing ThingViewModel) templ.Component {
	return templ.NopComponent
}
func SewerCell(l10n locale.Localizer, thing ThingViewModel) templ.Component {
	return templ.NopComponent
}

func WasteContainerCell(l10n locale.Localizer, t ThingViewModel) templ.Component {
	i := slices.IndexFunc(t.Measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3435/2") // Filling level/Actual filling percentage
	})

	if i == -1 {
		return templ.NopComponent
	}

	return ProgressBar(fmt.Sprintf("pb_%s", t.ID), int(*t.Measurements[i].Value))
}

templ ProgressBar(id string, v int) {
	<progress id={ id } max="100" value={ fmt.Sprintf("%d", v) }></progress><span>{ fmt.Sprintf("%d", v) }%</span>
}

templ TableOrMapButtons(l10n locale.Localizer) {
	<div class="w-full h-12 justify-between items-center inline-flex">
		<div class="inline-flex justify-start items-center gap-[34px] dark:text-white"></div>
		<div class="flex items-center self-stretch gap-6">
			<div class="flex p-2 items-center gap-4 bg-tertiary-surface bg-opacity-20 dark:bg-primary-surface-white rounded-2xl gap-2">
				<div class="relative group">
					<button id="tableButton" class="flex p-1.5 rounded-[10px] justify-center items-center gap-1 cursor-pointer bg-black fill-white dark:bg-white dark:fill-black stroke-white dark:stroke-black hover:bg-tertiary-surface-hover"><svg class="w-[18px] h-[18px]"><svg class="fill-none dark:fill-none h-6 w-6" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path fill-rule="evenodd" d="M12 3v18"></path><rect width="18" height="18" x="3" y="3" rx="2"></rect><path d="M3 9h18"></path><path d="M3 15h18"></path></svg></svg></button>
					<div class="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 hidden group-hover:block"><svg class="w-[40px] h-[8px] absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-full"><svg class="w-5 h-5 fill-black dark:fill-white" viewBox="0 0 41 8"><g fill-rule="evenodd" id="Tip" clip-path="url(#clip0_1424_3946)"><rect id="Rectangle 1" x="6.5" y="16" width="20" height="20" transform="rotate(-45 6.5 16)"></rect></g><defs><clipPath id="clip0_1424_3946"><rect width="40" height="8" transform="translate(0.5)"></rect></clipPath></defs></svg></svg><div class="bg-primary-surface text-white dark:bg-white dark:text-black rounded-lg shadow-lg flex py-2 px-4 items-center gap-1.5 text-sm font-bold font-sans leading-[18px]">{ l10n.Get("Tabell") }</div></div>
				</div>
				<div class="relative group">
					<button id="mapButton" class="flex p-1.5 rounded-[10px] justify-center items-center gap-1 cursor-pointer dark:fill-white hover:bg-tertiary-surface-hover"><svg class="w-[18px] h-[18px]"><path fill-rule="evenodd" d="M16.144 1.612a.75.75 0 0 1 .356.638V13.5a.75.75 0 0 1-.415.67l-4.5 2.25a.75.75 0 0 1-.67 0L6.75 14.339l-4.165 2.083A.75.75 0 0 1 1.5 15.75V4.5a.75.75 0 0 1 .415-.67l4.5-2.25a.75.75 0 0 1 .67 0L11.25 3.66l4.165-2.082a.75.75 0 0 1 .73.033ZM3 4.964v9.572l3.415-1.707a.75.75 0 0 1 .67 0l4.165 2.082L15 13.037V3.463L11.585 5.17a.75.75 0 0 1-.67 0L6.75 3.089 3 4.964Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M6.75 1.5a.75.75 0 0 1 .75.75V13.5a.75.75 0 0 1-1.5 0V2.25a.75.75 0 0 1 .75-.75ZM11.25 3.75a.75.75 0 0 1 .75.75v11.25a.75.75 0 0 1-1.5 0V4.5a.75.75 0 0 1 .75-.75Z" clip-rule="evenodd"></path></svg></button>
					<div class="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 hidden group-hover:block"><svg class="w-[40px] h-[8px] absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-full"><svg class="fill-black dark:fill-white w-5 h-5" viewBox="0 0 41 8"><g fill-rule="evenodd" id="Tip" clip-path="url(#clip0_1424_3946)"><rect id="Rectangle 1" x="6.5" y="16" width="20" height="20" transform="rotate(-45 6.5 16)"></rect></g><defs><clipPath id="clip0_1424_3946"><rect width="40" height="8" transform="translate(0.5)"></rect></clipPath></defs></svg></svg><div class="bg-primary-surface text-white dark:bg-white dark:text-black rounded-lg shadow-lg flex py-2 px-4 items-center gap-1.5 text-sm font-bold font-sans leading-[18px]">{ l10n.Get("Karta") }</div></div>
				</div>
			</div>
		</div>
	</div>
}

templ ThingsList(l10n locale.Localizer, model ThingsListViewModel) {
	<div class="flex flex-col items-start gap-14 flex-[1_0_0] py-8 w-full" id="things-view">
		<div class="flex flex-col items-start gap-6 self-stretch w-full px-8">
			<div class="flex items-center w-full justify-between">
				<h1 class="dark:text-white text-2xl font-bold font-heading leading-loose">Saker</h1>
				<div class="flex items-center text-white dark:text-dark-primary font-bold">
					<button class="flex justify-center items-center gap-2 px-4 py-2 bg-primary-surface hover:bg-primary-surface-hover dark:bg-primary-surface-dark dark:hover:bg-primary-surface-dark-hover rounded-xl cursor-pointer" hx-get="/components/things" hx-trigger="click">LÃ¤gg till ny sak</button>
				</div>
			</div>
		</div>
		<div class="h-px border-t border-divider-gray w-full dark:border-divider-white"></div>
		<div class="flex px-8 flex-col items-start self-stretch gap-10">
			@TableOrMapButtons(l10n)
			<div id="tableOrMap" class="w-full flex flex-col gap-6 items-start inline-flex">
				<input class="filter" name="email" type="email"/>
				<div id="things-table" class="w-full">
					@ThingsTable(l10n, model)
				</div>
			</div>
		</div>
	</div>
}

templ Paging(l10n locale.Localizer, p PagingViewModel) {
	<div id="paginering" class="relative w-full h-[60px] px-4 py-3.5 rounded-b-2xl border-white border-opacity-30 justify-between items-center flex">
		<div class="h-8 justify-start items-center gap-2 flex">
			<span class="text-zinc-700 dark:text-neutral-200 text-sm font-normal font-sans leading-[18px]">{ l10n.Get("Rader per sida") }:</span>
			<div class="relative inline-flex h-8 bg-white bg-opacity-50 rounded-xl border border-input-surface border-opacity-50">
				<select
					id="pageSizeSelector"
					class="filter appearance-none outline-none px-3 py-1.5 bg-transparent text-sm font-normal font-sans leading-tight w-full h-full cursor-pointer"
					name="limit"
				>
					<option value="5" selected>5</option>
					<option value="10">10</option>
					<option value="20">20</option>
					<option value="50">50</option>
					<option value="100">100</option>
				</select>
				<div class="absolute inset-y-0 right-0 pr-1 flex items-center pointer-events-none"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-4 h-4 text-zinc-700 dark:text-neutral-200"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg></div>
			</div>
		</div>
		<div class="absolute inset-0 flex justify-center items-center">
			@PageButton(p.PageIndex-1, "/components/tables/saker", p.Query, "#things-table") {
				<span class="w-5 h-5"><svg class="fill-dark-primary dark:fill-zinc-100 w-5 h-5" viewBox="0 0 20 20"><g fill-rule="evenodd" clip-rule="evenodd"><path d="M11.09 3.577a.833.833 0 0 1 0 1.179L5.844 10l5.244 5.244a.833.833 0 0 1-1.178 1.179l-5.834-5.834a.833.833 0 0 1 0-1.178l5.834-5.834a.833.833 0 0 1 1.178 0Z"></path><path d="M3.833 10c0-.46.373-.833.834-.833h11.666a.833.833 0 0 1 0 1.666H4.667A.833.833 0 0 1 3.833 10Z"></path></g></svg></span>
			}
			<span class="h-7 px-3 justify-between items-center flex">
				for _, page := range p.Pages {
					@PageButton(int(page), "/components/tables/saker", p.Query, "#things-table") {
						<div class="w-[40.89px] rounded-lg justify-start items-center gap-0.5 inline-flex py-0.5 ">
							<div class="grow shrink basis-0 text-center text-zinc-500 dark:text-slate-300 text-base font-normal font-sans underline leading-normal">{ fmt.Sprintf("%d", page) }</div>
						</div>
					}
				}
			</span>
			@PageButton(p.PageIndex+1, "/components/tables/saker", p.Query, "#things-table") {
				<span class="w-5 h-5"><svg class="fill-dark-primary dark:fill-zinc-100 w-5 h-5" viewBox="0 0 24 24"><path fill-rule="evenodd" d="M4 12a1 1 0 0 1 1-1h14a1 1 0 1 1 0 2H5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M11.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L17.586 12l-6.293-6.293a1 1 0 0 1 0-1.414Z" clip-rule="evenodd"></path></svg></span>
			}
		</div>
	</div>
}

templ PageButton(pageIndex int, hxGet, query, hxTarget string) {
	<button
		class="flex-col justify-start items-start inline-flex"
		if hxGet != "" {
			if query != "" {
				hx-get={ string(templ.SafeURL(fmt.Sprintf("%s?page=%d&%s", hxGet, pageIndex, query))) }
			} else {
				hx-get={ string(templ.SafeURL(fmt.Sprintf("%s?page=%d", hxGet, pageIndex))) }
			}
		}
		if hxTarget != "" {
			if strings.Contains(hxTarget, "#") {
				hx-target={ hxTarget }
			} else {
				hx-target={ fmt.Sprintf("#%s", hxTarget) }
			}
		}
		hx-trigger="click"
		hx-include=".filter"
	>
		{ children... }
	</button>
}
