package ui

import (
	"fmt"
	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
	"time"
)

type SensorListViewModel struct {
	Sensors    []SensorViewModel
	Statistics StatisticsViewModel
	Pageing    PagingViewModel
}

type SensorViewModel struct {
	Active       bool
	DevEUI       string
	DeviceID     string
	Name         string
	BatteryLevel int
	LastSeen     time.Time
	HasAlerts    bool
}

type StatisticsViewModel struct {
	Total    int
	Active   int
	Inactive int
	Online   int
	Unknown  int
}

templ Statistics(l10n locale.Localizer, model StatisticsViewModel) {
	<div class="flex items-start gap-10 dark:text-white">
		<div class="flex items-start gap-2">{ l10n.Get("Totalt") }<span class="font-bold">{ fmt.Sprintf("%d", model.Total) } </span></div>
		<div class="flex items-start gap-2">{ l10n.Get("Aktiva") }<span class="font-bold">{ fmt.Sprintf("%d", model.Active) }</span></div>
		<div class="flex items-start gap-2">{ l10n.Get("Inaktiva") }<span class="font-bold">{ fmt.Sprintf("%d", model.Inactive) }</span></div>
		<div class="flex items-start gap-2">{ l10n.Get("Oregistrerade") }<span class="font-bold">{ fmt.Sprintf("%d", model.Unknown) }</span></div>
	</div>
}

templ SensorsList(l10n locale.Localizer, model SensorListViewModel) {
	<div class="flex flex-col items-start gap-14 flex-[1_0_0] py-8 w-full" id="sensor-view">
		<div class="flex flex-col items-start gap-6 self-stretch w-full px-8">
			<div class="">
				<h1 class="dark:text-white text-2xl font-bold font-heading leading-loose">Sensorer</h1>
			</div>
			@Statistics(l10n, model.Statistics)
		</div>
		<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
		<div class="flex px-8 flex-col items-start self-stretch gap-10">
			@SensorFilters(l10n)
			<div id="tableOrMap" class="w-full flex flex-col gap-6 items-start inline-flex">
				<div id="sensors-table" class="w-full">
					@SensorsTable(l10n, model)
				</div>
			</div>
			<div id="fragments" style="display: none;">
				<div id="mapview" class="w-full"></div>
			</div>
		</div>
	</div>
}

templ SensorRow(l10n locale.Localizer, sensor SensorViewModel) {
	<tr
		class="border-b border-gray-30 border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20 hover:cursor-pointer"
		hx-get="/components/sensors/details?id=56cf4543-b407-4bc1-81a7-dde5678a4810"
		hx-target="#sensor-view"
		hx-push-url="/sensors/56cf4543-b407-4bc1-81a7-dde5678a4810"
		hx-trigger="click"
		hx-disinherit="hx-target hx-push-url"
	>
		<td class="px-6 py-3"><span class="font-bold">{ sensor.Name }</span></td>
		if sensor.Active {
			<td class="px-6 py-3"><span class="px-2.5 py-1 rounded-full justify-start items-center gap-1.5 bg-primary-green-accent"><span class="text-sm font-bold font-sans leading-none text-primary-green">Aktiv</span></span></td>
		} else {
			<td class="px-6 py-3"><span class="px-2.5 py-1 rounded-full justify-start items-center gap-1.5 bg-primary-green-accent"><span class="text-sm font-bold font-sans leading-none text-primary-green">Inaktiv</span></span></td>
		}
		<td class="px-6 py-3">{ sensor.DevEUI }</td>
		<td class="px-6 py-3">
			if sensor.BatteryLevel >=0 {
				{ fmt.Sprintf("%d%%", sensor.BatteryLevel) }
			} else {
				{  }
			}
		</td>
		<td class="px-6 py-3">
			if sensor.LastSeen.IsZero() {
				{ l10n.Get("-") }
			} else {
				{ sensor.LastSeen.Format("2006-01-02, 15:04") }
			}
		</td>
	</tr>
}

templ SensorsTable(l10n locale.Localizer, model SensorListViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-primary-dark dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("Namn") }</th>
				<th class="px-6 py-3">{ l10n.Get("Status") }</th>
				<th class="px-6 py-3">{ l10n.Get("DevEUI") }</th>
				<th class="px-6 py-3">{ l10n.Get("Batteriniv√•") }</th>
				<th class="px-6 py-3">{ l10n.Get("Senast sedd") }</th>
			</tr>
		</thead>
		<tbody>
			for _, sensor := range model.Sensors {
				@SensorRow(l10n, sensor)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="6">
					@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ SensorFilters(l10n locale.Localizer) {
	<div class="w-full h-12 justify-between items-center inline-flex">
		<div class="inline-flex justify-start items-center gap-[34px] dark:text-white">
			<div class="flex items-center flex-[1_0_0] gap-6">
				@CheckboxList(l10n.Get("Typ")) {
					for _, t := range []string{"axsensor", "elsys","elt_2_hp",  "enviot", "milesight",  "niab-fls","qalcosonic",   "senlabt","sensative","sensefarm","vegapuls_air_41"} {
						@CheckboxOption("type", t, templ.Attributes{
							"hx-get":    string(templ.SafeURL("/components/tables/sensors")),
							"hx-target": "#sensors-table",
						})
					}
				}
			</div>
			<div class="flex items-center flex-[1_0_0] gap-6">
				@CheckboxList("Status") {
					for _, t := range []string{"active", "inactive"} {
						@CheckboxOption("status", t, templ.Attributes{
							"hx-get":    string(templ.SafeURL("/components/tables/sensors")),
							"hx-target": "#sensors-table",
						})
					}
				}
			</div>
		</div>
		<div class="flex items-center self-stretch gap-6">
			<div class="flex p-2 items-center gap-4 bg-tertiary-surface bg-opacity-20 dark:bg-primary-surface-white rounded-2xl gap-2">
				<div class="relative group">
					<button id="tableButton" class="flex p-1.5 rounded-[10px] justify-center items-center gap-1 cursor-pointer bg-black fill-white dark:bg-white dark:fill-black stroke-white dark:stroke-black hover:bg-tertiary-surface-hover"><svg class="w-[18px] h-[18px]"><svg class="fill-none dark:fill-none h-6 w-6" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path fill-rule="evenodd" d="M12 3v18"></path><rect width="18" height="18" x="3" y="3" rx="2"></rect><path d="M3 9h18"></path><path d="M3 15h18"></path></svg></svg></button>
					<div class="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 hidden group-hover:block"><svg class="w-[40px] h-[8px] absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-full"><svg class="w-5 h-5 fill-black dark:fill-white" viewBox="0 0 41 8"><g fill-rule="evenodd" id="Tip" clip-path="url(#clip0_1424_3946)"><rect id="Rectangle 1" x="6.5" y="16" width="20" height="20" transform="rotate(-45 6.5 16)"></rect></g><defs><clipPath id="clip0_1424_3946"><rect width="40" height="8" transform="translate(0.5)"></rect></clipPath></defs></svg></svg><div class="bg-primary-surface text-white dark:bg-white dark:text-black rounded-lg shadow-lg flex py-2 px-4 items-center gap-1.5 text-sm font-bold font-sans leading-[18px]">{ l10n.Get("Tabell") }</div></div>
				</div>
				<div class="relative group">
					<button id="mapButton" class="flex p-1.5 rounded-[10px] justify-center items-center gap-1 cursor-pointer dark:fill-white hover:bg-tertiary-surface-hover"><svg class="w-[18px] h-[18px]"><path fill-rule="evenodd" d="M16.144 1.612a.75.75 0 0 1 .356.638V13.5a.75.75 0 0 1-.415.67l-4.5 2.25a.75.75 0 0 1-.67 0L6.75 14.339l-4.165 2.083A.75.75 0 0 1 1.5 15.75V4.5a.75.75 0 0 1 .415-.67l4.5-2.25a.75.75 0 0 1 .67 0L11.25 3.66l4.165-2.082a.75.75 0 0 1 .73.033ZM3 4.964v9.572l3.415-1.707a.75.75 0 0 1 .67 0l4.165 2.082L15 13.037V3.463L11.585 5.17a.75.75 0 0 1-.67 0L6.75 3.089 3 4.964Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M6.75 1.5a.75.75 0 0 1 .75.75V13.5a.75.75 0 0 1-1.5 0V2.25a.75.75 0 0 1 .75-.75ZM11.25 3.75a.75.75 0 0 1 .75.75v11.25a.75.75 0 0 1-1.5 0V4.5a.75.75 0 0 1 .75-.75Z" clip-rule="evenodd"></path></svg></button>
					<div class="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 hidden group-hover:block"><svg class="w-[40px] h-[8px] absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-full"><svg class="fill-black dark:fill-white w-5 h-5" viewBox="0 0 41 8"><g fill-rule="evenodd" id="Tip" clip-path="url(#clip0_1424_3946)"><rect id="Rectangle 1" x="6.5" y="16" width="20" height="20" transform="rotate(-45 6.5 16)"></rect></g><defs><clipPath id="clip0_1424_3946"><rect width="40" height="8" transform="translate(0.5)"></rect></clipPath></defs></svg></svg><div class="bg-primary-surface text-white dark:bg-white dark:text-black rounded-lg shadow-lg flex py-2 px-4 items-center gap-1.5 text-sm font-bold font-sans leading-[18px]">{ l10n.Get("Karta") }</div></div>
				</div>
			</div>
		</div>
	</div>
}
