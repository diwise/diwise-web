package components

func NewChartConfiguration(chartType string, keepRatio bool, min, max, stepSize *uint) ChartConfiguration {
	cfg := ChartConfiguration{
		Type:    chartType,
		Data:    NewChartData(),
		Options: NewChartOptions(keepRatio, min, max, stepSize),
	}

	if chartType == "bar" {
		borderRadius := 8
		cfg.Options.BarBorderRadius = &borderRadius
	}

	return cfg
}

type ChartConfiguration struct {
	Type    string       `json:"type"`
	Data    ChartData    `json:"data"`
	Options ChartOptions `json:"options"`
}

func NewChartData() ChartData {
	return ChartData{
		Datasets: make([]ChartDataset, 0),
	}
}

type ChartData struct {
	Datasets []ChartDataset `json:"datasets"`
	Labels   []string       `json:"labels,omitempty"`
}

func NewChartDataset(label string) ChartDataset {
	return ChartDataset{
		Label:                label,
		Data:                 make([]ChartValue, 0),
		BorderColor:          "#1F1F25",
		BorderWidth:          2,
		PointBackgroundColor: "#1F1F25",
		PointBorderColor:     "#1F1F25",
		PointRadius:          1,
		PointHoverRadius:     6,
		MaintainAspectRatio:  true,
		Tension:              0.2,
	}
}

type ChartDataset struct {
	Label                string       `json:"label"`
	Data                 []ChartValue `json:"data"`
	BackgroundColor      string       `json:"backgroundColor"`
	BorderColor          string       `json:"borderColor"`
	BorderWidth          int          `json:"borderWidth"`
	PointBackgroundColor string       `json:"pointBackgroundColor"`
	PointBorderColor     string       `json:"pointBorderColor"`
	PointRadius          int          `json:"pointRadius"`
	PointHoverRadius     int          `json:"pointHoverRadius"`
	MaintainAspectRatio  bool         `json:"maintainAspectRatio"`
	Tension              float32      `json:"tension"`
}

func (dataset *ChartDataset) Append(data ChartValue) {
	dataset.Data = append(dataset.Data, data)
}

func (dataset *ChartDataset) Add(x string, y any) {
	data := ChartValue{X: x, Y: y}
	dataset.Append(data)
}

type ChartValue struct {
	X string `json:"x"`
	Y any    `json:"y"`
}

func NewChartOptions(keepRatio bool, min, max, stepSize *uint) ChartOptions {
	t := true
	return ChartOptions{
		BackgroundColor: "#1F1F25",
		BorderColor:     "#1F1F25",
		Scales: ChartOptionsScales{
			X: ChartOptionsScale{
				Ticks: ChartOptionsTicks{
					Color: "#444450",
				},
			},
			Y: ChartOptionsScale{
				Min:         min,
				Max:         max,
				BeginAtZero: &t,
				Ticks: ChartOptionsTicks{
					Color:    "#444450",
					StepSize: stepSize,
				},
			},
		},
		MaintainAspectRatio: &keepRatio,
	}
}

type ChartOptions struct {
	BackgroundColor     string             `json:"backgroundColor,omitempty"`
	BorderColor         string             `json:"borderColor,omitempty"`
	BarBorderRadius     *int               `json:"borderRadius,omitempty"`
	MaintainAspectRatio *bool              `json:"maintainAspectRatio,omitempty"`
	Responsive          *bool              `json:"responsive,omitempty"`
	Scales              ChartOptionsScales `json:"scales"`
	Height              *uint              `json:"height,omitempty"`
	Width               *uint              `json:"width,omitempty"`
}

type ChartOptionsScales struct {
	X ChartOptionsScale `json:"x,omitempty"`
	Y ChartOptionsScale `json:"y,omitempty"`
}

type ChartOptionsScale struct {
	Type         *string                `json:"type,omitempty"`
	Distribution *string                `json:"distribution,omitempty"`
	Position     *string                `json:"position,omitempty"`
	Min          *uint                  `json:"min,omitempty"`
	Max          *uint                  `json:"max,omitempty"`
	BeginAtZero  *bool                  `json:"beginAtZero,omitempty"`
	Ticks        ChartOptionsTicks      `json:"ticks"`
	Time         *ChartOptionsScaleTime `json:"time,omitempty"`
}

type ChartOptionsTicks struct {
	StepSize *uint  `json:"stepSize,omitempty"`
	Color    string `json:"color"`
}

type ChartOptionsScaleTime struct {
	Unit          *string                             `json:"unit,omitempty"`
	TooltipFormat *string                             `json:"tooltipFormat,omitempty"`
	Parser        *string                             `json:"parser,omitempty"`
	DisplayFormat *ChartOptionsScaleTimeDisplayFormat `json:"displayFormats,omitempty"`
}

type ChartOptionsScaleTimeDisplayFormat struct {
	Hour *string `json:"hour"`
	Day  *string `json:"day"`
}

func (cfg *ChartConfiguration) Add(datasets ...ChartDataset) {
	cfg.Data.Datasets = append(cfg.Data.Datasets, datasets...)
}
func (cfg *ChartConfiguration) SetResponsive(vb bool) {
	cfg.Options.Responsive = &vb
}
func (cfg *ChartConfiguration) SetMaintainAspectRatio(vb bool) {
	cfg.Options.MaintainAspectRatio = &vb
}
func (cfg *ChartConfiguration) SetColor(vb string) {
	cfg.Options.BackgroundColor = vb
	cfg.Options.BorderColor = vb
}
func (cfg *ChartConfiguration) Timeseries(vb bool) {
	if vb {
		t := "time"
		dist := "linear"
		unit := "hour"
		format := "HH:mm"
		tooltipFormat := "yyyy-MM-dd HH:mm"
		//displayFormat := "YYYY-MM-DD"

		cfg.Options.Scales.X.Type = &t
		cfg.Options.Scales.X.Distribution = &dist
		cfg.Options.Scales.X.Time = &ChartOptionsScaleTime{
			Unit:          &unit,
			TooltipFormat: &tooltipFormat,
			DisplayFormat: &ChartOptionsScaleTimeDisplayFormat{
				Hour: &format,
			},
		}

		return
	}

	cfg.Options.Scales.X.Type = nil
	cfg.Options.Scales.X.Distribution = nil
	cfg.Options.Scales.X.Time = nil
}

var chartHandle = templ.NewOnceHandle()

templ Chart(id, className string, cfg ChartConfiguration) {
	<div id="chart-data" data-chart-id={ templ.JSONString(id) } data-chart-cfg={ templ.JSONString(cfg) } style="display:none;"></div>
	@chartHandle.Once() {
		<script>
			(() => {			
				const c = document.getElementById('chart-data');
				const chartID = JSON.parse(c.getAttribute('data-chart-id'));	
				window.chartConfig = JSON.parse(c.getAttribute('data-chart-cfg'));			
									
				try {
					var existing_chart = Chart.getChart(chartID);
					existing_chart.destroy();							
				} catch(e) {				
				}

				const ctx = document.getElementById(chartID);
				window.myChart = new Chart(ctx, window.chartConfig);

				const isDarkMode = localStorage.theme === 'dark' || 
					(!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches);

				updateChartForTheme(isDarkMode);
			})();

			function updateChartForTheme(isDarkMode) {
				
				if (!window.myChart) {
					return;
				}
				
				const chartColors = isDarkMode ? {
					backgroundColor: 'rgba(255, 255, 255, 255)',  // Dark mode bakgrundsfärg
					borderColor: 'rgba(255, 255, 255, 255)',       // Dark mode kantfärg
					pointBackgroundColor: 'rgba(255, 255, 255, 1)', // Dark mode point-färg (vit)
					pointBorderColor: 'rgba(255, 255, 255, 1)',
					ticksColor: 'rgba(255, 255, 255, 1)',
					gridColor: 'rgba(255, 255, 255, 0.3)',
				} : {
					backgroundColor: window.chartConfig.options.backgroundColor,  // Light mode bakgrundsfärg
					borderColor: window.chartConfig.options.borderColor,        // Light mode kantfärg
					pointBackgroundColor: 'rgba(31, 31, 37, 1)',
					pointBorderColor: 'rgba(31, 31, 37, 1)',
					ticksColor: 'rgba(31, 31, 37, 1)',
					gridColor: 'rgba(229, 229, 229, 1)',
				};

				// Kontrollera om myChart är initierad och uppdatera färgerna
				if (window.myChart) {
					const datasets = window.myChart.data.datasets[0];
					datasets.backgroundColor = chartColors.backgroundColor;
					datasets.borderColor = chartColors.borderColor;
					datasets.pointBackgroundColor = chartColors.pointBackgroundColor;
					datasets.pointBorderColor = chartColors.pointBorderColor;
					
					window.myChart.options.scales.x.ticks.color = chartColors.ticksColor;
					window.myChart.options.scales.y.ticks.color = chartColors.ticksColor;

					window.myChart.options.scales.x.grid.color = chartColors.gridColor;
					window.myChart.options.scales.y.grid.color = chartColors.gridColor;
					
					window.myChart.update();
				}
			}
		</script>
	}
}
