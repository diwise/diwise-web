package components

func NewChartConfiguration(chartType string) ChartConfiguration {
	cfg := ChartConfiguration{}
	cfg.Type = chartType
	cfg.Data = NewChartData()
	cfg.Options = NewChartOptions()
	return cfg
}

type ChartConfiguration struct {
	Type    string       `json:"type"`
	Data    ChartData    `json:"data"`
	Options ChartOptions `json:"options"`
}

func NewChartData() ChartData {
	return ChartData{
		Datasets: make([]ChartDataset, 0),
	}
}

type ChartData struct {
	Datasets []ChartDataset `json:"datasets"`
	Labels   []string       `json:"labels,omitempty"`
}

func NewChartDataset(label string) ChartDataset {
	return ChartDataset{
		Label:                label,
		Data:                 make([]ChartValue, 0),
		BorderColor:          "#1F1F25",
		BorderWidth:          2,
		PointBackgroundColor: "#1F1F25",
		PointBorderColor:     "#1F1F25",
	}
}

type ChartDataset struct {
	Label                string       `json:"label"`
	Data                 []ChartValue `json:"data"`
	BorderColor          string       `json:"borderColor"`
	BorderWidth          int          `json:"borderWidth"`
	PointBackgroundColor string       `json:"pointBackgroundColor"`
	PointBorderColor     string       `json:"pointBorderColor"`
}

func (dataset *ChartDataset) Append(data ChartValue) {
	dataset.Data = append(dataset.Data, data)
}

func (dataset *ChartDataset) Add(x string, y any) {
	data := ChartValue{X: x, Y: y}
	dataset.Append(data)
}

type ChartValue struct {
	X string `json:"x"`
	Y any    `json:"y"`
}

func NewChartOptions() ChartOptions {
	t := true
	return ChartOptions{
		Scales: ChartOptionsScales{
			X: ChartOptionsScale{
				Ticks: ChartOptionsTicks{
					Color: "#444450",
				},
			},
			Y: ChartOptionsScale{
				BeginAtZero: &t,
				Ticks: ChartOptionsTicks{
					Color: "#444450",
				},
			},
		},
	}
}

type ChartOptions struct {
	MaintainAspectRatio *bool              `json:"maintainAspectRatio,omitempty"`
	Responsive          *bool              `json:"responsive,omitempty"`
	Scales              ChartOptionsScales `json:"scales"`
	Height              *uint              `json:"height,omitempty"`
	Width               *uint              `json:"width,omitempty"`
}

type ChartOptionsScales struct {
	X ChartOptionsScale `json:"x,omitempty"`
	Y ChartOptionsScale `json:"y,omitempty"`
}

type ChartOptionsScale struct {
	Type         *string                `json:"type,omitempty"`
	Distribution *string                `json:"distribution,omitempty"`
	Position     *string                `json:"position,omitempty"`
	Min          *uint                  `json:"min,omitempty"`
	Max          *uint                  `json:"max,omitempty"`
	BeginAtZero  *bool                  `json:"beginAtZero,omitempty"`
	Ticks        ChartOptionsTicks      `json:"ticks"`
	Time         *ChartOptionsScaleTime `json:"time,omitempty"`
}

type ChartOptionsTicks struct {
	StepSize *uint  `json:"stepSize,omitempty"`
	Color    string `json:"color"`
}

type ChartOptionsScaleTime struct {
	Unit          *string                             `json:"unit,omitempty"`
	TooltipFormat *string                             `json:"tooltipFormat,omitempty"`
	Parser        *string                             `json:"parser,omitempty"`
	DisplayFormat *ChartOptionsScaleTimeDisplayFormat `json:"displayFormats,omitempty"`
}

type ChartOptionsScaleTimeDisplayFormat struct {
	Hour *string `json:"hour"`
}

func (cfg *ChartConfiguration) Add(datasets ...ChartDataset) {
	cfg.Data.Datasets = append(cfg.Data.Datasets, datasets...)
}
func (cfg *ChartConfiguration) SetResponsive(vb bool) {
	cfg.Options.Responsive = &vb
}
func (cfg *ChartConfiguration) SetMaintainAspectRatio(vb bool) {
	cfg.Options.MaintainAspectRatio = &vb
}
func (cfg *ChartConfiguration) Timeseries(vb bool) {
	if vb {
		t := "time"
		dist := "linear"
		unit := "hour"
		format := "HH:mm"

		cfg.Options.Scales.X.Type = &t
		cfg.Options.Scales.X.Distribution = &dist
		cfg.Options.Scales.X.Time = &ChartOptionsScaleTime{
			Unit:          &unit,
			TooltipFormat: &format,
			DisplayFormat: &ChartOptionsScaleTimeDisplayFormat{
				Hour: &format,
			},
		}

		return
	}

	cfg.Options.Scales.X.Type = nil
	cfg.Options.Scales.X.Distribution = nil
	cfg.Options.Scales.X.Time = nil
}

var chartHandle = templ.NewOnceHandle()

templ Chart(id, className string, cfg ChartConfiguration) {
	<div id="chart-data" data-chart-id={ templ.JSONString(id) } data-chart-cfg={ templ.JSONString(cfg) } style="display:none;"></div>
	@chartHandle.Once() {
		<script>
		(() => {			
			const c = document.getElementById('chart-data');
			const chartID = JSON.parse(c.getAttribute('data-chart-id'));	
        	const cfg = JSON.parse(c.getAttribute('data-chart-cfg'));			
								
			try {
				var existing_chart = Chart.getChart(chartID)
				existing_chart.destroy();				
			} catch(e) {				
			}

			const ctx = document.getElementById(chartID);

			new Chart(ctx, cfg);
		})()
	</script>
	}
}
