package components

func NewChartDataset(label string) ChartDataset {
	return ChartDataset{
		Label:                label,
		Data:                 make([]ChartData, 0),
		BorderColor:          "#B92424",
		BorderWidth:          1,
		PointBackgroundColor: "#B92424",
		PointBorderColor:     "#B92424",
	}
}

type ChartDataset struct {
	Label                string      `json:"label"`
	Data                 []ChartData `json:"data"`
	BorderColor          string      `json:"borderColor"`
	BorderWidth          int         `json:"borderWidth"`
	PointBackgroundColor string      `json:"pointBackgroundColor"`
	PointBorderColor     string      `json:"pointBorderColor"`
}

func (dataset *ChartDataset) Append(data ChartData) {
	dataset.Data = append(dataset.Data, data)
}

func (dataset *ChartDataset) Add(x string, y any) {
	data := ChartData{X: x, Y: y}
	dataset.Append(data)
}

type ChartData struct {
	X string `json:"x"`
	Y any    `json:"y"`
}

func NewChartOptions() ChartOptions {
	t := true
	return ChartOptions{
		Scales: ChartOptionsScales{
			X: ChartOptionsScale{
				Ticks: ChartOptionsTicks{
					Color: "#444450",
				},
			},
			Y: ChartOptionsScale{
				BeginAtZero: &t,
				Ticks: ChartOptionsTicks{
					Color: "#444450",
				},
			},
		},
	}
}

type ChartOptions struct {
	MaintainAspectRatio *bool              `json:"maintainAspectRatio,omitempty"`
	Responsive          *bool              `json:"responsive,omitempty"`
	Scales              ChartOptionsScales `json:"scales"`
	Height              *uint              `json:"height,omitempty"`
	Width               *uint              `json:"width,omitempty"`
}

func (options *ChartOptions) SetResponsive(vb bool) {
	options.Responsive = &vb
}
func (options *ChartOptions) SetMaintainAspectRatio(vb bool) {
	options.MaintainAspectRatio = &vb
}

type ChartOptionsScales struct {
	X ChartOptionsScale `json:"x,omitempty"`
	Y ChartOptionsScale `json:"y,omitempty"`
}

type ChartOptionsScale struct {
	Type        *string           `json:"type,omitempty"`
	Position    *string           `json:"position,omitempty"`
	Min         *uint             `json:"min,omitempty"`
	Max         *uint             `json:"max,omitempty"`
	BeginAtZero *bool             `json:"beginAtZero,omitempty"`
	Ticks       ChartOptionsTicks `json:"ticks"`
}

type ChartOptionsTicks struct {
	StepSize *uint  `json:"stepSize,omitempty"`
	Color    string `json:"color"`
}

var chartHandle = templ.NewOnceHandle()

templ Chart(id, className string, chartType string, options ChartOptions, dataset []ChartDataset) {
	<div id="chart-data" data-chart-id={ templ.JSONString(id) } data-chart-type={ templ.JSONString(chartType) } data-chart-options={ templ.JSONString(options) } data-chart={ templ.JSONString(dataset) } style="display:none;"></div>
	@chartHandle.Once() {
		<script>
		(() => {
			const c = document.getElementById('chart-data');
        	const dataset = JSON.parse(c.getAttribute('data-chart'));
			const chartType = JSON.parse(c.getAttribute('data-chart-type'));
			const chartID = JSON.parse(c.getAttribute('data-chart-id'));
			const options = JSON.parse(c.getAttribute('data-chart-options'));			

			try {
				var existing_chart = Chart.getChart(chartID)
				existing_chart.destroy();				
			} catch(e) {				
			}

			const ctx = document.getElementById(chartID);

			new Chart(ctx, {
				type: chartType,
				data: {		
					datasets: dataset
				},
				options: options
			});
		})()
	</script>
	}
}
