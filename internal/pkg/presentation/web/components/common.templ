package components

import (
	"fmt"
	"strings"
)

type OptionViewModel struct {
	Value    string
	Text     string
	Name     string
	Selected bool
	Hidden   bool
	Disabled bool
}

type buttonCfg struct {
	btnType    	templ.Attributes
	classes 	map[string][]string
	hxUrl 		templ.Attributes
	method 		templ.Attributes
	name		templ.Attributes
	style		string
	target		templ.Attributes
}

type ButtonStyle string

const (
	Primary	ButtonStyle = "primary"
	Secondary ButtonStyle = "secondary"
	Tertiary ButtonStyle = "tertiary"
	Error ButtonStyle = "error"
)

templ Div(id string, contents ...templ.Component) {
	<div id={ id }>
		for _,c := range contents {
			@c
		}
	</div>
}

templ Canvas(id string) {
	<canvas id={ id }></canvas>
}

func (cfg *buttonCfg) Method() templ.Attributes {
	return cfg.method 
}

func Method(attrs templ.Attributes) func(*buttonCfg) {
	return func(cfg *buttonCfg) {
		cfg.method = attrs
	}
}

func (cfg *buttonCfg) Name() templ.Attributes {
	return cfg.name 
}

func Name(name string) func(*buttonCfg) {
	attrs := templ.Attributes{"name": name}
	return func(cfg *buttonCfg) {
		cfg.name = attrs
	}
}

func (cfg *buttonCfg) BtnType() templ.Attributes {
	return cfg.btnType 
}

func BtnType(btnType string) func(*buttonCfg) {
	attrs := templ.Attributes{"type": btnType}
	return func(cfg *buttonCfg) {
		cfg.btnType = attrs
	}
}

func (cfg *buttonCfg) HxUrl() templ.Attributes {
	return cfg.hxUrl 
}

func HxUrl(method, url string) func(*buttonCfg) {
	attrs := templ.Attributes{"hx-" + method: url}
	return func(cfg *buttonCfg){
			cfg.hxUrl = attrs
	}
}

func (cfg *buttonCfg) Target() templ.Attributes {
	return cfg.name 
}

func Target(target string) func(*buttonCfg) {
	attrs := templ.Attributes{"hx-target": target}
	return func(cfg *buttonCfg) {
		cfg.name = attrs
	}
}
	
func (cfg *buttonCfg) Classes() string {
	classNames := make([]string, 0, 6)

	for _, v := range cfg.classes {
		classNames = append(classNames, v...)
	}

	return strings.Join(classNames, " ")
}

func newButtonCfg(fn ...func(*buttonCfg)) *buttonCfg {
	cfg := &buttonCfg{
		classes: map[string][]string{
			"border": 	{"border-2", "border-divider-gray"},
			"rounded": 	{"rounded-xl"},
			"p": 		{"px-4", "py-2"},
			"flex": 	{"flex"},
			"justify": 	{"justify-center"},
			"items": 	{"items-center"},
			"gap":		{"gap-2"}, 
		},
	}

	for _, f := range fn {
		f(cfg)
	}

	return cfg
}

func SwitchBtnStyle(style ButtonStyle, config ...func(*buttonCfg)) string {
	var classes = "flex justify-center items-center gap-2 rounded-xl cursor-pointer font-bold %s"
	
	switch style {
		case Primary:
			classes = fmt.Sprintf(classes, "px-4 py-2 text-white dark:text-dark-primary bg-primary-surface hover:bg-primary-surface-hover dark:bg-primary-surface-dark dark:hover:bg-primary-surface-dark-hover dark:stroke-dark-primary")
			break
		case Secondary:
			classes = fmt.Sprintf(classes, "px-3.5 py-2 border-divider-gray border-2 dark:border-divider-white hover:dark:border-secondary-outline-hover-dark hover:border-secondary-outline-hover text-dark-secondary dark:text-secondary")
			break
		case Tertiary:
			classes = fmt.Sprintf(classes, "px-4 py-2 bg-tertiary-surface hover:bg-tertiary-surface-hover dark:bg-primary-surface-white dark:hover:bg-divider-white text-dark-primary dark:text-white")
			break
		case Error:
			classes = fmt.Sprintf(classes, "px-4 py-2 group bg-err-prim-surf hover:bg-err-prim-surf-hover text-secondary-text hover:text-dark-primary ")
			break
		default:
			classes = newButtonCfg(config...).Classes()
	}
	return classes
}

func SwitchBtnIcon(icon string, style ButtonStyle) templ.Component {
	switch style {
		case Primary:
			return SVG(icon, Size(20), NoFill(), Box(24, 24), StrokeColor("white", "dark-primary"), Stroke(templ.Attributes{"stroke-width": "2"}))
		case Secondary:
			return SVG(icon, Size(20), NoFill(), Box(24, 24), StrokeColor("dark-primary", "white"), Stroke(templ.Attributes{"stroke-width": "2"}))
		case Tertiary:
			return SVG(icon, Box(24, 24), NoFill(), StrokeColor("black", "white"), Stroke(templ.Attributes{"stroke-width": "1"}))
		case Error:
			return SVG(icon, Size(20), NoFill(), Box(24, 24), StrokeColor("secondary-text", "secondary-text"), HoverStroke(), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
		default:
			return SVG(icon, Size(20), NoFill(), Box(24, 24), StrokeColor("default-color", "gray"), Stroke(templ.Attributes{"stroke-width": "2"}))	}
}

templ Button(style ButtonStyle, title, icon string, config ...func(*buttonCfg)) {
	
	<button 
	class={ SwitchBtnStyle(style), config } 
	{ newButtonCfg(config...).Name()... } 
	{ newButtonCfg(config...).BtnType()... }
	{ newButtonCfg(config...).Method()... } 
	{ newButtonCfg(config...).HxUrl()... } 
	{ newButtonCfg(config...).Target()... } >
		if icon != ""{
			<div class="w-[20px] h-[20px]">
				@SwitchBtnIcon(icon, style)
			</div>	
		}
		{ title }	   
	</button>
}

templ Option(option OptionViewModel) {
	<option value={ option.Value } selected?={ option.Selected } hidden?={ option.Hidden } disabled?={ option.Disabled }>{ option.Text }</option>
}

templ Options(options []OptionViewModel) {
	for _, option := range options {
		@Option(option)
	}
}

templ Select(id string, multiple bool, hxGet, hxTarget string, options []OptionViewModel) {
	<div class="relative inline-block w-full">
		<select
			id={ id }
			name={ id }
			if hxGet != "" {
				hx-get={ hxGet }
			}
			if hxTarget != "" {
				hx-target={ hxTarget }
			}
			class="appearance-none cursor-pointer block w-full pl-3 pr-10 py-2 text-base dark:border dark:border-input-outline dark:bg-darkmode-input-surface dark:text-secondary focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-xl bg-white"
			multiple?={ multiple }
		>
			@Options(options)
		</select>
		<div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
			<svg class="w-[18px] h-[18px] dark:fill-white">
				@templ.Raw(iconSVG("chevron-down"))
			</svg>
		</div>
	</div>
}

templ OptionCheckbox(option OptionViewModel) {
	<label for={ option.Value } class="flex items-center justify-between w-full cursor-pointer mb-2 gap-3 pr-2">
		<span class="ml-2 text-gray-700 dark:text-black">{ option.Text }</span>
		<div class="flex items-center">
			<input
				type="checkbox"
				id={ option.Value }
				name={ option.Name }
				value={ option.Value }
				checked?={ option.Selected }
				disabled?={ option.Disabled }
				class="sr-only peer form-checkbox cursor-pointer"
			/>
			<div class="w-[20px] h-[20px] bg-white rounded border border-gray-400 peer-checked:bg-black peer-checked:border-black flex justify-center items-center">
				<svg class="w-full h-full fill-none stroke-white stroke-2 opacity-100 peer-checked:opacity-0 transition-opacity" viewBox="0 0 24 24">
					@templ.Raw(iconSVG("check"))
				</svg>
			</div>
		</div>
	</label>
}

templ OptionCheckboxes(options []OptionViewModel) {
	for _, option := range options {
		@OptionCheckbox(option)
	}
}

templ CheckboxDropdownList(id string, options []OptionViewModel, buttonText string) {
	<div class="flex">
		<div
			x-data="{
				open: false,
				toggle() {
					if (this.open) {
						return this.close()
					}
	
					this.$refs.button.focus()
	
					this.open = true
				},
				close(focusAfter) {
					if (! this.open) return
	
					this.open = false
	
					focusAfter && focusAfter.focus()
				}
			}"
			x-on:keydown.escape.prevent.stop="close($refs.button)"
			x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
			x-id="['dropdown-button']"
			class="relative w-full"
		>
			<button
				for={ id }
				x-ref="button"
				x-on:click="toggle()"
				:aria-expanded="open"
				:aria-controls="$id('dropdown-button')"
				type="button"
				class="flex items-center justify-between w-full block font-medium"
			>
				{ buttonText }
				<svg class="w-[18px] h-[18px] dark:fill-white">
					@templ.Raw(iconSVG("chevron-down"))
				</svg>
			</button>
			<div
				x-ref="panel"
				x-show="open"
				x-transition.origin.top.left
				x-on:click.outside="close($refs.button)"
				:id="$id('dropdown-button')"
				style="display: none;"
				class="absolute left-0 mt-3 py-2 rounded-md bg-white shadow-md"
			>
				<div id={ id } class="flex flex-col w-full">
					@OptionCheckboxes(options)
				</div>
			</div>
		</div>
	</div>
	/*<details class="dropdown">
		<summary for={ id } class="dropdown-label block text-sm font-medium text-gray-700">VÃ¤lj</summary>
		<div id={ id } class="dropdown-content px-2 pt-2 bg-white">
			@OptionCheckboxes(options)
		</div>
	</details>*/
}
