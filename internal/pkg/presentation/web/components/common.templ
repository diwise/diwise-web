package components

import (
	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
)

type OptionViewModel struct {
	Value    string
	Text     string
	Name     string
	Selected bool
	Hidden   bool
	Disabled bool
}

templ PrimaryButton(title string) {
	<div class="w-[200px] h-10 pl-[18px] pr-4 py-2 bg-amber-700 rounded-xl justify-center items-center gap-2 inline-flex dark:bg-gray-800 dark:border-zinc-600 dark:border-2 cursor-pointer">
		<div class="flex items-center gap-2">
			<div class="text-white text-base font-bold font-sans leading-normal">
				{ title }
			</div>
			<div class="w-[18px] h-[18px] flex items-center">
				<svg class="w-[18px] h-[18px] stroke-white fill-white">
					@templ.Raw(iconSVG("chevron-down"))
				</svg>
			</div>
		</div>
	</div>
}

templ SecondaryButton(title string) {
	<div class="w-28 h-10 pl-4 pr-[18px] py-2 rounded-xl border-2 border-divider-gray border-opacity-30 bg-white bg-opacity-20 dark:bg-gray-800 justify-center items-center gap-2 inline-flex dark:border-zinc-600">
		<svg class="w-[18px] h-[18px] dark:fill-zinc-600">
			@templ.Raw(iconSVG("filter"))
		</svg>
		<div class="text-dark-secondary text-base font-bold font-sans leading-normal dark:text-white">
			{ title }
		</div>
	</div>

	//Styling SecondaryButton
	/*<button
		class="w-auto h-10 pl-[18px] pr-4 py-2 bg-primary-surface bg-opacity-95 dark:bg-[white] rounded-xl flex items-center gap-2 cursor-pointer"
		hx-get={ string(templ.URL(fmt.Sprintf("/components/sensors/details?id=%s&mode=edit", sensor.DeviceID))) }
		hx-target="#sensor-view"
		hx-trigger="click"
	>
		<div class="w-[20px] h-[20px] dark:stroke-dark-primary">
			@SVG("pen", Box(24, 24), NoFill(), StrokeColor("white", "dark-primary"), Stroke(templ.Attributes{"stroke-width": "1"}))
		</div>
		{ l10n.Get("edit") }
	</button>*/
}

templ TertiaryButton(title, icon, target string, hxget templ.SafeURL, l10n locale.Localizer) {
	<div class="flex items-center text-white dark:text-dark-primary font-bold">
		<button
			class="flex justify-center items-center gap-2 px-4 py-2 bg-tertiary-surface hover:bg-tertiary-surface-hover dark:bg-primary-surface-white dark:hover:bg-divider-white text-dark-primary dark:text-white rounded-xl cursor-pointer"
			hx-get={ string(hxget) }
			if target != "" {
				hx-target={ "#" + target }
			}
			hx-trigger="click"
		>
			if icon != "" {
				<div class="w-[20px] h-[20px] dark:stroke-dark-primary">
					@SVG(icon, Box(24, 24), NoFill(), StrokeColor("black", "white"), Stroke(templ.Attributes{"stroke-width": "1"}))
				</div>
			}
			{ l10n.Get( title ) }
		</button>
	</div>
}

templ Option(option OptionViewModel) {
	<option value={ option.Value } selected?={ option.Selected } hidden?={ option.Hidden } disabled?={ option.Disabled }>{ option.Text }</option>
}

templ Options(options []OptionViewModel) {
	for _, option := range options {
		@Option(option)
	}
}

templ Select(id string, multiple bool, hxGet, hxTarget string, options []OptionViewModel) {
	<div class="relative inline-block w-full">
		<select
			id={ id }
			name={ id }
			if hxGet != "" {
				hx-get={ hxGet }
			}
			if hxTarget != "" {
				hx-target={ hxTarget }
			}
			class="appearance-none cursor-pointer block w-full pl-3 pr-3 py-2 text-base dark:border dark:border-input-outline dark:bg-darkmode-input-surface dark:text-secondary focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-xl bg-white"
			multiple?={ multiple }
		>
			@Options(options)
		</select>
		<div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
			<svg class="w-[18px] h-[18px] dark:fill-white">
				@templ.Raw(iconSVG("chevron-down"))
			</svg>
		</div>
	</div>

}


templ OptionCheckbox(option OptionViewModel) {
	<label for={ option.Value } class="flex items-center justify-between w-full cursor-pointer mb-2 gap-3 pr-2">
		<span class="ml-2 text-gray-700 dark:text-black">{ option.Text }</span>
		<div class="flex items-center">
			<input
				type="checkbox"
				id={ option.Value }
				name={ option.Name }
				value={ option.Value }
				checked?={ option.Selected }
				disabled?={ option.Disabled }
				class="sr-only peer form-checkbox cursor-pointer"
			/>
			<div class="w-[20px] h-[20px] bg-white rounded border border-gray-400 peer-checked:bg-black peer-checked:border-black flex justify-center items-center">
				<svg class="w-full h-full fill-none stroke-white stroke-2 opacity-100 peer-checked:opacity-0 transition-opacity" viewBox="0 0 24 24">
					@templ.Raw(iconSVG("check"))
				</svg>
			</div>
		</div>
	</label>
}

templ OptionCheckboxes(options []OptionViewModel) {
	for _, option := range options {
		@OptionCheckbox(option)
	}
}

templ CheckboxDropdownList(id string, options []OptionViewModel, buttonText string) {
	<div class="flex">
		<div
			x-data="{
				open: false,
				toggle() {
					if (this.open) {
						return this.close()
					}
	
					this.$refs.button.focus()
	
					this.open = true
				},
				close(focusAfter) {
					if (! this.open) return
	
					this.open = false
	
					focusAfter && focusAfter.focus()
				}
			}"
			x-on:keydown.escape.prevent.stop="close($refs.button)"
			x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
			x-id="['dropdown-button']"
			class="relative w-full"
		>
			
			<button 
				for={ id }
				x-ref="button"
				x-on:click="toggle()"
				:aria-expanded="open"
				:aria-controls="$id('dropdown-button')"
				type="button"
				class="flex items-center justify-between w-full block font-medium"
			>
				{ buttonText }
				
				<svg class="w-[18px] h-[18px] dark:fill-white">
					@templ.Raw(iconSVG("chevron-down"))
				</svg>
			</button>
	
			<div
				x-ref="panel"
				x-show="open"
				x-transition.origin.top.left
				x-on:click.outside="close($refs.button)"
				:id="$id('dropdown-button')"
				style="display: none;"
				class="absolute left-0 mt-3 py-2 rounded-md bg-white shadow-md"
			>
				<div id={ id } class="flex flex-col w-full">
					@OptionCheckboxes(options)
				</div>
			</div>
		</div>
	</div>
	
	/*<details class="dropdown">
		<summary for={ id } class="dropdown-label block text-sm font-medium text-gray-700">VÃ¤lj</summary>
		<div id={ id } class="dropdown-content px-2 pt-2 bg-white">
			@OptionCheckboxes(options)
		</div>
	</details>*/
}
