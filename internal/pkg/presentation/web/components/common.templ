package components

type OptionViewModel struct {
	Value    string
	Text     string
	Name     string
	Selected bool
	Hidden   bool
	Disabled bool
}


templ Option(option OptionViewModel) {
	<option value={ option.Value } selected?={ option.Selected } hidden?={ option.Hidden } disabled?={ option.Disabled }>{ option.Text }</option>
}

templ Options(options []OptionViewModel) {
	for _, option := range options {
		@Option(option)
	}
}

templ Select(id string, multiple bool, hxGet, hxTarget string, options []OptionViewModel) {
	<select
		id={ id }
		name={ id }
		if hxGet != "" {
			hx-get={ hxGet }
		}
		if hxTarget != "" {
			hx-target={ hxTarget }
		}
		class="cursor-pointer block w-full pl-3 pr-3 py-2 text-base dark:border dark:border-[#FFFFFF80] dark:bg-[#1C1C2880] focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-xl bg-white"
		multiple?={ multiple }
	>
		@Options(options)
	</select>
}


templ OptionCheckbox(option OptionViewModel) {
	<label for={ option.Value } class="flex items-center justify-between w-full cursor-pointer mb-2 gap-3">
		<span class="ml-2 text-gray-700 dark:text-gray-300">{ option.Text }</span>
		<div class="flex items-center">
			<input
				type="checkbox"
				id={ option.Value }
				name={ option.Name }
				value={ option.Value }
				checked?={ option.Selected }
				disabled?={ option.Disabled }
				class="sr-only peer form-checkbox cursor-pointer"
			/>
			<div class="w-[20px] h-[20px] bg-white rounded border border-gray-400 peer-checked:bg-black peer-checked:border-black flex justify-center items-center">
				<svg class="w-full h-full fill-none stroke-white stroke-2 opacity-100 peer-checked:opacity-0 transition-opacity" viewBox="0 0 24 24">
					@templ.Raw(iconSVG("check"))
				</svg>
			</div>
		</div>
	</label>
}

templ OptionCheckboxes(options []OptionViewModel) {
	for _, option := range options {
		@OptionCheckbox(option)
	}
}

templ CheckboxDropdownList(id string, options []OptionViewModel) {
	<div class="flex">
		<div
			x-data="{
				open: false,
				toggle() {
					if (this.open) {
						return this.close()
					}
	
					this.$refs.button.focus()
	
					this.open = true
				},
				close(focusAfter) {
					if (! this.open) return
	
					this.open = false
	
					focusAfter && focusAfter.focus()
				}
			}"
			x-on:keydown.escape.prevent.stop="close($refs.button)"
			x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
			x-id="['dropdown-button']"
			class="relative"
		>
			<!-- Button -->
			<button 
				for={ id }
				x-ref="button"
				x-on:click="toggle()"
				:aria-expanded="open"
				:aria-controls="$id('dropdown-button')"
				type="button"
				class="flex items-start gap-2 bg-white block text-sm font-medium text-gray-700"
			>
				Välj
	
				<!-- Heroicon: chevron-down -->
				<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
					<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
				</svg>
			</button>
	
			<!-- Panel -->
			<div
				x-ref="panel"
				x-show="open"
				x-transition.origin.top.left
				x-on:click.outside="close($refs.button)"
				:id="$id('dropdown-button')"
				style="display: none;"
				class="absolute left-0 mt-3 py-2 rounded-md bg-white shadow-md"
			>
				<div id={ id } class="flex flex-col w-full">
					@OptionCheckboxes(options)
				</div>
			</div>
		</div>
	</div>
	
	/*<details class="dropdown">
		<summary for={ id } class="dropdown-label block text-sm font-medium text-gray-700">Välj</summary>
		<div id={ id } class="dropdown-content px-2 pt-2 bg-white">
			@OptionCheckboxes(options)
		</div>
	</details>*/
}
