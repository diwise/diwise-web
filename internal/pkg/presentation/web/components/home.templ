package components

import (
	"fmt"
	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
	"github.com/diwise/diwise-web/internal/pkg/presentation/web/assets"
	"time"
)

templ OverviewCards(l10n locale.Localizer, asset assets.AssetLoaderFunc, stats StatisticsViewModel) {
	@OverviewCard(l10n.Get("numberofsensors"), "/sensors", stats.Total, SVG("rss", Size(32)), asset)
	@OverviewCard(l10n.Get("activesensors"), "/sensors?active=true", stats.Active, SVG("rss", Size(32), OKStyle()), asset)
	@OverviewCard(l10n.Get("inactivesensors"), "/sensors?active=false", stats.Inactive, SVG("rss", Size(32), AlertStyle()), asset)
	@OverviewCard(l10n.Get("unknownsensors"), "/sensors?type=unknown", stats.Unknown, SVG("rss", Size(32), WarningStyle()), asset)
}

type HomeViewModel struct {
	UsageDatasets []ChartDataset
	XScaleMax     uint
	Alarms        []AlarmViewModel
	Pageing       PagingViewModel
}

type AlarmViewModel struct {
	ID          string    `json:"id"`
	AlarmType   string    `json:"alarmType"`
	Description string    `json:"description,omitempty"`
	ObservedAt  time.Time `json:"observedAt"`
	RefID       string    `json:"refID"`
	Severity    int       `json:"severity"`
	Tenant      string    `json:"tenant"`
}

templ Home(l10n locale.Localizer, asset assets.AssetLoaderFunc, viewModel HomeViewModel) {
	<div class="p-8">
		<div class="grid grid-cols-4 gap-8">
			<div class="col-span-2">
				<h1 class="text-black dark:text-white text-2xl font-bold font-heading leading-loose">{ l10n.Get("overview") }</h1>
				<div hx-get="/components/home/statistics" hx-trigger="load, every 1m" class="grid grid-cols-2 gap-10">
					@OverviewCards(l10n, asset, StatisticsViewModel{})
				</div>
			</div>
			<div class="col-span-2">
				<div class="text-black dark:text-white text-2xl font-bold font-heading leading-loose">
					<h2>{ l10n.Get("measurementperday") }</h2>
				</div>
				<div class="p-8 bg-white dark:bg-gray-800 rounded-[15px] shadow justify-start items-start gap-4">
					<canvas id="usage-chart"></canvas>
					<div hx-get="/components/home/usage" hx-trigger="load, every 60m" style="display:none;"></div>
				</div>
			</div>
			<div class="col-span-4">
				<div class="col-span-12 justify-start items-center gap-4">
					<div class="flex gap-4 items-center">
						<div class="text-black dark:text-white text-2xl font-bold font-heading leading-loose">{ l10n.Get("Information") }</div>
					</div>
				</div>
				<div id="tableview">
					@AlarmsTable(l10n, viewModel)
				</div>
			</div>
		</div>
	</div>
}

templ AlarmsTable(l10n locale.Localizer, viewModel HomeViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-primary-dark dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("Sensor ID") }</th>
				<th class="px-6 py-3">{ l10n.Get("type") }</th>
				<th class="px-6 py-3 min-w-[200px]">{ l10n.Get("description") }</th>
				<th class="px-6 py-3">{ l10n.Get("lastseen") }</th>
			</tr>
		</thead>
		<tbody>
			for _, alarm := range viewModel.Alarms {
				@AlarmRow(l10n, alarm)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="4">
					@Paging(l10n, viewModel.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ AlarmRow(l10n locale.Localizer, alarm AlarmViewModel) {
	<tr class="border-b border-divider-gray border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20 hover:cursor-pointer">
		<td class="px-6 py-3"><a href={ templ.SafeURL(fmt.Sprintf("/sensors/%s", alarm.RefID)) }><span class="font-bold">{ alarm.RefID }</span></a></td>
		<td class="px-6 py-3">{ l10n.Get(alarm.AlarmType) }</td>
		<td class="px-6 py-3 ">{ l10n.Get(alarm.Description) }</td>
		<td class="px-6 py-3 ">{ alarm.ObservedAt.Format("2006-01-02, 15:04") }</td>
	</tr>
}

func UsageChart(xScaleMax uint, datasets []ChartDataset) templ.Component {
	cfg := NewChartConfiguration("bar", true)

	var (
		xScaleType          string = "linear"
		xScalePosition      string = "bottom"
		xScaleMin           uint   = 1
		xScaleTicksStepSize uint   = 1
	)

	cfg.Options.Scales.X.Type = &xScaleType
	cfg.Options.Scales.X.Position = &xScalePosition
	cfg.Options.Scales.X.Min = &xScaleMin
	cfg.Options.Scales.X.Max = &xScaleMax
	cfg.Options.Scales.X.Ticks.StepSize = &xScaleTicksStepSize

	cfg.Add(datasets...)

	return Chart("usage-chart", "", cfg)
}
