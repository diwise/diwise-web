package components

import (
	"fmt"
	. "github.com/diwise/frontend-toolkit"
	"time"
)

templ OverviewCards(l10n Localizer, asset AssetLoaderFunc, stats StatisticsViewModel) {
	<div class="flex flex-col gap-6 w-full">
		<div class="flex items-start content-start gap-6 self-stretch flex-wrap w-full">
			<div class="flex-1">
				@OverviewCard(l10n.Get("numberofsensors"), "/sensors", stats.Total, SVG("rss", Size(32)), asset)
			</div>
			<div class="flex-1">
				@OverviewCard(l10n.Get("activesensors"), "/sensors?active=true", stats.Active, SVG("rss", Size(32), OKStyle()), asset)
			</div>
		</div>
		<div class="flex items-start content-start gap-6 self-stretch flex-wrap w-full">
			<div class="flex-1">
				@OverviewCard(l10n.Get("inactivesensors"), "/sensors?active=false", stats.Inactive, SVG("rss", Size(32), AlertStyle()), asset)
			</div>
			<div class="flex-1">
				@OverviewCard(l10n.Get("unknownsensors"), "/sensors?type=unknown", stats.Unknown, SVG("rss", Size(32), WarningStyle()), asset)
			</div>
		</div>
	</div>
}

type HomeViewModel struct {
	UsageDatasets []ChartDataset
	XScaleMax     uint
	Alarms        []AlarmViewModel
	Pageing       PagingViewModel
}

type AlarmViewModel struct {
	DeviceID   string    `json:"deviceID"`
	ObservedAt time.Time `json:"observedAt"`
	Types      []string  `json:"types"`
}

templ Home(l10n Localizer, asset AssetLoaderFunc, viewModel HomeViewModel) {
	<div class="flex flex-col items-start self-stretch gap-14">
		<div class="flex items-start self-stretch gap-14">
			<div class="flex flex-col flex-[1_0_0] justify-center items-start gap-6">
				<div class="flex items-center gap-3 self-stretch">
					@SVG("map-pin", Size(32), NoFill(), Box(24, 24), StrokeColor("primary-dark", "zinc-100"), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
					<h1 class="text-primary-dark dark:text-white text-2xl font-bold font-heading leading-loose">{ l10n.Get("overview") }</h1>
					<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
				</div>
				<div hx-get="/components/home/statistics" hx-trigger="load, every 1m" class="flex w-full">
					@OverviewCards(l10n, asset, StatisticsViewModel{})
				</div>
			</div>
			<div class="border-l border-gray-30 dark:border-white-30 h-auto self-stretch"></div>
			<div class="flex flex-col flex-[1_0_0] items-start gap-6">
				<div class="flex items-center gap-3 self-stretch">
					@SVG("chartline", Size(32), NoFill(), Box(20, 20), StrokeColor("primary-dark", "zinc-100"), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
					<h2 class="text-primary-dark dark:text-white text-2xl font-bold font-heading leading-loose whitespace-nowrap">{ l10n.Get("measurementperday") }</h2>
					<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
				</div>
				<div class="w-full p-6 dark:bg-gray-800 rounded-2xl shadow">
					<canvas id="usage-chart"></canvas>
					<div hx-get="/components/home/usage" hx-trigger="load, every 60m" style="display:none;"></div>
				</div>
			</div>
		</div>
		<div class="flex flex-col items-start self-stretch gap-6">
			<div class="flex items-center gap-3 self-stretch">
				@SVG("alert-triangle", Size(24))
				<h2 class="text-primary-dark dark:text-white text-2xl font-bold font-heading leading-loose whitespace-nowrap">{ l10n.Get("information") }</h2>
				<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
			</div>
			<div id="tableview" class="w-full">
				@AlarmsTable(l10n, viewModel)
			</div>
		</div>
	</div>
}

templ AlarmsTable(l10n Localizer, viewModel HomeViewModel) {
	<table class="w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-primary-dark dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("sensorID") }</th>
				<th class="px-6 py-3 min-w-[200px]">{ l10n.Get("description") }</th>
				<th class="px-6 py-3">{ l10n.Get("pointoftime") }</th>
			</tr>
		</thead>
		<tbody>
			for _, alarm := range viewModel.Alarms {
				@AlarmRow(l10n, alarm)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="4">
					@Paging(l10n, viewModel.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ AlarmRow(l10n Localizer, alarm AlarmViewModel) {
	<tr class="border-b border-divider-gray border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20 hover:cursor-pointer">
		<td class="px-6 py-3"><a href={ templ.SafeURL(fmt.Sprintf("/sensors/%s", alarm.DeviceID)) }><span class="font-bold">{ alarm.DeviceID }</span></a></td>
		<td class="px-6 py-3">
			for _, t := range alarm.Types {
				<span class="px-2 py-1 mr-2 rounded-full text-sm border-gray-30 dark:border-white-30 border-2">
					{ t }
				</span>
			}
		</td>
		<td class="px-6 py-3 ">{ alarm.ObservedAt.Format("2006-01-02, 15:04") }</td>
	</tr>
}

func UsageChart(xScaleMax uint, datasets []ChartDataset) templ.Component {
	stepsize := uint(20000)
	cfg := NewChartConfiguration("bar", true, nil, nil, &stepsize)

	var (
		xScaleType          string = "linear"
		xScalePosition      string = "bottom"
		xScaleMin           uint   = 1
		xScaleTicksStepSize uint   = 1
	)

	cfg.Options.Scales.X.Type = &xScaleType
	cfg.Options.Scales.X.Position = &xScalePosition
	cfg.Options.Scales.X.Min = &xScaleMin
	cfg.Options.Scales.X.Max = &xScaleMax
	cfg.Options.Scales.X.Ticks.StepSize = &xScaleTicksStepSize

	cfg.Add(datasets...)

	return Chart("usage-chart", "", cfg)
}
