package components

import (
	"fmt"
	. "github.com/diwise/frontend-toolkit"
	"slices"
	"sort"
	"strings"
	"time"
)

type ThingsListViewModel struct {
	Things  []ThingViewModel
	Pageing PagingViewModel
	MapView bool
	Tags    []string
	Types   []string
}

type ThingViewModel struct {
	ID           string
	Type         string
	SubType      string
	Name         string
	Description  string
	Latitude     float64
	Longitude    float64
	RefDevice    []string
	Tenant       string
	Tags         []string
	Measurements []MeasurementViewModel
	ObservedAt   time.Time
	Properties   map[string]any
}

func (t ThingViewModel) GetBoolOrDefault(key string, defaultValue bool) bool {
	if v, ok := t.Properties[key]; ok {
		if b, ok := v.(bool); ok {
			return b
		}
	}
	return defaultValue
}

func (t ThingViewModel) GetFloatOrDefault(key string, defaultValue float64) float64 {
	if v, ok := t.Properties[key]; ok {
		if f, ok := v.(float64); ok {
			return f
		}
	}
	return defaultValue
}

func (t ThingViewModel) GetFloat(key string) (float64, bool) {
	if v, ok := t.Properties[key]; ok {
		if f, ok := v.(float64); ok {
			return f, true
		}
	}
	return 0.0, false
}

func (t ThingViewModel) GetFloatAsString(key string, defaultValue float64) string {
	if v, ok := t.Properties[key]; ok {
		if f, ok := v.(float64); ok {
			return fmt.Sprintf("%0.2f", f)
		}
	}
	return fmt.Sprintf("%0.2f", defaultValue)
}

func (t ThingViewModel) GetStringOrDefault(key string, defaultValue string) string {
	if v, ok := t.Properties[key]; ok {
		if s, ok := v.(string); ok {
			return s
		}
	}
	return defaultValue
}

type MeasurementViewModel struct {
	ID          string    `json:"id"`
	Timestamp   time.Time `json:"timestamp"`
	Urn         string    `json:"urn"`
	BoolValue   *bool     `json:"vb,omitempty"`
	StringValue string    `json:"vs,omitempty"`
	Unit        string    `json:"unit,omitempty"`
	Value       *float64  `json:"v,omitempty"`
}

templ ThingsList(l10n Localizer, model ThingsListViewModel) {
	<div class="flex flex-col items-start gap-4 flex-[1_0_0] w-full" id="things-view">
		<div class="flex flex-col items-start gap-6 self-stretch w-full">
			<div class="flex items-center w-full justify-between">
				<h1 class="dark:text-white text-2xl font-bold font-heading leading-loose">{ l10n.Get("things") }</h1>
				<div class="flex items-center text-white dark:text-primary-dark font-bold">
					@Button(Primary, l10n.Get("addthing"), "",
						Target("#modalCreateThingContainer"),
						HxUrl("get", "/components/things"),
						Trigger("click"),
						Swap("innerHTML"))
				</div>
				<div id="modalCreateThingContainer" class="hidden fixed inset-0 bg-gray-30 z-50 flex items-start justify-center"></div>
			</div>
		</div>
		<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
		<div class="flex flex-col items-start self-stretch gap-10">
			@ThingsFilter(l10n, model)
			@DataList(l10n, ThingsTable(l10n, model), ThingsMap(l10n, model), model.MapView)
		</div>
		<script>
			document.getElementById('modalCreateThingContainer').addEventListener('htmx:afterSwap', function() {
				document.getElementById('modalCreateThingContainer').classList.remove('hidden');
			});
		</script>
	</div>
}

templ NewThing(l10n Localizer, asset AssetLoaderFunc, model NewThingViewModel) {
	<div id="modalCreateThing" class="fixed inset-0 bg-gray-30 z-50 flex items-start justify-center">
		<div class="bg-white rounded-lg shadow-xl w-full max-w-xl p-6 mt-8">
			<div class="w-full">
				<div class="flex items-center w-full justify-between">
					<div class="flex items-center gap-6 align-middle">
						<h1 class="text-primary-dark dark:text-white text-2xl font-bold font-heading leading-loose">{ l10n.Get("addthing") }</h1>
					</div>
				</div>
				<form action={ templ.SafeURL("/things") } method="post">
					<div class="w-full flex py-6 gap-10 text-primary-dark dark:text-white">
						<div class="flex flex-col items-start gap-20 flex-[1_0_0]">
							//Status och uppgifter
							<div class="flex flex-col items-start self-stretch">
								<div class="flex items-center gap-3 self-stretch">
									//Rubrik uppgifter
									@SVG("info", Size(24), NoFill(), Box(24, 24), StrokeColor("primary-dark", "zinc-100"), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
									<h2 class="font-heading text-xl font-bold">{ l10n.Get("details") }</h2>
									<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
								</div>
								<div class="flex flex-col items-start self-stretch gap-6 py-6 px-9">
									//Uppgifter
									<div class="flex flex-start gap-10 self-stretch">
										<div class="flex flex-col gap-2 flex-1">
											<div class="font-bold">{ l10n.Get("thingtype") }</div>
											<div class="border border-input-surface rounded-xl">
												<label for="type" class="hidden block text-sm font-medium text-gray-700">
													{ l10n.Get("pickOption") }
												</label>
												@TypeSelect(l10n, asset, "type", "", model.ThingType)
											</div>
										</div>
									</div>
									<div class="flex flex-start gap-10 self-stretch">
										<div class="flex flex-col gap-2 flex-1">
											<div class="font-bold">{ l10n.Get("name") }</div>
											<input
												type="text"
												name="name"
												class="border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl p-2"
												placeholder=""
											/>
										</div>
										<div class="flex flex-col gap-2 flex-1">
											<div class="font-bold">{ l10n.Get("organisation") }</div>
											<div class="border border-input-surface rounded-xl">
												<label for="organisation" class="hidden block text-sm font-medium text-gray-700">
													{ l10n.Get("pickOption") }
												</label>
												@OrganisationSelect(l10n, asset, "organisation", "", model.Organisations)
											</div>
										</div>
									</div>
									<div class="flex flex-start gap-10 self-stretch">
										<div class="flex flex-col gap-2 flex-[1_0_0]">
											<div class="font-bold">{ l10n.Get("description") }</div>
											<textarea type="text" name="description" class="w-full min-h-[150px] border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl p-2" placeholder={ l10n.Get("description") }></textarea>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="h-px border-t border-gray-30 dark:border-white-30 w-full"></div>
					<div class="flex items-center justify-end pt-6">
						<div class="flex items-center gap-4">
							@Button(Secondary, l10n.Get("cancel"), "close", Name("cancel"),
								HxUrl("get", "javascript:void(0)"),
								HxUrl("on", "click: this.closest('#modalCreateThingContainer').classList.add('hidden')"),
								BtnType("button"))
							@Button(Primary, l10n.Get("save"), "check", Name("save"), BtnType("submit"))
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
}

templ ThingsFilter(l10n Localizer, model ThingsListViewModel) {
	<div class="flex w-full flex-col gap-4">
		<div class="flex h-12 justify-between items-center">
			<div class="flex items-center dark:text-white">
				<div class="flex items-center gap-6">
					@CheckboxList(l10n.Get("type")) {
						for _, t := range model.Types {
							@CheckboxOption("type", t, "", l10n, templ.Attributes{
								"hx-get":     string(templ.SafeURL("/components/things/list")),
								"hx-target":  "#tableOrMap",
								"hx-swap":    "outerHTML",
								"hx-include": "[name=type]:checked",
								"onchange":   "updateSelectedFilters()",
								"data-text":  l10n.Get(t),
							})
						}
					}
					@CheckboxList(l10n.Get("tags")) {
						for _, t := range model.Tags {
							@CheckboxOption("tags", t, "", l10n, templ.Attributes{
								"hx-get":     string(templ.SafeURL("/components/things/list")),
								"hx-target":  "#tableOrMap",
								"hx-swap":    "outerHTML",
								"hx-include": "[name=tags]:checked",
								"onchange":   "updateSelectedFilters()",
								"value":      t,
							})
						}
					}
					<div id="fillinglevelFilter" class="hidden">
						@CheckboxList(l10n.Get("fillinglevel")) {
							@CheckboxOption("fillinglevel", "Grön", "", l10n, templ.Attributes{
								"hx-get":     string(templ.SafeURL("/components/things/list?fillinglevel=green")),
								"hx-target":  "#tableOrMap",
								"hx-swap":    "outerHTML",
								"hx-include": "[name=fillinglevel]:checked",
								"onchange":   "updateSelectedFilters()",
								"value":      "Grön",
							})
							@CheckboxOption("fillinglevel", "Orange", "", l10n, templ.Attributes{
								"hx-get":     string(templ.SafeURL("/components/things/list?fillinglevel=orange")),
								"hx-target":  "#tableOrMap",
								"hx-swap":    "outerHTML",
								"hx-include": "[name=fillinglevel]:checked",
								"onchange":   "updateSelectedFilters()",
								"value":      "Orange",
							})
							@CheckboxOption("fillinglevel", "Röd", "", l10n, templ.Attributes{
								"hx-get":     string(templ.SafeURL("/components/things/list?fillinglevel=red")),
								"hx-target":  "#tableOrMap",
								"hx-swap":    "outerHTML",
								"hx-include": "[name=fillinglevel]:checked",
								"onchange":   "updateSelectedFilters()",
								"value":      "Röd",
							})
						}
					</div>
				</div>
			</div>
			@TableOrMap(l10n, "/components/things/list")
		</div>
		@SelectedFilters(l10n, "/components/things/list")
	</div>
}

templ SelectedFilters(l10n Localizer, hxget string) {
	<div class="flex flex-start items-center gap-2 self-stretch">
		<div class="font-bold dark:text-white p-2">
			{ l10n.Get("selectedfilters") }
		</div>
		<form id="filterForm" hx-get={ hxget } hx-target="#tableOrMap" hx-swap="outerHTML">
			<div id="selectedFilters" class="flex items-center gap-2 self-stretch text-sm dark:text-white"></div>
		</form>
	</div>
	<script>
		function updateSelectedFilters() {
			const selectedFiltersContainer = document.getElementById('selectedFilters');
			
			if (!selectedFiltersContainer) {
				return;
			}
			
			selectedFiltersContainer.innerHTML = '';

			const selectedTypes = Array.from(document.querySelectorAll('input[name="type"]:checked')).map(cb => ({
				name: "type",
				value: cb.value,
				text: cb.getAttribute('data-text'),
			}));

			const selectedTags = Array.from(document.querySelectorAll('input[name="tags"]:checked')).map(cb => ({
				name: "tags",
				value: cb.value,
				text: cb.value,
			}));

			let selectedFillingLevel = [];
			const fillingLevelFilter = document.querySelectorAll('input[name="fillinglevel"]:checked');
			if (fillingLevelFilter.length > 0) {
				selectedFillingLevel = Array.from(fillingLevelFilter).map(cb => ({
					name: "fillinglevel",
					value: cb.value,
					text: cb.value,
				}));
			}

			const selectedStatus = Array.from(document.querySelectorAll('input[name="active"]:checked')).map(cb => ({
				name: "active",
				value: cb.value,
				text: cb.value === "true" ? "Aktiv" : "Inaktiv",
			}));

			const selectedOnline = Array.from(document.querySelectorAll('input[name="online"]:checked')).map(cb => ({
				name: "online",
				value: cb.value,
				text: cb.value === "true" ? "Online" : "Offline",
			}));

			const selectedFilters = [...selectedTypes, ...selectedTags, ...selectedFillingLevel, ...selectedStatus, ...selectedOnline];
			
			const svgIcon = `
				<svg class="h-4 w-4 fill-none stroke-primary-dark dark:stroke-white stroke-2 cursor-pointer" viewBox="0 0 24 24">
					<path d="M18 6 6 18"/><path d="m6 6 12 12"/>
				</svg>`;

			selectedFilters.forEach(filter => {
				const filterDiv = document.createElement('div');
				filterDiv.className = "flex items-center p-2 justify-center gap-1 rounded-full border-gray-30 dark:border-white-30 border capitalize";

				const filterText = document.createTextNode(filter.text);
				filterDiv.appendChild(filterText);

				const removeIcon = document.createElement('span');
				removeIcon.innerHTML = svgIcon;
				removeIcon.addEventListener('click', function() {
					const checkbox = document.querySelector(`input[name="${filter.name}"][value="${filter.value}"]`);
					if (checkbox) {
						checkbox.checked = false;
						checkbox.dispatchEvent(new Event('change')); 
					}
				});

				filterDiv.appendChild(removeIcon);
				selectedFiltersContainer.appendChild(filterDiv);
			});

			if (selectedFilters.length > 0) {
				const clearAllDiv = document.createElement('div');
				clearAllDiv.className = "flex items-center p-2 justify-center gap-1 rounded-full border-gray-30 dark:border-white-30 border cursor-pointer";
				clearAllDiv.textContent = "Rensa alla";

				clearAllDiv.addEventListener('click', function() {
					const allCheckedCheckboxes = document.querySelectorAll('input:checked');
					allCheckedCheckboxes.forEach(cb => {
						cb.checked = false;
					});

					document.getElementById('filterForm').dispatchEvent(new Event('submit', {cancelable: true}));

					const fillinglevelFilter = document.getElementById('fillinglevelFilter');
					if (fillinglevelFilter) {
						fillinglevelFilter.classList.add('hidden');
					}
				});

				selectedFiltersContainer.appendChild(clearAllDiv);
			}

			if (selectedFilters.length === 0) {
				const noFilterDiv = document.createElement('div');
				noFilterDiv.className = "flex items-center p-2 justify-center gap-1 rounded-full italic";
				noFilterDiv.textContent = "Inga filter valda";
				selectedFiltersContainer.appendChild(noFilterDiv);
			}
		}

		document.addEventListener("DOMContentLoaded", updateSelectedFilters);
		document.body.addEventListener('htmx:afterOnLoad', updateSelectedFilters);

		function toggleFillinglevelVisibility() {
			const typeCheckboxes = document.querySelectorAll('input[name="type"]');
			let isWastecontainerSelected = false;

			typeCheckboxes.forEach(checkbox => {
				if (checkbox.checked && checkbox.value === "wastecontainer") {
					isWastecontainerSelected = true;
				}
			});

			const fillinglevelFilter = document.getElementById('fillinglevelFilter');
			if (isWastecontainerSelected) {
				fillinglevelFilter.classList.remove('hidden');
			} else {
				fillinglevelFilter.classList.add('hidden');
			}
		}

		document.addEventListener('DOMContentLoaded', function () {
			const typeCheckboxes = document.querySelectorAll('input[name="type"]');
			typeCheckboxes.forEach(checkbox => {
				checkbox.addEventListener('change', toggleFillinglevelVisibility);
			});
			
			toggleFillinglevelVisibility();
		});

	</script>
}

templ ThingsTableComponent(l10n Localizer, model ThingsListViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-dark-primary dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("name") }</th>
				<th class="px-6 py-3">{ l10n.Get("type") }</th>
				<th class="px-6 py-3 min-w-[200px]">{ l10n.Get("status") }</th>
				<th class="px-6 py-3">{ l10n.Get("tags") }</th>
			</tr>
		</thead>
		<tbody>
			for _, thing := range model.Things {
				@ThingRow(l10n, thing)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="4">
					@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ ThingRow(l10n Localizer, thing ThingViewModel) {
	<tr
		class="border-b border-divider-gray border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20 hover:cursor-pointer"
		hx-get={ string(templ.SafeURL(fmt.Sprintf("/components/things/%s?type=%s&subType=%s", thing.ID, thing.Type, thing.SubType))) }
		hx-target="#things-view"
		hx-push-url={ string(templ.SafeURL(fmt.Sprintf("/things/%s", thing.ID))) }
		hx-trigger="click"
	>
		<td class="px-6 py-3">
			<span class="font-bold">
				if len(thing.Name) > 0 {
					{ thing.Name }
				} else {
					{ thing.ID }
				}
			</span>
		</td>
		<td class="px-6 py-3">
			if thing.SubType != "" {
				{ l10n.Get(thing.SubType) }
			} else {
				{ l10n.Get(thing.Type) }
			}
		</td>
		<td class="px-6 py-3 ">
			@ThingStatusCell(l10n, thing)
		</td>
		<td class="px-6 py-3 relative">
			@TagCell(l10n, thing)
		</td>
	</tr>
}

func TagCell(l10n Localizer, thing ThingViewModel) templ.Component {
	if len(thing.Tags) == 0 {
		return templ.NopComponent
	}
	sortedTags := make([]string, len(thing.Tags))
	copy(sortedTags, thing.Tags)
	sort.Strings(sortedTags)

	return TagComponent(l10n, sortedTags)
}

templ TagComponent(l10n Localizer, sortedTags []string) {
	for i, tag := range sortedTags {
		if i < 3 {
			<span class="px-2 py-1 mr-2 rounded-full text-sm border-gray-30 dark:border-white-30 border-2">
				{ tag }
			</span>
		}
	}
	if len(sortedTags) > 3 {
		<span class="dark:text-secondary px-2 py-1 text-sm relative group cursor-pointer">
			{ fmt.Sprintf("+ %d %s", len(sortedTags)-3, l10n.Get("more")) }
			<div class="absolute hidden z-10 flex flex-col group-hover:block bg-background-100 dark:bg-gray-800 shadow-lg rounded-lg p-2 right-0">
				for i, tag := range sortedTags {
					if i >= 3 {
						<div class="flex self-stretch dark:bg-gray-800 px-2 py-1 mt-2 rounded-full text-sm border-gray-30 dark:border-white-30 border-2">
							{ tag }
						</div>
					}
				}
			</div>
		</span>
	}
}

func ThingsTable(l10n Localizer, model ThingsListViewModel) templ.Component {
	if model.MapView {
		return templ.NopComponent
	}
	return ThingsTableComponent(l10n, model)
}

func ThingStatusCell(l10n Localizer, thing ThingViewModel) templ.Component {
	switch strings.ToLower(thing.Type) {
	case "beach":
		fallthrough
	case "pointofinterest":
		return TemperatureCell(thing)
	case "building":
		return BuildingCell(l10n, thing)
	case "wastecontainer":
		fallthrough
	case "container":
		switch strings.ToLower(thing.SubType) {
		case "wastecontainer":
			return WasteContainerCell(l10n, thing)
		case "sandstorage":
			return SandStorageCell(l10n, thing)
		}
		return templ.NopComponent
	case "lifebuoy":
		return LifebuoyCell(l10n, thing)
	case "passage":
		return PassageCell(thing)
	case "pumpingstation":
		return SewagePumpingstationCell(l10n, thing)
	case "room":
		return TemperatureCell(thing)
	case "sewer":
		return SewerCell(l10n, thing)
	case "watermeter":
		return WaterMeterCell(l10n, thing)
	default:
		return templ.NopComponent
	}
}

templ BuildingCell(l10n Localizer, t ThingViewModel) {
	<div>
		{ fmt.Sprintf("%0.f kWh / %0.f kW", t.Properties["energy"], t.Properties["power"]) }
	</div>
}

func LifebuoyCell(l10n Localizer, t ThingViewModel) templ.Component {
	vb, ok := t.Properties["presence"]
	if !ok {
		return Text(l10n.Get("noData"))
	}
	b, ok := vb.(bool)
	if !ok {
		return Text(l10n.Get("noData"))
	}
	if b {
		return Text(l10n.Get("present"))
	} else {
		return Text(l10n.Get("notPresent"))
	}
}

templ WaterMeterCell(l10n Localizer, t ThingViewModel) {
	<div>
		{ fmt.Sprintf("%0.f m³", t.Properties["cumulativeVolume"]) }
	</div>
}

func SewerCell(l10n Localizer, t ThingViewModel) templ.Component {
	overflowObserved, okOverflow := t.Properties["overflowObserved"]
	currentLevel, okLevel := t.Properties["currentLevel"]
	percent, okPercent := t.Properties["percent"]

	var components []templ.Component

	if okOverflow {
		if vb, ok := overflowObserved.(bool); ok {
			components = append(components, Text(fmt.Sprintf("Overflow: %t", vb)))
		}
	}

	if okLevel {
		if v, ok := currentLevel.(float64); ok {
			if okPercent {
				if p, ok := percent.(float64); ok {
					components = append(components, Text(fmt.Sprintf("Level: %0.fm (%0.f%%)", v, p)))
				}
			} else {
				components = append(components, Text(fmt.Sprintf("Level: %0.fm", v)))
			}
		}
	}

	return Div("", components...)
}

func SewagePumpingstationCell(l10n Localizer, t ThingViewModel) templ.Component {
	vb, ok := t.Properties["pumpingObserved"]
	if !ok {
		return Text(l10n.Get("noData"))
	}
	b, ok := vb.(bool)
	if !ok {
		return Text(l10n.Get("noData"))
	}
	if b {
		return Text(l10n.Get("pumpingObserved"))
	} else {
		return Text(l10n.Get("off"))
	}
}

func WasteContainerCell(l10n Localizer, t ThingViewModel) templ.Component {
	v, ok := t.Properties["percent"]
	if !ok {
		return Text(l10n.Get("noData"))
	}

	value := v.(float64)
	text := fmt.Sprintf("%0.f%%", value)

	colourClass := ""
	switch {
	case value >= 51:
		colourClass = "bg-red-600 dark:bg-err-prim-surf"
	case value <= 30:
		colourClass = "bg-green-700 dark:bg-primary-surface-green-accent"
	default:
		colourClass = "bg-orange-600 dark:bg-primary-surface-orange-accent"
	}

	return ProgressBar(colourClass, text, int(value))
}

func SandStorageCell(l10n Localizer, t ThingViewModel) templ.Component {
	v, ok := t.Properties["percent"]
	if !ok {
		return Text(l10n.Get("noData"))
	}

	value := v.(float64)
	text := fmt.Sprintf("%0.f%%", value)

	colourClass := ""
	switch {
	case value <= 51:
		colourClass = "bg-red-600 dark:bg-err-prim-surf"
	case value >= 70:
		colourClass = "bg-green-700 dark:bg-primary-surface-green-accent"
	default:
		colourClass = "bg-orange-600 dark:bg-primary-surface-orange-accent"
	}

	return ProgressBar(colourClass, text, int(value))
}

templ PassageCell(t ThingViewModel) {
	<div>
		{ fmt.Sprintf("%0.f st", t.Properties["passagesToday"]) }
	</div>
}

templ TemperatureCell(t ThingViewModel) {
	<div>
		{ fmt.Sprintf("%0.1f °C", t.Properties["temperature"]) }
	</div>
}

func ThingsMap(l10n Localizer, model ThingsListViewModel) templ.Component {
	if !model.MapView {
		return templ.NopComponent
	}
	mapData := newMapData(62.3908, 17.3069)
	mapData.CurrentView = "thing"
	return Map("large", true, false, mapData, thingsToMapFeature(l10n, model.Things))
}

func thingsToMapFeature(l10n Localizer, things []ThingViewModel) FeatureCollection {
	features := make([]Feature, 0, len(things))

	for _, thing := range things {
		if thing.Latitude == 0 || thing.Longitude == 0 {
			continue
		}
		feature := NewFeature(NewPoint(thing.Latitude, thing.Longitude))
		feature.AddProperty("type", strings.ToLower(thing.Type))
		feature.AddProperty("subtype", strings.ToLower(thing.SubType))
		feature.AddProperty("id", thing.ID)
		feature.AddProperty("name", thing.Name)

		if len(thing.Tags) > 0 {
			feature.AddProperty("tags", thing.Tags)
		} else {
			feature.AddProperty("tags", nil)
		}

		if strings.ToLower(thing.SubType) == "wastecontainer" {
			fl, ok := thing.Properties["percent"].(float64)
			if ok {
				var state string
				if fl >= 51 {
					state = "red"
				} else if fl > 31 {
					state = "orange"
				} else {
					state = "green"
				}
				feature.AddProperty("fillinglevel", fmt.Sprintf("%0.f", fl))
				feature.AddProperty("state", state)
			} else {
				feature.AddProperty("fillinglevel", "") // Eller 0 om det inte finns data
				feature.AddProperty("state", "black")
			}
		}

		if strings.ToLower(thing.SubType) == "sandstorage" {
			fl, ok := thing.Properties["percent"].(float64)
			if ok {
				var state string
				if fl >= 51 {
					state = "green"
				} else if fl > 31 {
					state = "orange"
				} else {
					state = "red"
				}
				feature.AddProperty("fillinglevel", fmt.Sprintf("%0.f", fl))
				feature.AddProperty("state", state)
			} else {
				feature.AddProperty("fillinglevel", "") // Eller 0 om det inte finns data
				feature.AddProperty("state", "black")
			}
		}

		if strings.ToLower(thing.Type) == "combinedsewageoverflow" {
			i := slices.IndexFunc(thing.Measurements, func(m MeasurementViewModel) bool {
				return strings.HasSuffix(m.ID, "3350/5850") // ID för Combined Sewage Overflow/Stopwatch/OnOff
			})

			if i != -1 && thing.Measurements[i].BoolValue != nil {
				var state string
				if *thing.Measurements[i].BoolValue {
					state = l10n.Get("overflow") // Exempelvis när översvämning detekteras
				} else {
					state = l10n.Get("Ok") // Exempelvis normalt tillstånd
				}

				feature.AddProperty("state", state) // Lägg till "state" som egenskap i feature
			} else {
				feature.AddProperty("state", "nil") // Hantera fallet där det inte finns data
			}
		}

		feature.AddProperty("latitude", thing.Latitude)
		feature.AddProperty("longitude", thing.Longitude)
		feature.AddProperty("url", fmt.Sprintf("/things/%s", thing.ID))

		//Språkstöd
		feature.AddProperty("text_fillinglevel", l10n.Get("fillinglevel"))
		feature.AddProperty("text_id", l10n.Get("id"))
		feature.AddProperty("text_information", l10n.Get("information"))
		feature.AddProperty("text_overflow", l10n.Get("overflow"))
		feature.AddProperty("text_moreinformation", l10n.Get("moreinformation"))
		feature.AddProperty("text_name", l10n.Get("name"))
		feature.AddProperty("text_position", l10n.Get("location"))
		feature.AddProperty("text_tags", l10n.Get("tags"))

		features = append(features, feature)
	}

	return NewFeatureCollection(features)
}
