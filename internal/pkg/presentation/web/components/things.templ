package components

import (
	"fmt"
	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
	"github.com/diwise/diwise-web/internal/pkg/presentation/web/assets"
	"slices"
	"strings"
	"time"
	"net/http"
)

type ThingViewModel struct {
	ThingID      string
	ID           string
	Type         string
	Latitude     float64
	Longitude    float64
	Tenant       string
	Measurements []MeasurementViewModel
}

type MeasurementViewModel struct {
	ID          string    `json:"id"`
	Timestamp   time.Time `json:"timestamp"`
	Urn         string    `json:"urn"`
	BoolValue   *bool     `json:"vb,omitempty"`
	StringValue string    `json:"vs,omitempty"`
	Unit        string    `json:"unit,omitempty"`
	Value       *float64  `json:"v,omitempty"`
}

type ThingListViewModel struct {
	Things     []ThingViewModel
	Statistics StatisticsViewModel
}

templ ThingsDetailPage(l10n locale.Localizer, asset assets.AssetLoaderFunc, thing ThingDetailsViewModel) {
	<div class="flex flex-col items-start gap-14 flex-[1_0_0] py-8 w-full" id="things-view">
		@ThingDetails(l10n, asset, thing)
	</div>
}

templ ThingTable(l10n locale.Localizer, asset assets.AssetLoaderFunc, things ThingListViewModel, r *http.Request, filterParams map[string][]string) {
	@Table(
		HeaderRow(TableHeaderText(l10n.Get("ID")), TableHeaderText(l10n.Get("type")), TableHeaderText(l10n.Get("status"))),
		TableData(tableRowsFromThings(l10n, asset, things.Things)...),
		DataTableFooter("3", "things"),
	)
}

templ Things(l10n locale.Localizer, asset assets.AssetLoaderFunc, things ThingListViewModel, r *http.Request, filterParams map[string][]string) {
	<div class="flex flex-col items-start gap-14 flex-[1_0_0] py-8 w-full" id="things-view">
		<div class="flex flex-col items-start gap-6 self-stretch w-full px-8">
			<div class="flex items-center w-full justify-between">
				<h1 class="dark:text-white text-2xl font-bold font-heading leading-loose">{ l10n.Get("things") }</h1>
				//TODO: Target för Lägg till ny sak
				@Button(Primary, l10n.Get("addthing"), "", HxUrl("get", (fmt.Sprintf("/components/things"))))
			</div>
			@SumOfStuff(l10n, things.Statistics)
		</div>
		<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
		<div class="flex px-8 flex-col items-start self-stretch gap-10">
			<div class="w-full h-12 justify-between items-center inline-flex">
				<div class="inline-flex justify-start items-center gap-[34px] dark:text-white">
					//@SearchField(l10n)
					@FilterThings(l10n, filterParams)
				</div>
				//@tableMapSwitch("list", "Lista", iconSVG("list"))
				//@tableMapSwitch("mapview", "Karta", iconSVG("map"))
				@mapTableButtons(l10n)
			</div>
			//@PickedFilters()	
			<div id="tableOrMap" class="w-full flex flex-col gap-6 items-start inline-flex">
				//Initialt listinnehåll
				<div id="things-table" class="w-full">
					@ThingTable(l10n, asset, things, r, filterParams)
				</div>
			</div>
			//Innehåll dolt, hämtas när man klickar på Lista/Karta
			<div id="fragments" style="display: none;">
				<div id="table" class="w-full">
					<div id="things-table" class="w-full">
						@ThingTable(l10n, asset, things, r, filterParams)
					</div>
				</div>
				<div id="mapview" class="w-full">
					@Map(newMapData(62.3908, 17.3069))
				</div>
			</div>
		</div>
	</div>
}

//HELPERS
func tableRowsFromThings(l10n locale.Localizer, _ assets.AssetLoaderFunc, things []ThingViewModel) []templ.Component {
	rows := []templ.Component{}

	for _, thing := range things {
		cells := []templ.Component{TextFirstCell(thing.ID)}
		cells = append(cells, TextCell(l10n.Get(thing.Type)))

		switch strings.ToLower(thing.Type) {
		case "combinedsewageoverflow":
			cells = append(cells, CombinedSewageOverflowCell(l10n,thing))
		case "wastecontainer":
			cells = append(cells, WasteContainerCell(l10n,thing))
		case "sewer":
			cells = append(cells, SewerCell(l10n,thing))
		case "sewagepumpingstation":
			cells = append(cells, SewagePumpingstationCell(l10n,thing))
		default:
			cells = append(cells, TextCell("-"))
		}

		linkUrl := templ.URL(fmt.Sprintf("/components/things/details?id=%s", thing.ThingID))
		pushUrl := templ.URL(fmt.Sprintf("/things/%s", thing.ThingID))

		row := LinkRow(cells, linkUrl, pushUrl, "things")
		rows = append(rows, row)
	}

	return rows
}

func WasteContainerCell(l10n locale.Localizer,t ThingViewModel) templ.Component {
	i := slices.IndexFunc(t.Measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3435/2") // Filling level/Actual filling percentage
	})

	if i == -1 {
		return TextCell("-")
	}

	return ProgressBarCell(fmt.Sprintf("%.0f", *t.Measurements[i].Value))
}

func CombinedSewageOverflowCell(l10n locale.Localizer, t ThingViewModel) templ.Component {
	i := slices.IndexFunc(t.Measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3350/5850") // Stopwatch/OnOff
	})

	if i == -1 {
		return TextCell("-")
	}

	state := l10n.Get("Ok")
	if *t.Measurements[i].BoolValue {
		state = l10n.Get("Bräddar")
	}

	return TextCell(state)
}

func SewerCell(l10n locale.Localizer,t ThingViewModel) templ.Component {
	i := slices.IndexFunc(t.Measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3330/5700") // Distance/Sensor value
	})

	if i == -1 || t.Measurements[i].Value == nil {
		return TextCell("-")
	}

	return TextCell(fmt.Sprintf("%.2f%s", *t.Measurements[i].Value, t.Measurements[i].Unit))
}

func SewagePumpingstationCell(l10n locale.Localizer,t ThingViewModel) templ.Component {
	i := slices.IndexFunc(t.Measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3200/5500") // Digital Input/Digital Input State
	})

	if i == -1 || t.Measurements[i].BoolValue == nil {
		return TextCell("-")
	}

	state := "Ok"
	if *t.Measurements[i].BoolValue {
		state = l10n.Get("Pumpar")
	}

	return TextCell(state)
}

templ FilterThings(l10n locale.Localizer, filterParams map[string][]string) {
	<div class="flex items-center flex-[1_0_0] gap-6">
		<div class="relative inline-block group">
			@CheckboxButton("type", l10n)
			@CheckboxList("typeForm", "#fragments", "#statusForm", "/things", "type", []string{"combinedsewageoverflow", "wastecontainer", "sewer", "sewagepumpingstation"}, l10n)
		</div>
		<div class="relative inline-block group">
			@CheckboxButton("status", l10n)
			@CheckboxList("statusForm", "#fragments", "#typeForm", "/things", "status", []string{"active", "inactive", "unregistered"}, l10n, filterParams)
		</div>
	</div>
}

templ PickedFilters() {
	<div class="flex flex-col gap-4 w-full">
		<div class="w-full h-10 justify-items-start inline-flex text-primary-dark dark:text-white gap-3">
			<div class="flex items-center justify-start text-left px-6 border-2 border-gray-30 border-opacity-30 dark:border-white-30 rounded-xl">
				Soptunna
				<svg class="w-[24px] h-[24px] stroke-primary-dark stroke-2 dark:stroke-white">
					@templ.Raw(iconSVG("close"))
				</svg>
			</div>
			<div class="flex items-center justify-start text-left px-6 border-2 border-gray-30 border-opacity-30 dark:border-white-30 rounded-xl">
				Centrum
				<svg class="w-[24px] h-[24px] stroke-primary-dark stroke-2 dark:stroke-white">
					@templ.Raw(iconSVG("close"))
				</svg>
			</div>
			<div class="flex items-center justify-start text-left px-6 border-2 border-gray-30 border-opacity-30 dark:border-white-30 rounded-xl">
				Kvissleby
				<svg class="w-[24px] h-[24px] stroke-primary-dark stroke-2 dark:stroke-white">
					@templ.Raw(iconSVG("close"))
				</svg>
			</div>
			<div class="flex items-center justify-start text-left px-6 border-2 border-gray-30 border-opacity-30 dark:border-white-30 rounded-xl">
				0-70%
				<svg class="w-[24px] h-[24px] stroke-primary-dark stroke-2 dark:stroke-white">
					@templ.Raw(iconSVG("close"))
				</svg>
			</div>
		</div>
	</div>
}
