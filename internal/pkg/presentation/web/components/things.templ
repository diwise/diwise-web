package components

import (
	"fmt"
	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
	"slices"
	"strings"
	"sort"
	"time"
)

type ThingsListViewModel struct {
	Things  []ThingViewModel
	Pageing PagingViewModel
	MapView bool
	Tags    []string
	Types   []string
}

type ThingViewModel struct {
	ThingID      string
	ID           string
	Type         string
	Name         string
	Description  string
	Latitude     float64
	Longitude    float64
	Tenant       string
	Tags         []string
	Measurements []MeasurementViewModel
}

func (t ThingViewModel) FillingLevel() (float64, bool) {
	i := slices.IndexFunc(t.Measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3435/2") // Filling level/Actual filling percentage
	})

	if i == -1 || t.Measurements[i].Value == nil {
		return 0.0, false
	}

	return *t.Measurements[i].Value, true
}

type MeasurementViewModel struct {
	ID          string    `json:"id"`
	Timestamp   time.Time `json:"timestamp"`
	Urn         string    `json:"urn"`
	BoolValue   *bool     `json:"vb,omitempty"`
	StringValue string    `json:"vs,omitempty"`
	Unit        string    `json:"unit,omitempty"`
	Value       *float64  `json:"v,omitempty"`
}

templ ThingsList(l10n locale.Localizer, model ThingsListViewModel) {
	<div class="flex flex-col items-start gap-4 flex-[1_0_0] w-full" id="things-view">
		<div class="flex flex-col items-start gap-6 self-stretch w-full">
			<div class="flex items-center w-full justify-between">
				<h1 class="dark:text-white text-2xl font-bold font-heading leading-loose">{ l10n.Get("things") }</h1>
				<div class="flex items-center text-white dark:text-dark-primary font-bold">
					//<button class="flex justify-center items-center gap-2 px-4 py-2 bg-primary-surface hover:bg-primary-surface-hover dark:bg-primary-surface-dark dark:hover:bg-primary-surface-dark-hover rounded-xl cursor-pointer" hx-get="/components/things" hx-trigger="click">{ l10n.Get("addthing") }</button>
				</div>
			</div>
		</div>
		<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
		<div class="flex flex-col items-start self-stretch gap-10">
			@ThingsFilter(l10n, model)
			@DataList(l10n, ThingsTable(l10n, model), ThingsMap(l10n, model), model.MapView)
		</div>
	</div>
}

templ ThingsFilter(l10n locale.Localizer, model ThingsListViewModel) {
	<div class="flex w-full flex-col gap-4">
		<div class="flex h-12 justify-between items-center">
			<div class="flex items-center dark:text-white">
				<div class="flex items-center gap-6">
					@CheckboxList(l10n.Get("type")) {
						for _, t := range model.Types {
							@CheckboxOption("type", t, "", l10n, templ.Attributes{
								"hx-get":    string(templ.SafeURL("/components/things/list")),
								"hx-target": "#tableOrMap",
								"hx-swap":   "outerHTML",
								"hx-include": "[name=type]:checked",
								"onchange":  "updateSelectedFilters()",
								"data-text": l10n.Get(t),
							})
						}
					}
					@CheckboxList(l10n.Get("tags")) {
						for _, t := range model.Tags {
							@CheckboxOption("tags", t, "", l10n, templ.Attributes{
								"hx-get":    string(templ.SafeURL("/components/things/list")),
								"hx-target": "#tableOrMap",
								"hx-swap":   "outerHTML",
								"hx-include": "[name=tags]:checked",
								"onchange":  "updateSelectedFilters()",
								"value": t,
							})
						}
					}
				</div>
			</div>
			@TableOrMap(l10n, "/components/things/list")
		</div>
		
		@SelectedFilters(l10n, "/components/things/list")
		
	</div>
}

templ SelectedFilters(l10n locale.Localizer, hxget string) {
	<div class="flex flex-start items-center gap-2 self-stretch">
		<div class="font-bold dark:text-white p-2">
			{ l10n.Get("selectedfilters") }
		</div>
		<form id="filterForm" hx-get={hxget} hx-target="#tableOrMap" hx-swap="outerHTML">
			<div id="selectedFilters" class="flex items-center gap-2 self-stretch text-sm dark:text-white">
				
			</div>
		</form>
	</div>

	<script>
		function updateSelectedFilters() {
			const selectedFiltersContainer = document.getElementById('selectedFilters');
			selectedFiltersContainer.innerHTML = '';

			const selectedTypes = Array.from(document.querySelectorAll('input[name="type"]:checked')).map(cb => ({
				name: "type",
				value: cb.value,
				text: cb.getAttribute('data-text'),
			}));

			const selectedTags = Array.from(document.querySelectorAll('input[name="tags"]:checked')).map(cb => ({
				name: "tags",
				value: cb.value,
				text: cb.value,
			}));

			const selectedStatus = Array.from(document.querySelectorAll('input[name="active"]:checked')).map(cb => ({
				name: "active",
				value: cb.value,
				text: cb.value === "true" ? "Aktiv" : "Inaktiv",
			}));

			const selectedOnline = Array.from(document.querySelectorAll('input[name="online"]:checked')).map(cb => ({
				name: "online",
				value: cb.value,
				text: cb.value === "true" ? "Online" : "Offline",
			}));

			const selectedFilters = [...selectedTypes, ...selectedTags, ...selectedStatus, ...selectedOnline];

			const svgIcon = `
				<svg class="h-4 w-4 fill-none stroke-primary-dark dark:stroke-white stroke-2 cursor-pointer" viewBox="0 0 24 24">
					<path d="M18 6 6 18"/><path d="m6 6 12 12"/>
				</svg>`;

			selectedFilters.forEach(filter => {
				const filterDiv = document.createElement('div');
				filterDiv.className = "flex items-center p-2 justify-center gap-1 rounded-full border-gray-30 dark:border-white-30 border capitalize";

				const filterText = document.createTextNode(filter.text);
				filterDiv.appendChild(filterText);

				const removeIcon = document.createElement('span');
				removeIcon.innerHTML = svgIcon;
				removeIcon.addEventListener('click', function() {
					const checkbox = document.querySelector(`input[name="${filter.name}"][value="${filter.value}"]`);
					if (checkbox) {
						checkbox.checked = false;
						checkbox.dispatchEvent(new Event('change')); 
					}
				});

				filterDiv.appendChild(removeIcon);
				selectedFiltersContainer.appendChild(filterDiv);
			});

			if (selectedFilters.length > 0) {
				const clearAllDiv = document.createElement('div');
				clearAllDiv.className = "flex items-center p-2 justify-center gap-1 rounded-full border-gray-30 dark:border-white-30 border cursor-pointer";
				clearAllDiv.textContent = "Rensa alla";

				clearAllDiv.addEventListener('click', function() {
					const allCheckedCheckboxes = document.querySelectorAll('input:checked');
					allCheckedCheckboxes.forEach(cb => {
						cb.checked = false;
					});

					document.getElementById('filterForm').dispatchEvent(new Event('submit', {cancelable: true}));
				});

				selectedFiltersContainer.appendChild(clearAllDiv);
			}

			if (selectedFilters.length === 0) {
				const noFilterDiv = document.createElement('div');
				noFilterDiv.className = "flex items-center p-2 justify-center gap-1 rounded-full italic";
				noFilterDiv.textContent = "Inga filter valda";
				selectedFiltersContainer.appendChild(noFilterDiv);
			}
		}

		document.addEventListener("DOMContentLoaded", updateSelectedFilters);
		document.body.addEventListener('htmx:afterOnLoad', updateSelectedFilters);
	</script>
}

templ ThingsTableComponent(l10n locale.Localizer, model ThingsListViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-dark-primary dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("name") }</th>
				<th class="px-6 py-3">{ l10n.Get("type") }</th>
				<th class="px-6 py-3 min-w-[200px]">{ l10n.Get("status") }</th>
				<th class="px-6 py-3">{ l10n.Get("tags") }</th>
			</tr>
		</thead>
		<tbody>
			for _, thing := range model.Things {
				@ThingRow(l10n, thing)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="4">
					@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ ThingRow(l10n locale.Localizer, thing ThingViewModel) {
	<tr
		class="border-b border-divider-gray border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20 hover:cursor-pointer"
		hx-get={ string(templ.SafeURL(fmt.Sprintf("/components/things/details?id=%s", thing.ThingID))) }
		hx-target="#things-view"
		hx-push-url={ string(templ.SafeURL(fmt.Sprintf("/things/%s", thing.ThingID))) }
		hx-trigger="click"
	>
		<td class="px-6 py-3">
			<span class="font-bold">
				if len(thing.Name) > 0 {
					{ thing.Name }
				} else {
					{ thing.ID }
				}
			</span>
		</td>
		<td class="px-6 py-3">{ l10n.Get(thing.Type) }</td>
		<td class="px-6 py-3 ">
			@ThingStatusCell(l10n, thing)
		</td>
		<td class="px-6 py-3 relative">
			@TagCell(l10n, thing)
		</td>
	</tr>
}

func TagCell(l10n locale.Localizer, thing ThingViewModel) templ.Component {
	if len(thing.Tags) == 0 {
		return templ.NopComponent
	}
	sortedTags := make([]string, len(thing.Tags))
	copy(sortedTags, thing.Tags)
	sort.Strings(sortedTags)
	
	return TagComponent(l10n, sortedTags)
}

templ TagComponent(l10n locale.Localizer, sortedTags []string) {
	for i, tag := range sortedTags {
		if i < 3 {
			<span class="dark:bg-primary-surface-dark dark:text-primary-dark px-2 py-1 mr-2 rounded-full text-sm border-gray-30 dark:border-white-30 border-2">
				{ tag }
			</span>
		}
	}
	if len(sortedTags) > 3 {
		<span class="dark:text-secondary px-2 py-1 text-sm relative group cursor-pointer">
			{ fmt.Sprintf("+ %d %s", len(sortedTags)-3, l10n.Get("more")) }
			<div class="absolute hidden z-10 flex flex-col group-hover:block bg-background-100 dark:bg-gray-800 shadow-lg rounded-lg p-2 right-0">
				for i, tag := range sortedTags {
					if i >= 3 {
						<div class="flex self-stretch dark:bg-primary-surface-dark dark:text-primary-dark px-2 py-1 mt-2 rounded-full text-sm border-gray-30 dark:border-white-30 border-2">
							{ tag }
						</div>
					}
				}
			</div>
		</span>
	}
}

func ThingsTable(l10n locale.Localizer, model ThingsListViewModel) templ.Component {
	if model.MapView {
		return templ.NopComponent
	}
	return ThingsTableComponent(l10n, model)
}

func ThingStatusCell(l10n locale.Localizer, thing ThingViewModel) templ.Component {
	switch strings.ToLower(thing.Type) {
	case "combinedsewageoverflow":
		return CombinedSewageOverflowCell(l10n, thing)
	case "wastecontainer":
		return WasteContainerCell(l10n, thing)
	case "sewer":
		return SewerCell(l10n, thing)
	case "sewagepumpingstation":
		return SewagePumpingstationCell(l10n, thing)
	case "passage":
		return PassageCell(thing)
	default:
		return templ.NopComponent
	}
}

func CombinedSewageOverflowCell(l10n locale.Localizer, thing ThingViewModel) templ.Component {
	i := slices.IndexFunc(thing.Measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3350/5850") // Stopwatch/OnOff
	})

	if i == -1 {
		return templ.NopComponent
	}

	state := l10n.Get("Ok")
	if *thing.Measurements[i].BoolValue {
		state = l10n.Get("overflow")
	}

	return Text(state)
}

func SewagePumpingstationCell(l10n locale.Localizer, thing ThingViewModel) templ.Component {
	i := slices.IndexFunc(thing.Measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3200/5500") // Digital Input/Digital Input State
	})

	if i == -1 || thing.Measurements[i].BoolValue == nil {
		return templ.NopComponent
	}

	state := "Ok"
	if *thing.Measurements[i].BoolValue {
		state = l10n.Get("Pumpar")
	}

	return Text(state)
}

func SewerCell(l10n locale.Localizer, thing ThingViewModel) templ.Component {
	i := slices.IndexFunc(thing.Measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3330/5700") // Distance/Sensor value
	})

	if i == -1 || thing.Measurements[i].Value == nil {
		return templ.NopComponent
	}

	return Text(fmt.Sprintf("%.2f%s", *thing.Measurements[i].Value, thing.Measurements[i].Unit))
}

func WasteContainerCell(l10n locale.Localizer, t ThingViewModel) templ.Component {
	v, ok := t.FillingLevel()
	if !ok {
		return Text(l10n.Get("noData"))
	}

	i := slices.IndexFunc(t.Measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3435/2") // Filling level/Actual filling percentage
	})

	value := int(v)
	text := fmt.Sprintf("%d%s", value, t.Measurements[i].Unit)
	//text := fmt.Sprintf("%d%s (%s)", value, t.Measurements[i].Unit, t.Measurements[i].Timestamp.Format("2006-01-02 15:04:05"))

	colourClass := ""
	switch {
	case value >= 51:
		colourClass = "bg-red-600 dark:bg-err-prim-surf"
	case value <= 30:
		colourClass = "bg-green-700 dark:bg-primary-surface-green-accent"
	default:
		colourClass = "bg-orange-600 dark:bg-primary-surface-orange-accent"
	}

	return ProgressBar(colourClass, text, value)
}

templ PassageCell(t ThingViewModel) {
	<div hx-disinherit="*">
		<div
			class=""
			hx-get={ fmt.Sprintf("/components/things/measurements/%s/current?sensorMeasurementTypes=%s", t.Type, peopleCounterSensor(t.Measurements)) }
			hx-trigger="load"
		>0 st</div>
	</div>
}

func ThingsMap(l10n locale.Localizer, model ThingsListViewModel) templ.Component {
	if !model.MapView {
		return templ.NopComponent
	}
	mapData := newMapData(62.3908, 17.3069)
	mapData.CurrentView = "thing"
	return Map("large", true, false, mapData, thingsToMapFeature(l10n, model.Things))
}

func thingsToMapFeature(l10n locale.Localizer, things []ThingViewModel) FeatureCollection {
	features := make([]Feature, 0, len(things))

	for _, thing := range things {
		if thing.Latitude == 0 || thing.Longitude == 0 {
			continue
		}
		feature := NewFeature(NewPoint(thing.Latitude, thing.Longitude))
		feature.AddProperty("type", strings.ToLower(thing.Type))
		feature.AddProperty("id", thing.ID)

		if len(thing.Tags) > 0 {
			feature.AddProperty("tags", thing.Tags)
		} else {
			feature.AddProperty("tags", nil)
		}

		if strings.ToLower(thing.Type) == "wastecontainer" {
			fl, ok := thing.FillingLevel()
			if ok {
				var state string
				if fl >= 51 {
					state = "red"
				} else if fl > 31 {
					state = "orange"
				} else {
					state = "green"
				}
				feature.AddProperty("fillinglevel", fmt.Sprintf("%0.f", fl))
				feature.AddProperty("state", state) 
			} else {
				feature.AddProperty("fillinglevel", "") // Eller 0 om det inte finns data
				feature.AddProperty("state", "green") 
			}
		}

		if strings.ToLower(thing.Type) == "combinedsewageoverflow" {
			i := slices.IndexFunc(thing.Measurements, func(m MeasurementViewModel) bool {
				return strings.HasSuffix(m.ID, "3350/5850") // ID för Combined Sewage Overflow/Stopwatch/OnOff
			})

			if i != -1 && thing.Measurements[i].BoolValue != nil {
				var state string
				if *thing.Measurements[i].BoolValue {
					state = l10n.Get("overflow") // Exempelvis när översvämning detekteras
				} else {
					state = l10n.Get("Ok") // Exempelvis normalt tillstånd
				}

				feature.AddProperty("state", state) // Lägg till "state" som egenskap i feature
			} else {
				feature.AddProperty("state", "nil") // Hantera fallet där det inte finns data
			}
		}

		feature.AddProperty("latitude", thing.Latitude)
		feature.AddProperty("longitude", thing.Longitude)
		feature.AddProperty("url", fmt.Sprintf("/things/%s", thing.ThingID))

		//Språkstöd
		feature.AddProperty("text_fillinglevel", l10n.Get("fillinglevel"))
		feature.AddProperty("text_id", l10n.Get("id"))
		feature.AddProperty("text_information", l10n.Get("information"))
		feature.AddProperty("text_overflow", l10n.Get("overflow"))
		feature.AddProperty("text_moreinformation", l10n.Get("moreinformation"))
		feature.AddProperty("text_position", l10n.Get("location"))
		feature.AddProperty("text_tags", l10n.Get("tags"))

		features = append(features, feature)
	}

	return NewFeatureCollection(features)
}

func peopleCounterSensor(measurements []MeasurementViewModel) string {
	i := slices.IndexFunc(measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3200/5500") // People counter/Actual number of persons
	})

	if i == -1 {
		return ""
	}

	return measurements[i].ID
}

func fillingLevelSensor(model ThingDetailsViewModel) string {
	i := slices.IndexFunc(model.Measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3435/2") // Filling level/Actual filling percentage
	})

	if i == -1 {
		return fmt.Sprintf("%s/3435/2", model.RelatedDevice)
	}

	return model.Measurements[i].ID
}

func fillingLevel(measurements []MeasurementViewModel) float64 {
	i := slices.IndexFunc(measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3435/2") // Filling level/Actual filling percentage
	})

	if i == -1 || measurements[i].Value == nil {
		return 0
	}

	return *measurements[i].Value
}

func digitalInputSensor(measurements []MeasurementViewModel) string {
	i := slices.IndexFunc(measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3200/5500") // Digital input/Digital Input State
	})

	if i == -1 {
		return ""
	}

	return measurements[i].ID
}
