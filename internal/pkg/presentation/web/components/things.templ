package components

import (
	"fmt"
	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
	"github.com/diwise/diwise-web/internal/pkg/presentation/web/assets"
)

type ThingViewModel struct {
	ThingID   string
	ID        string
	Type      string
	Latitude  float64
	Longitude float64
	Tenant    string
}

type ThingListViewModel struct {
	Things     []ThingViewModel
	Statistics StatisticsViewModel
}

script toggleDropdownStatus() {
    //Dropdown Typ
    var dropdownMenuStatus = document.getElementById("dropdownMenuStatus");
    dropdownMenuStatus.classList.toggle("hidden");
}

script toggleDropdownType() {
    //Dropdown Typ
    var dropdownMenuType = document.getElementById("dropdownMenuType");
    dropdownMenuType.classList.toggle("hidden");
}

script toggleDropdownFillingLevel() {
    var dropdownMenuFillingLevel = document.getElementById("dropdownMenuFillingLevel");
    dropdownMenuFillingLevel.classList.toggle("hidden");
}

script toggleDropdownArea() {
    var dropdownMenuArea = document.getElementById("dropdownMenuArea");
    dropdownMenuArea.classList.toggle("hidden");
}

//Stäng om man klickar utanför

/*//Dropdown Område
  function toggleDropdown() {
      var dropdownMenu = document.getElementById("dropdownMenu");
      dropdownMenu.classList.toggle("hidden");
  }

  window.onclick = function(event) {
      var dropdownButton = document.getElementById("dropdownButton");
      var dropdownMenu = document.getElementById("dropdownMenu");
      // Kontrollera om klicket är utanför både knappen och menyn
      if (!dropdownMenu.contains(event.target) && !dropdownButton.contains(event.target)) {
          dropdownMenu.classList.add("hidden");
      }
  }*/

templ ThingsDetailPage(l10n locale.Localizer, asset assets.AssetLoaderFunc, thing ThingDetailsViewModel) {
	<div class="flex flex-col items-start gap-14 flex-[1_0_0] py-8 w-full" id="things-view">
		@ThingDetails(l10n, asset, thing)
	</div>
}

templ ThingTable(l10n locale.Localizer, asset assets.AssetLoaderFunc, things ThingListViewModel) {
	@Table(
		HeaderRow(TableHeaderText(l10n.Get("name")), TableHeaderText(l10n.Get("id")), TableHeaderText(l10n.Get("measurementvalue")), TableHeaderText(l10n.Get("status"))),
		TableData(tableRowsFromThings(asset, things.Things)...),
		DataTableFooter("4", "things"),
	)
}

templ Things(l10n locale.Localizer, asset assets.AssetLoaderFunc, things ThingListViewModel) {
	<div class="flex flex-col items-start gap-14 flex-[1_0_0] py-8 w-full" id="things-view">
		<div class="flex flex-col items-start gap-6 self-stretch w-full px-8">
			<div class="flex items-center w-full justify-between">
				<h1 class="dark:text-white text-2xl font-bold font-heading leading-loose">{ l10n.Get("things") }</h1>
				//TODO: Target för Lägg till ny sak
				@Button(Primary, l10n.Get("addthing"), "", HxUrl("get", (fmt.Sprintf("/components/things"))))
			</div>
			@SumOfStuff(l10n, things.Statistics)
		</div>
		<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
		<div class="flex px-8 flex-col items-start self-stretch gap-10">
			<div class="w-full h-12 justify-between items-center inline-flex">
				<div class="inline-flex justify-start items-center gap-[34px] dark:text-white">
					//@SearchField(l10n)
				</div>
				//@tableMapSwitch("list", "Lista", iconSVG("list"))
				//@tableMapSwitch("mapview", "Karta", iconSVG("map"))
				@mapTableButtons(l10n)
			</div>
			//@PickedFilters()	
			<div id="tableOrMap" class="w-full flex flex-col gap-6 items-start inline-flex">
				//Initialt listinnehåll
				<div id="things-table" class="w-full">
					@ThingTable(l10n, asset, things)
				</div>
			</div>
			//Innehåll dolt, hämtas när man klickar på Lista/Karta
			<div id="fragments" style="display: none;">
				<div id="table" class="w-full">
					<div id="things-table" class="w-full">
						@ThingTable(l10n, asset, things)
					</div>
				</div>
				<div id="mapview" class="w-full">
					@Map(newMapData(62.3908, 17.3069))
				</div>
			</div>
		</div>
	</div>
}

//HELPERS
func tableRowsFromThings(_ assets.AssetLoaderFunc, things []ThingViewModel) []templ.Component {
	rows := []templ.Component{}

	for _, thing := range things {
		cells := []templ.Component{TextFirstCell(thing.ThingID)}
		cells = append(cells, TextCell(thing.ID))
		cells = append(cells, TextCell(thing.Type))
		cells = append(cells, ProgressBarCell("45"))

		linkUrl := templ.URL(fmt.Sprintf("/components/things/details?id=%s", thing.ThingID))
		pushUrl := templ.URL(fmt.Sprintf("/things/%s", thing.ThingID))

		row := LinkRow(cells, linkUrl, pushUrl, "things")
		rows = append(rows, row)
	}

	return rows
}

templ PickedFilters() {
	<div class="flex flex-col gap-4 w-full">
		<div class="w-full h-10 justify-items-start inline-flex text-primary-dark dark:text-white gap-3">
			<div class="flex items-center justify-start text-left px-6 border-2 border-gray-30 border-opacity-30 dark:border-white-30 rounded-xl">
				Soptunna
				<svg class="w-[24px] h-[24px] stroke-primary-dark stroke-2 dark:stroke-white">
					@templ.Raw(iconSVG("close"))
				</svg>
			</div>
			<div class="flex items-center justify-start text-left px-6 border-2 border-gray-30 border-opacity-30 dark:border-white-30 rounded-xl">
				Centrum
				<svg class="w-[24px] h-[24px] stroke-primary-dark stroke-2 dark:stroke-white">
					@templ.Raw(iconSVG("close"))
				</svg>
			</div>
			<div class="flex items-center justify-start text-left px-6 border-2 border-gray-30 border-opacity-30 dark:border-white-30 rounded-xl">
				Kvissleby
				<svg class="w-[24px] h-[24px] stroke-primary-dark stroke-2 dark:stroke-white">
					@templ.Raw(iconSVG("close"))
				</svg>
			</div>
			<div class="flex items-center justify-start text-left px-6 border-2 border-gray-30 border-opacity-30 dark:border-white-30 rounded-xl">
				0-70%
				<svg class="w-[24px] h-[24px] stroke-primary-dark stroke-2 dark:stroke-white">
					@templ.Raw(iconSVG("close"))
				</svg>
			</div>
		</div>
	</div>
}