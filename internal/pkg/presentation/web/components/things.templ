package components

import (
	"fmt"
	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
	"slices"
	"strings"
	"time"
)

type ThingsListViewModel struct {
	Things  []ThingViewModel
	Pageing PagingViewModel
}

type MeasurementViewModel struct {
	ID          string    `json:"id"`
	Timestamp   time.Time `json:"timestamp"`
	Urn         string    `json:"urn"`
	BoolValue   *bool     `json:"vb,omitempty"`
	StringValue string    `json:"vs,omitempty"`
	Unit        string    `json:"unit,omitempty"`
	Value       *float64  `json:"v,omitempty"`
}

type ThingViewModel struct {
	ThingID      string
	ID           string
	Type         string
	Latitude     float64
	Longitude    float64
	Tenant       string
	Measurements []MeasurementViewModel
}

templ ThingsTable(l10n locale.Localizer, model ThingsListViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-dark-primary dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("ID") }</th>
				<th class="px-6 py-3">{ l10n.Get("Typ") }</th>
				<th class="px-6 py-3">{ l10n.Get("Status") }</th>
			</tr>
		</thead>
		<tbody>
			@ThingsRows(l10n, model.Things)
		</tbody>
		<tfoot>
			<tr>
				<td colspan="3">
					@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ ThingsRows(l10n locale.Localizer, things []ThingViewModel) {
	for _, thing := range things {
		@ThingRow(l10n, thing)
	}
}

templ ThingRow(l10n locale.Localizer, thing ThingViewModel) {
	<tr
		class="border-b border-divider-gray border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20 hover:cursor-pointer"
		hx-get={ string(templ.SafeURL(fmt.Sprintf("/components/things/details?id=%s", thing.ThingID))) }
		hx-target="#thing-view"
		hx-push-url={ string(templ.SafeURL(fmt.Sprintf("/things/%s", thing.ThingID))) }
		hx-trigger="click"
	>
		<td class="px-6 py-3"><span class="font-bold">{ thing.ID }</span></td>
		<td class="px-6 py-3">{ thing.Type }</td>
		<td class="px-6 py-3">
			@ThingStatusCell(l10n, thing)
		</td>
	</tr>
}

func ThingStatusCell(l10n locale.Localizer, thing ThingViewModel) templ.Component {
	switch strings.ToLower(thing.Type) {
	case "combinedsewageoverflow":
		return CombinedSewageOverflowCell(l10n, thing)
	case "wastecontainer":
		return WasteContainerCell(l10n, thing)
	case "sewer":
		return SewerCell(l10n, thing)
	case "sewagepumpingstation":
		return SewagePumpingstationCell(l10n, thing)
	default:
		return templ.NopComponent
	}
}

func CombinedSewageOverflowCell(l10n locale.Localizer, thing ThingViewModel) templ.Component {
	i := slices.IndexFunc(thing.Measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3350/5850") // Stopwatch/OnOff
	})

	if i == -1 {
		return templ.NopComponent
	}

	state := l10n.Get("Ok")
	if *thing.Measurements[i].BoolValue {
		state = l10n.Get("Bräddar")
	}

	return Text(state)
}

func SewagePumpingstationCell(l10n locale.Localizer, thing ThingViewModel) templ.Component {
	i := slices.IndexFunc(thing.Measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3200/5500") // Digital Input/Digital Input State
	})

	if i == -1 || thing.Measurements[i].BoolValue == nil {
		return templ.NopComponent
	}

	state := "Ok"
	if *thing.Measurements[i].BoolValue {
		state = l10n.Get("Pumpar")
	}

	return Text(state)
}

func SewerCell(l10n locale.Localizer, thing ThingViewModel) templ.Component {
	i := slices.IndexFunc(thing.Measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3330/5700") // Distance/Sensor value
	})

	if i == -1 || thing.Measurements[i].Value == nil {
		return templ.NopComponent
	}

	return Text(fmt.Sprintf("%.2f%s", *thing.Measurements[i].Value, thing.Measurements[i].Unit))
}

func WasteContainerCell(l10n locale.Localizer, t ThingViewModel) templ.Component {
	i := slices.IndexFunc(t.Measurements, func(m MeasurementViewModel) bool {
		return strings.HasSuffix(m.ID, "3435/2") // Filling level/Actual filling percentage
	})

	if i == -1 {
		return templ.NopComponent
	}

	return ProgressBar(fmt.Sprintf("pb_%s", t.ID), int(*t.Measurements[i].Value))
}

templ TableOrMapButtons(l10n locale.Localizer) {
	<div class="w-full h-12 justify-between items-center inline-flex">
		<div class="inline-flex justify-start items-center gap-[34px] dark:text-white">
			<div class="flex items-center flex-[1_0_0] gap-6">
				@CheckboxList(l10n.Get("Typ")) {
					for _, t := range []string{"combinedsewageoverflow", "wastecontainer", "sewer", "sewagepumpingstation"} {
						@CheckboxOption("type", t, templ.Attributes{
							"hx-get":    string(templ.SafeURL("/components/tables/things")),
							"hx-target": "#things-table",
						})
					}
				}
			</div>
		</div>
		<div class="flex items-center self-stretch gap-6">
			<div class="flex p-2 items-center gap-4 bg-tertiary-surface bg-opacity-20 dark:bg-primary-surface-white rounded-2xl gap-2">
				<div class="relative group">
					<button id="tableButton" class="flex p-1.5 rounded-[10px] justify-center items-center gap-1 cursor-pointer bg-black fill-white dark:bg-white dark:fill-black stroke-white dark:stroke-black hover:bg-tertiary-surface-hover"><svg class="w-[18px] h-[18px]"><svg class="fill-none dark:fill-none h-6 w-6" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path fill-rule="evenodd" d="M12 3v18"></path><rect width="18" height="18" x="3" y="3" rx="2"></rect><path d="M3 9h18"></path><path d="M3 15h18"></path></svg></svg></button>
					<div class="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 hidden group-hover:block"><svg class="w-[40px] h-[8px] absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-full"><svg class="w-5 h-5 fill-black dark:fill-white" viewBox="0 0 41 8"><g fill-rule="evenodd" id="Tip" clip-path="url(#clip0_1424_3946)"><rect id="Rectangle 1" x="6.5" y="16" width="20" height="20" transform="rotate(-45 6.5 16)"></rect></g><defs><clipPath id="clip0_1424_3946"><rect width="40" height="8" transform="translate(0.5)"></rect></clipPath></defs></svg></svg><div class="bg-primary-surface text-white dark:bg-white dark:text-black rounded-lg shadow-lg flex py-2 px-4 items-center gap-1.5 text-sm font-bold font-sans leading-[18px]">{ l10n.Get("Tabell") }</div></div>
				</div>
				<div class="relative group">
					<button id="mapButton" class="flex p-1.5 rounded-[10px] justify-center items-center gap-1 cursor-pointer dark:fill-white hover:bg-tertiary-surface-hover"><svg class="w-[18px] h-[18px]"><path fill-rule="evenodd" d="M16.144 1.612a.75.75 0 0 1 .356.638V13.5a.75.75 0 0 1-.415.67l-4.5 2.25a.75.75 0 0 1-.67 0L6.75 14.339l-4.165 2.083A.75.75 0 0 1 1.5 15.75V4.5a.75.75 0 0 1 .415-.67l4.5-2.25a.75.75 0 0 1 .67 0L11.25 3.66l4.165-2.082a.75.75 0 0 1 .73.033ZM3 4.964v9.572l3.415-1.707a.75.75 0 0 1 .67 0l4.165 2.082L15 13.037V3.463L11.585 5.17a.75.75 0 0 1-.67 0L6.75 3.089 3 4.964Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M6.75 1.5a.75.75 0 0 1 .75.75V13.5a.75.75 0 0 1-1.5 0V2.25a.75.75 0 0 1 .75-.75ZM11.25 3.75a.75.75 0 0 1 .75.75v11.25a.75.75 0 0 1-1.5 0V4.5a.75.75 0 0 1 .75-.75Z" clip-rule="evenodd"></path></svg></button>
					<div class="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 hidden group-hover:block"><svg class="w-[40px] h-[8px] absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-full"><svg class="fill-black dark:fill-white w-5 h-5" viewBox="0 0 41 8"><g fill-rule="evenodd" id="Tip" clip-path="url(#clip0_1424_3946)"><rect id="Rectangle 1" x="6.5" y="16" width="20" height="20" transform="rotate(-45 6.5 16)"></rect></g><defs><clipPath id="clip0_1424_3946"><rect width="40" height="8" transform="translate(0.5)"></rect></clipPath></defs></svg></svg><div class="bg-primary-surface text-white dark:bg-white dark:text-black rounded-lg shadow-lg flex py-2 px-4 items-center gap-1.5 text-sm font-bold font-sans leading-[18px]">{ l10n.Get("Karta") }</div></div>
				</div>
			</div>
		</div>
	</div>
}

templ ThingsList(l10n locale.Localizer, model ThingsListViewModel) {
	<div class="flex flex-col items-start gap-14 flex-[1_0_0] py-8 w-full" id="things-view">
		<div class="flex flex-col items-start gap-6 self-stretch w-full px-8">
			<div class="flex items-center w-full justify-between">
				<h1 class="dark:text-white text-2xl font-bold font-heading leading-loose">Saker</h1>
				<div class="flex items-center text-white dark:text-dark-primary font-bold">
					<button class="flex justify-center items-center gap-2 px-4 py-2 bg-primary-surface hover:bg-primary-surface-hover dark:bg-primary-surface-dark dark:hover:bg-primary-surface-dark-hover rounded-xl cursor-pointer" hx-get="/components/things" hx-trigger="click">Lägg till ny sak</button>
				</div>
			</div>
		</div>
		<div class="h-px border-t border-divider-gray w-full dark:border-divider-white"></div>
		<div class="flex px-8 flex-col items-start self-stretch gap-10">
			@TableOrMapButtons(l10n)
			<div id="tableOrMap" class="w-full flex flex-col gap-6 items-start inline-flex">
				<div id="things-table" class="w-full">
					@ThingsTable(l10n, model)
				</div>
			</div>
		</div>
	</div>
}
