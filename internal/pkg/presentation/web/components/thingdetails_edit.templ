package components

import (
	"fmt"
	. "github.com/diwise/frontend-toolkit"
	"strings"
)

templ EditThingDetails(l10n Localizer, asset AssetLoaderFunc, model ThingDetailsViewModel) {
	<div class="w-full">
		<div class="flex items-center w-full justify-between">
			if model.Thing.Name == "" {
				<div class="flex items-center align-middle">
					<h1 class="py-3">{ model.Thing.ID }</h1>
				</div>
			} else {
				<div class="flex items-center gap-6 align-middle">
					<h1 class="text-primary-dark dark:text-white text-2xl font-bold font-heading leading-loose">{ l10n.Get("edit") } { model.Thing.Name }</h1>
				</div>
			}
		</div>
		<form>
			<div class="w-full flex py-6 gap-10 text-primary-dark dark:text-white">
				<div class="flex flex-col items-start gap-20 flex-[1_0_0]">
					//Status och uppgifter
					<div class="flex flex-col items-start self-stretch">
						<div class="flex items-center gap-3 self-stretch">
							//Rubrik uppgifter
							@SVG("info", Size(24), NoFill(), Box(24, 24), StrokeColor("primary-dark", "zinc-100"), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
							<h2 class="font-heading text-xl font-bold">{ l10n.Get("details") }</h2>
							<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
						</div>
						<div class="flex flex-col items-start self-stretch gap-6 py-6 px-9">
							//Uppgifter
							<div class="flex flex-start gap-10 self-stretch">
								<div class="flex flex-col gap-2 flex-1">
									<div class="font-bold">{ l10n.Get("thingtype") }</div>
									<div class="">
										{ l10n.Get(model.Thing.Type) }
									</div>
								</div>
								if model.Thing.SubType != "" {
									<div class="flex flex-col gap-2 flex-1">
										<div class="font-bold">{ l10n.Get("category") }</div>
										<div class="">
											{ l10n.Get(model.Thing.SubType) }
										</div>
									</div>
								}
							</div>
							<div class="flex flex-start gap-10 self-stretch">
								<div class="flex flex-col gap-2 flex-1">
									<div class="font-bold">{ l10n.Get("name") }</div>
									<input
										type="text"
										name="name"
										class="border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl p-2"
										placeholder=""
										value={ model.Thing.Name }
									/>
								</div>
								<div class="flex flex-col gap-2 flex-1">
									<div class="font-bold">{ l10n.Get("alternativeName") }</div>
									<input
										type="text"
										name="alternativeName"
										class="border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl p-2"
										placeholder=""
										value={ model.Thing.AlternativeName }
									/>
								</div>
							</div>
							<div class="flex flex-start gap-10 self-stretch">
								<div class="flex flex-col gap-2 flex-1">
									<div class="font-bold">{ l10n.Get("organisation") }</div>
									<div class="border border-input-surface rounded-xl">
										<label for="organisation" class="hidden block text-sm font-medium text-gray-700">
											{ l10n.Get("pickOption") }
										</label>
										@OrganisationSelect(l10n, asset, "organisation", model.Thing.Tenant, model.Organisations)
									</div>
								</div>
							</div>
							@editThingDetailType(l10n, model)
							//Lägg till taggar
							<div class="flex flex-start self-stretch">
								<div class="flex flex-col gap-6 flex-1">
									<div class="flex flex-col gap-2 flex-1">
										<div class="font-bold">{ l10n.Get("tags") }</div>
										<div class="flex items-center gap-2 self-stretch text-sm dark:text-white">
											<div id="selectedTagContainer" class="flex items-center gap-2 flex-wrap overflow-hidden max-w-full"></div>
										</div>
									</div>
									<div class="flex flex-start self-stretch gap-3">
										<div class="relative inline-block w-full border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl">
											<input
												list="tag-options"
												name="tags"
												placeholder={ l10n.Get("addtag") }
												class="text-sm p-2 rounded-xl w-full block focus:outline-none dark:border-white-50 dark:bg-input-surface-dark"
												id="tagInput"
											/>
											<datalist id="tag-options">
												for _, t := range model.Tags {
													<option value={ t }>{ t }</option>
												}
											</datalist>
											<div class="pointer-events-none absolute bg-white dark:bg-input-surface-dark rounded-xl inset-y-0 right-0 flex items-center px-2 text-gray-700">
												<svg class="w-[18px] h-[18px] dark:fill-white">
													@templ.Raw(iconSVG("chevron-down"))
												</svg>
											</div>
										</div>
										<div id="addTagButton" class="flex gap-2 rounded-xl whitespace-nowrap cursor-pointer font-bold px-4 py-2 bg-tertiary-surface rounded-xl hover:bg-tertiary-surface-hover dark:bg-primary-surface-white dark:hover:bg-white-30 text-primary-dark dark:text-white">
											{ l10n.Get("add") }
										</div>
									</div>
									<!-- Ett hidden input för alla taggar separerade med kommatecken, förifylld från backend -->
									<input type="hidden" id="selectedTags" name="selectedTags" value={ strings.Join(model.Thing.Tags, ",") }/>
								</div>
							</div>
							<div class="flex flex-start gap-10 self-stretch">
								<div class="flex flex-col gap-2 flex-[1_0_0]">
									<div class="font-bold">{ l10n.Get("description") }</div>
									<textarea type="text" name="description" class="w-full min-h-[150px] border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl p-2" placeholder={ l10n.Get("description") }>
										{ model.Thing.Description }
									</textarea>
								</div>
							</div>
						</div>
					</div>
				</div>
				//Vertikal gray-30 mellan uppgifter och position
				<div class="flex flex-col items-start self-stretch gap-2 border-l border-gray-30 dark:border-white-30 h-auto"></div>
				//Position
				<div class="flex flex-col items-start gap-20 flex-[1_0_0]">
					<div class="flex flex-col items-start self-stretch">
						//Karta
						<div class="flex items-center gap-3 self-stretch">
							//Position rubrik
							@SVG("map-pin", Size(24), NoFill(), Box(24, 24), StrokeColor("primary-dark", "zinc-100"), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
							<h2 class="font-heading text-xl font-bold">{ l10n.Get("location") }</h2>
							<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
						</div>
						<div class="flex flex-col items-start self-stretch gap-6 py-6 px-9">
							//Position
							<div class="flex flex-start gap-10 self-stretch">
								<div class="flex flex-col gap-2 flex-[1_0_0]">
									<div class="font-bold">{ l10n.Get("latitude") }</div>
									<input
										type="number"
										name="latitude"
										id="latitude"
										min="-90"
										max="90"
										step="0.000001"
										value={ fmt.Sprintf("%f", model.Thing.Latitude) }
										class="w-auto h-[40px] border border-input-surface dark:border-white-50 dark:bg-input-surface-dark font-bold focus:ring-0 placeholder-gray-500 rounded-xl p-2"
										placeholder="Latitud"
									/>
								</div>
								<div class="flex flex-col gap-2 flex-[1_0_0]">
									<div class="font-bold">{ l10n.Get("longitude") }</div>
									<input
										type="number"
										name="longitude"
										id="longitude"
										min="-180"
										max="180"
										step="0.000001"
										value={ fmt.Sprintf("%f", model.Thing.Longitude) }
										class="w-auto h-[40px] border border-input-surface dark:border-white-50 dark:bg-input-surface-dark font-bold focus:ring-0 placeholder-gray-500 rounded-xl p-2"
										placeholder="Longitud"
									/>
								</div>
							</div>
							@Map("medium", false, true, newMapData(model.Thing.Latitude, model.Thing.Longitude), thingsToMapFeature(l10n, []ThingViewModel{model.Thing}))
						</div>
					</div>
				</div>
			</div>
			<div class="h-px border-t border-gray-30 dark:border-white-30 w-full"></div>
			<div class="flex items-center justify-between py-6">
				@Button(Error, l10n.Get("delete"), "trashcan",
					Target("#modalDeleteThingContainer"),
					HxUrl("delete", "/components/things/"+model.Thing.ID),
					Trigger("click"),
					Swap("innerHTML"))
				<div class="flex items-center gap-4">
					@Button(Secondary, l10n.Get("cancel"), "close",
						Name("cancel"),
						HxUrl("get", fmt.Sprintf("/components/things/%s", model.Thing.ID)),
						Target("#things-view"))
					@Button(Primary, l10n.Get("save"), "check",
						Name("save"),
						BtnType("submit"),
						Target("#things-view"),
						HxUrl("post", fmt.Sprintf("/components/things/%s", model.Thing.ID)))
				</div>
				<div id="modalDeleteThingContainer" class="hidden fixed inset-0 bg-gray-30 z-50 flex items-start justify-center"></div>
				<script>
					document.getElementById('modalDeleteThingContainer').addEventListener('htmx:afterSwap', function() {
						document.getElementById('modalDeleteThingContainer').classList.remove('hidden');
					});
				</script>
			</div>
		</form>
	</div>
}

templ ConnectOneSensor(l10n Localizer, model ThingDetailsViewModel) {
	<div class="flex flex-start self-stretch">
		<div class="flex flex-col gap-2 flex-1">
			<div class="font-bold">{ l10n.Get("sensorconnected") }</div>
			if len(model.Thing.RefDevice) == 0 {
				<div class="italic text-secondary-outline-hover dark:text-secondary">{ l10n.Get("sensormissing") }</div>
			}
			<div class="relative inline-block w-full border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl">
				//<input type="hidden" name="currentDevice" value={ model.Thing.RefDevice[0] }/>
				<input
					list="sensor-options"
					name="currentDevice"
					placeholder={ l10n.Get("picksensor") }
					class="text-sm p-2 rounded-xl w-full block focus:outline-none dark:border-white-50 dark:bg-input-surface-dark"
					value={ model.Thing.RefDevice[0] }
					id="sensorInput"
				/>
				<datalist id="sensor-options">
					for _, sensor := range model.ValidSensors {
						<option value={ sensor.DeviceID }>{ fmt.Sprintf("%s (%s)", sensor.SensorID, sensor.Decoder) }</option>
					}
				</datalist>
				<div class="pointer-events-none absolute bg-white dark:bg-input-surface-dark rounded-xl inset-y-0 right-0 flex items-center px-2 text-gray-700">
					<svg class="w-[18px] h-[18px] dark:fill-white">
						@templ.Raw(iconSVG("chevron-down"))
					</svg>
				</div>
			</div>
		</div>
	</div>
}

templ ConnectMultipleSensors(l10n Localizer, model ThingDetailsViewModel) {
	<div class="flex flex-start self-stretch">
		<div class="flex flex-col gap-6 flex-1">
			<div class="flex flex-col gap-2 flex-1">
				<div class="font-bold">{ l10n.Get("sensorconnected") }</div>
				<div class="flex items-center gap-2 self-stretch text-sm dark:text-white">
					<div id="selectedSensorContainer" class="flex items-center gap-2 flex-wrap overflow-hidden max-w-full"></div>
				</div>
			</div>
			<div class="flex flex-start self-stretch gap-3">
				<div class="relative inline-block w-full border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl">
					<input
						list="sensor-options"
						name="relatedDevice"
						placeholder={ l10n.Get("picksensor") }
						class="text-sm p-2 rounded-xl w-full block focus:outline-none dark:border-white-50 dark:bg-input-surface-dark"
						id="sensorInput"
					/>
					<datalist id="sensor-options">
						for _, sensor := range model.ValidSensors {
							<option value={ sensor.DeviceID }>{ fmt.Sprintf("%s (%s)", sensor.SensorID, sensor.Decoder) }</option>
						}
					</datalist>
					<div class="pointer-events-none absolute bg-white dark:bg-input-surface-dark rounded-xl inset-y-0 right-0 flex items-center px-2 text-gray-700">
						<svg class="w-[18px] h-[18px] dark:fill-white">
							@templ.Raw(iconSVG("chevron-down"))
						</svg>
					</div>
				</div>
				<div id="addSensorButton" class="flex gap-2 rounded-xl whitespace-nowrap cursor-pointer font-bold px-4 py-2 bg-tertiary-surface rounded-xl hover:bg-tertiary-surface-hover dark:bg-primary-surface-white dark:hover:bg-white-30 text-primary-dark dark:text-white">
					{ l10n.Get("add") }
				</div>
			</div>
			<!-- Ett hidden input för alla sensorer separerade med kommatecken, förifylld från backend -->
			<input type="hidden" id="selectedSensors" name="currentDevice" value={ strings.Join(model.Thing.RefDevice, ",") }/>
		</div>
	</div>
}

func editThingDetailType(l10n Localizer, model ThingDetailsViewModel) templ.Component {
	thingType := strings.ToLower(model.Thing.Type)
	subType := strings.ToLower(model.Thing.SubType)

	if subType != "" {
		thingType = subType
	}

	switch thingType {
	case "beach":
		return ConnectOneSensor(l10n, model)
	case "pointofinterest":
		return templ.NopComponent
	case "building":
		return ConnectMultipleSensors(l10n, model)
	case "wastecontainer":
		return EditWasteContainer(l10n, model)
	case "sandstorage":
		return EditSandStorage(l10n, model)
	case "container":
		return EditWasteContainer(l10n, model)
	case "lifebuoy":
		return ConnectOneSensor(l10n, model)
	case "passage":
		return ConnectOneSensor(l10n, model)
	case "pumpingstation":
		return ConnectOneSensor(l10n, model)
	case "room":
		return ConnectMultipleSensors(l10n, model)
	case "sewer":
		return ConnectMultipleSensors(l10n, model)
	case "watermeter":
		return ConnectOneSensor(l10n, model)
	}
	return templ.NopComponent
}

templ EditSandStorage(l10n Localizer, model ThingDetailsViewModel) {
	@EditHeightAndLevel(l10n, model)
	@EditAngle(l10n, model)
	@ConnectMultipleSensors(l10n, model)
}

templ EditWasteContainer(l10n Localizer, model ThingDetailsViewModel) {
	@EditHeightAndLevel(l10n, model)
	@ConnectOneSensor(l10n, model)
}

templ EditHeightAndLevel(l10n Localizer, model ThingDetailsViewModel) {
	<div class="flex flex-start gap-10 self-stretch">
		<div class="flex flex-col gap-2 flex-1">
			<div class="font-bold">{ l10n.Get("maxheight") }</div>
			<div class="flex items-center">
				<input
					type="number"
					name="maxd"
					step="0.01"
					class="border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl p-2"
					placeholder=""
					value={ model.Thing.GetFloatAsString("maxd", 0) }
				/>
				<span class="ml-2">{ l10n.Get("m") }</span>
			</div>
		</div>
		<div class="flex flex-col gap-2 flex-1">
			<div class="font-bold">{ l10n.Get("maxlevel") }</div>
			<div class="flex items-center">
				<input
					type="number"
					name="maxl"
					step="0.01"
					class="border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl p-2"
					placeholder=""
					value={ model.Thing.GetFloatAsString("maxl", 0) }
				/>
				<span class="ml-2">{ l10n.Get("m") }</span>
			</div>
		</div>
	</div>
}

templ EditAngle(l10n Localizer, model ThingDetailsViewModel) {
	<div class="w-full flex flex-start gap-10 self-stretch">
		<div class="w-full flex flex-col gap-2 flex-1">
			<div class="font-bold">{ l10n.Get("angle") }</div>
			<div class="flex items-center w-1/2">
				<input
					type="number"
					name="angle"
					min="0"
					max="90"
					step="1"
					class="w-full h-[40px] border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl p-2"
					placeholder=""
					value={ model.Thing.GetFloatAsString("angle", 0) }
				/>
				<span class="ml-2">{ l10n.Get("degrees") }</span>
			</div>
		</div>
	</div>
}
