package components

import (
	"fmt"
	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
)

templ StatisticsWasteContainer(l10n locale.Localizer, model ThingDetailsViewModel) {
	//Statistik
	<div class="flex flex-col items-start self-stretch gap-6 py-6 pl-9 text-secondary-dark dark:text-secondary">
		<div class="flex items-center w-full justify-between">
			<div class="flex flex-col gap-2">
				<div class="">{ l10n.Get("currentlevel") }</div>
				<div
					class="text-3xl font-bold"
					hx-get={ fmt.Sprintf("/components/things/measurements/%s/current", model.Thing.Type) }
					hx-include="#sensorMeasurementTypes"
					hx-trigger="every 60s"
				>
					if v,ok := model.Thing.FillingLevel(); ok {
						{ fmt.Sprintf("%0.f%%", v) }
					} else {
						{ l10n.Get("noData") }
					}
				</div>
				<input type="hidden" class="filter" id="sensorMeasurementTypes" name="sensorMeasurementTypes" value={ fillingLevelSensor(model) }/>
			</div>
			<div class="flex items-center gap-6">
				@FilterStatistics(l10n, model)
				/*<div class="flex flex-col items-start gap-2">
					<div class="text-primary-dark font-bold">
						&nbsp;						
					</div>
					<div class="">
						@graphTableButtons(l10n, fmt.Sprintf("/things/%s", model.Thing.ThingID))
					</div>
				</div>*/
			</div>
		</div>
		@StatisticsData(l10n, RenderStatisticsWasteContainerGraph(l10n, model), StatisticsWasteContainerTable(l10n, model), model.TableView)
	</div>
}

func WastecontainerChart(datasets []ChartDataset) templ.Component {
	maxvalue := uint(100)
	stepsize := uint(10)
	cfg := NewChartConfiguration("line", false, nil, &maxvalue, &stepsize)
	cfg.Timeseries(true)
	cfg.Add(datasets...)

	return Chart("measurement-chart", "", cfg)
}

func RenderStatisticsWasteContainerGraph(l10n locale.Localizer, model ThingDetailsViewModel) templ.Component {
	startDate := "2024-01-01"
	endDate := "2024-12-31"

	if len(model.Measurements) > 0 {
		startDate = model.Measurements[0].Timestamp.Format("2006-01-02")
		endDate = model.Measurements[len(model.Measurements)-1].Timestamp.Format("2006-01-02")
	}

	return StatisticsWasteContainerGraph(l10n, model, startDate, endDate)
}

templ StatisticsWasteContainerGraph(l10n locale.Localizer, model ThingDetailsViewModel, startDate, endDate string) {
	<div id="graphView" class="w-full" style="height: 40vh; position: relative;"
		data-start-date={ fmt.Sprintf("%s", startDate) } 
		data-end-date={ fmt.Sprintf("%s", endDate) }>
		<canvas id="measurement-chart"></canvas>
		<div id="measurementCharts" style="display:none;"></div>
	</div>

	<script>
		(() => {
			const graphElement = document.getElementById('graphView');
			if (graphElement) {
				const startDate = graphElement.getAttribute('data-start-date');
				const endDate = graphElement.getAttribute('data-end-date');
				
				const timeAtInput = document.getElementById("timeAt");
				const endTimeAtInput = document.getElementById("endTimeAt");

				if (timeAtInput && endTimeAtInput) {
					timeAtInput.value = startDate;
					endTimeAtInput.value = endDate;
				}
			}
		})();
	</script>
}

templ StatisticsWasteContainerTable(l10n locale.Localizer, model ThingDetailsViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-primary-dark dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("time") }</th>
				<th class="px-6 py-3">{ l10n.Get("fillinglevel") }</th>
			</tr>
		</thead>
		<tbody>
			//TODO: Här ska mätningar listas
			for _, measurement := range model.Measurements {
				@StatisticsWasteContainerTableRow(l10n, measurement)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="6">
					//@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ StatisticsWasteContainerTableRow(l10n locale.Localizer, thing MeasurementViewModel) {
	<tr class="border-b border-gray-30 border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20">
		<td class="px-6 py-3">00:00</td>
		<td class="px-6 py-3">20%</td>
	</tr>
}
