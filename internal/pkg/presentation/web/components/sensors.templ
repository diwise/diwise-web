package components

import (
    "fmt"
	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
    "github.com/diwise/diwise-web/internal/pkg/presentation/web/assets"
	"strconv"
)

templ SearchField() {
    <div class="w-[237px] h-12 flex-col justify-center items-start gap-2 inline-flex">
        <div class="self-stretch pl-5 pr-4 py-3 bg-white bg-opacity-50 rounded-xl border border-[#0A0C0F] border-opacity-50 justify-start items-center gap-2 inline-flex">
            <div class="w-[22px] h-[22px]">
                <svg class="w-[22px] h-[22px] fill-[#444450] dark:fill-zinc-600">
                    @templ.Raw(iconSVG("search"))
                </svg>
            </div>
            <div class="grow shrink basis-0 text-[#0A0C0F] text-opacity-30 text-lg font-normal font-sans leading-normal inline-flex">
                <input
                    class="w-[175px] rounded-xl bg-white"
                    type="search"
                    placeholder="  Sök"
                    />
            </div>
        </div>
    </div>
}

templ PrimaryButton(title string) {
    <div class="w-[200px] h-10 pl-[18px] pr-4 py-2 bg-amber-700 rounded-xl flex items-center gap-2">
        <div class="w-[20px] h-[23px]">
            <svg class="w-[20px] h-[23px] stroke-white stroke-2">
                @templ.Raw(iconSVG("plus"))
            </svg>
        </div>
        <div class="text-white text-base font-bold font-sans leading-normal">
            { title }
        </div>
    </div>
}

templ SecondaryButton(title string) {
    <div class="w-28 h-10 pl-4 pr-[18px] py-2 rounded-xl border-2 border-[#1C1C284D] border-opacity-30 bg-white bg-opacity-20 dark:bg-white dark:bg-opacity-30 justify-center items-center gap-2 inline-flex">
        <svg class="w-[18px] h-[18px] dark:fill-zinc-600">
            @templ.Raw(iconSVG("filter"))
        </svg>
        <div class="text-[#444450] text-base font-bold font-sans leading-normal">
            { title }
        </div>
    </div>
}

func ctx2str(ctx context.Context, key any) string {
    return fmt.Sprintf("%s", ctx.Value(key))
}

func isFirstPage(ctx context.Context) bool {
    return ctx2str(ctx, PageIndex) == "1"
}

func isLastPage(ctx context.Context) bool {
    return ctx2str(ctx, PageIndex) == ctx2str(ctx, PageLast)
}

func pageCount(ctx context.Context) int64 {
    count, _ := strconv.ParseInt(ctx2str(ctx, PageLast), 10, 64)
    return count
}

func pageIndex(ctx context.Context) int64 {
    current, _ := strconv.ParseInt(ctx2str(ctx, PageIndex), 10, 64)
    return current
}

func prevPage(ctx context.Context) int64 {
    current := pageIndex(ctx)
    return current - 1
}

func nextPage(ctx context.Context) int64 {
    current := pageIndex(ctx)
    return current + 1
}

func pagerIndexes(ctx context.Context) []int64 {
    start := pageIndex(ctx)
    last := pageCount(ctx)

    const PagerWidth int64 = 6

    start -= (PagerWidth / 2)

    if start > (last - PagerWidth) {
        start = last - PagerWidth
    }

    if start < 1 {
        start = 1
    }

    result := []int64{}

    if start != 1 {
        start = start + 1
        result = append(result, 1, start)
    } else {
        result = append(result, 1)
    }

    page := start + 1

    for len(result) < int(PagerWidth) {
        if page >= last {
            break
        }

        result = append(result, page)
        page = page + 1
    }

    if result[len(result)-1] < last {
        result = append(result, last)
    }

    return result
}

templ PageSelector(index string) {
    if index == ctx2str(ctx, PageIndex) {
        <div class="flex-col justify-start items-start inline-flex">
            <div class="w-[40.89px] rounded-lg justify-start items-center gap-0.5 inline-flex p-0.5 ">
                <div class="grow shrink basis-0 text-center text-zinc-700 dark:text-neutral-200 text-base font-bold font-sans leading-normal">
                    { index }
                </div>
            </div>
        </div>
    } else {
        <button class="flex-col justify-start items-start inline-flex" hx-get={ fmt.Sprintf("/components/tables/sensors?page=%s&limit=%s", index, ctx2str(ctx, PageSize)) } hx-target="#sensor-table" hx-trigger="click">
            <div class="w-[40.89px] rounded-lg justify-start items-center gap-0.5 inline-flex py-0.5 ">
                <div class="grow shrink basis-0 text-center text-zinc-500 dark:text-slate-300 text-base font-normal font-sans underline leading-normal">
                    { index }
                </div>
            </div>
        </button>
    }
}

templ DataTableFooter(colspan string) {
    <tfoot>
        <tr>
            <td colspan={colspan}>
                <div id="paginering" class="w-full h-[60px] px-4 py-3.5 dark:bg-gray-800 rounded-b-2xl border-t border-white border-opacity-30 justify-between items-center flex">
                    <div class="h-8 justify-start items-center gap-2 flex">
                        <span class="text-zinc-700 dark:text-neutral-200 text-sm font-normal font-sans leading-[18px]">Rader per sida:</span>
                        <span class="h-8 px-3 py-1.5 bg-white bg-opacity-50 rounded-xl border border-[#0A0C0F] border-opacity-50 justify-start items-center gap-1.5 flex">
                            <span class="text-zinc-700 dark:text-neutral-200 text-sm font-normal font-sans leading-tight">
                                { ctx2str(ctx, PageSize) }
                            </span>
                            <span class="w-4 h-4">
                                @SVG("chevron-down", Size(16))
                            </span>
                        </span>
                    </div>
                    <div class="h-8 justify-between items-center flex">
                        <button class="p-1.5 rounded-full justify-center items-center gap-1 flex"
                            if !isFirstPage(ctx) {
                                hx-get={ fmt.Sprintf("/components/tables/sensors?page=%d&limit=%s", prevPage(ctx), ctx2str(ctx, PageSize)) } hx-target="#sensor-table" hx-trigger="click"
                            } else {
                                disabled
                            }
                        >
                            <span class="w-5 h-5">
                                if isFirstPage(ctx) {
                                    @SVG("arrow-left", DisabledStyle())
                                } else {
                                    @SVG("arrow-left")
                                }
                            </span>
                        </button>

                        <span class="h-7 px-3 justify-between items-center flex">
                            for _, page := range pagerIndexes(ctx) {
                                @PageSelector(fmt.Sprintf("%d", page))
                            }
                        </span>

                        <button class="p-1.5 rounded-full justify-center items-center gap-1 flex"
                            if !isLastPage(ctx) {
                                hx-get={ fmt.Sprintf("/components/tables/sensors?page=%d&limit=%s", nextPage(ctx), ctx2str(ctx, PageSize)) } hx-target="#sensor-table" hx-trigger="click"
                            } else {
                                disabled
                            }
                        >
                            <span class="w-5 h-5">
                                if isLastPage(ctx) {
                                    @SVG("arrow-right", DisabledStyle())
                                } else {
                                    @SVG("arrow-right", Box(24, 24))
                                }
                            </span>
                        </button>
                    </div>
                    <div class="h-8 justify-end items-center gap-2 flex">
                        <span class="text-zinc-700 dark:text-neutral-200 text-sm font-normal font-sans leading-[18px]">Radhöjd:</span>
                        <span class="pl-3 pr-2.5 py-2 bg-gray-900 bg-opacity-10 rounded-xl justify-center items-center gap-1 flex">
                            <span class="grow shrink basis-0 text-zinc-700 text-sm font-bold font-sans leading-none">Normal</span>
                            <span class="w-4 h-4">
                                @SVG("chevron-down", Size(16))
                            </span>
                        </span>
                    </div>
                </div>
            </td>
        </tr>
    </tfoot>
}

templ TH(title string) {
    <th class="px-6 py-3">
        { title }
    </th>
}

templ HeaderRow(titles ...templ.Component) {
    <thead class="border-b border-gray-500">
        <tr>
            for _, title := range titles {
            @title
        }   
        </tr>
    </thead>
}

templ TableData(rows ...templ.Component) {
    <tbody>
        for _, row := range rows {
            @row
        }    
    </tbody>
}

templ TableRow(cells ...templ.Component) {
    <tr class="border-b border-[#1C1C284D] border-opacity-70 hover:bg-[#FAFAFA]">
        for _, cell := range cells {
            @cell
        }
    </tr>
}

templ Label(label string, active bool) {
    /*<div class={
        "px-2.5 py-1 rounded-full justify-start items-center gap-1.5 flex",
        templ.KV("bg-[#c9e4d7]", active),
        templ.KV("dark:bg-emerald-800", active),
        templ.KV("bg-gray-900", !active),
        templ.KV("bg-opacity-10", !active),
        templ.KV("dark:bg-white", !active),
        templ.KV("dark:bg-opacity-20", !active) }>

        <div class={
            "text-sm font-bold font-sans leading-none",
            templ.KV("text-emerald-900", active),
            templ.KV("dark:text-gray-200", active),
            templ.KV("text-neutral-800", !active),
            templ.KV("dark:text-neutral-300", !active) }>
            { label }
        </div>
    </div>*/

    <span class={
        "px-2.5 py-1 rounded-full justify-start items-center gap-1.5",
        templ.KV("bg-[#c9e4d7]", active),
        templ.KV("dark:bg-emerald-800", active),
        templ.KV("bg-gray-900", !active),
        templ.KV("bg-opacity-10", !active),
        templ.KV("dark:bg-white", !active),
        templ.KV("dark:bg-opacity-20", !active) }>

        <span class={
            "text-sm font-bold font-sans leading-none",
            templ.KV("text-emerald-900", active),
            templ.KV("dark:text-gray-200", active),
            templ.KV("text-neutral-800", !active),
            templ.KV("dark:text-neutral-300", !active) }>
            { label }
        </span>
    </span>
}

templ T(data string) {
    /*<div class="grow shrink basis-0 text-zinc-700 dark:text-neutral-200 text-sm font-bold font-sans leading-[18px]">
        { data }
    </div>*/
    { data }
}

templ FirstT(data string) {
    /*<div class="grow shrink basis-0 text-zinc-700 dark:text-neutral-200 text-sm font-bold font-sans leading-[18px]">
        { data }
    </div>*/
    <span class="font-bold">
        { data }
    </span>
}

func progressBar(data string) templ.Component {
    value, _ := strconv.Atoi(data)

    colourClass := ""
    switch {
        case value >= 70: 
        colourClass = "bg-[#B92424]" //red
        case value <= 40: 
        colourClass = "bg-[#00733B]" //green
        default:
            colourClass = "bg-[#DB6900]" //orange
    }

    return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
        _, err := io.WriteString(w, fmt.Sprintf(
            `<div>
                %s%%
            </div>
            <div class="bg-gray-200 w-full rounded-lg">
                <div class="%s rounded-lg" style="width: %s%%; height: 6px"></div>
            </div>`, data, colourClass, data,
        ))
        return err
    })    
}

templ Cell(contents templ.Component) {
    <td class="px-6 py-3">
        @contents
    </td>
}

templ LinkCell(contents templ.Component, url string) {
    <td class="px-6 py-3" hx-get={ url } hx-target="#sensor-view" hx-trigger="click">
        @contents
    </td>
}

templ TextFirstCell(data string) {
    @Cell(FirstT(data))
}

templ TextLinkCell(data, url string) {
    @LinkCell(T(data), url)
}

templ TextCell(data string) {
    @Cell(T(data))
}

templ ProgressBarCell(data string) {
    @Cell(progressBar(data))
}

templ LabelCell(label string, active bool) {
    @Cell(Label(label, active))
}

templ Table(header templ.Component, data templ.Component, footer templ.Component) {
    /*<table class="w-full rounded-2xl shadow flex flex-col justify-start items-start shrink-0 self-stretch"> */

    <table class="table-auto min-w-full shadow-lg rounded-2xl text-sm text-left bg-white">
        @header
        @data
        @footer
    </table>
}

type PagingConfigKey string

var PageSize PagingConfigKey = "page.size"
var PageIndex PagingConfigKey = "page.index"
var PageLast PagingConfigKey = "page.last"

type SensorViewModel interface {
    Bool(property string) bool
    Date(property, layout string) string
    String(property string) string
}

func tableRowsFromSensors(_ locale.Localizer, _ assets.AssetLoaderFunc, sensors []SensorViewModel) []templ.Component {
    rows := []templ.Component{}

    labelText := map[bool]string{false: "Inaktiv", true: "Aktiv"}

    for _, sensor := range sensors {
        isActive := sensor.Bool("active")

        cells := []templ.Component{TextFirstCell(sensor.String("name"))}
        cells = append(cells, LabelCell(labelText[isActive], isActive))
        cells = append(cells, TextLinkCell(sensor.String("deveui"), "/components/sensors/details?id=" + sensor.String("id")))
        cells = append(cells, TextCell(sensor.String("network")))
        cells = append(cells, TextCell(sensor.String("battery")))
        cells = append(cells, TextCell(sensor.Date("lastseen", "2006-01-02, 15:04")))

        if sensor.Bool("has-alerts") {
            cells = append(cells, Cell(SVG("alert-triangle", Size(24), AlertStyle())))
        } else {
            cells = append(cells, TextCell(""))
        }

        rows = append(rows, TableRow(cells...))
    }

    return rows
    
}

templ SensorTable(localizer locale.Localizer, asset assets.AssetLoaderFunc, sensors []SensorViewModel) {
    @Table(
        HeaderRow(TH("Namn"), TH("Status"), TH("DevEUI"), TH("Nät"), TH("Batterinivå"), TH("Senaste värde"), TH("Larm")),
        TableData(tableRowsFromSensors(localizer, asset, sensors)...),
        DataTableFooter("7"),
    )
   /*@DataTableFooter()*/

    /*<div class="w-full rounded-2xl shadow flex flex-col justify-start items-start shrink-0 self-stretch">
        @HeaderRow(TH("Namn"), TH("Status"), TH("DevEUI"), TH("Nät"), TH("Batterinivå"), TH("Senaste Värde"), TH("Larm"))
        @TableData(tableRowsFromSensors(localizer, asset, sensors)...)
    </div>*/
}

templ Sensors(localizer locale.Localizer, asset assets.AssetLoaderFunc) {
    <div class="w-full" id="sensor-view">
    <div class="w-full flex flex-col justify-start items-start gap-14 inline-flex">
        <h2 class="text-black dark:text-neutral-300 text-2xl font-bold font-heading leading-loose">Sensorer</h2>
        <div class="w-full h-12 justify-between items-center inline-flex">
            <div class="inline-flex justify-start items-center gap-[34px]">
                @SearchField()
                @SecondaryButton("Filter")
            </div>
            @PrimaryButton("Lägg till sensor")
        </div>

        <div class="w-full flex flex-col gap-6 items-start inline-flex">

            <div class="h-14 flex justify-between items-center self-stretch">
                <div class="w-[689px] h-14 p-2 rounded-[20px]">
                </div>

                <div class="w-[200px] h-[42px] p-1.5 bg-white bg-opacity-20 rounded-2xl justify-start items-center inline-flex">
                    <div class="h-[30px] px-3.5 py-1.5 bg-white bg-opacity-95 rounded-xl justify-center items-center gap-2 flex">
                        // fill-opacity=".88"
                        <svg class="w-[18px] h-[18px] fill-[#1c1c28] dark:fill-zinc-600">
                            @templ.Raw(iconSVG("list"))
                        </svg>
                        <div class="text-gray-900 text-opacity-90 text-sm font-bold font-sans leading-[18px]">Lista</div>
                    </div>
                    <div class="h-[30px] px-3.5 py-1.5 rounded-xl justify-center items-center gap-2 flex">
                        <svg class="w-[18px] h-[18px] fill-black dark:fill-zinc-200">
                            @templ.Raw(iconSVG("map"))
                        </svg>
                        <div class="text-white text-sm font-bold font-sans leading-[18px]">Karta</div>
                    </div>
                </div>
            </div>

            <div id="sensor-table" class="w-full" hx-get="/components/tables/sensors" hx-trigger="load">
                //@SensorTable(localizer, asset)
            </div>
        </div>
    </div>
    </div>
}
