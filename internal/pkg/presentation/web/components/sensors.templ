package components

import (
	"fmt"
	"time"

	. "github.com/diwise/frontend-toolkit"
)

type SensorListViewModel struct {
	Sensors        []SensorViewModel
	Statistics     StatisticsViewModel
	Pageing        PagingViewModel
	MapView        bool
	DeviceProfiles []string
}

type SensorViewModel struct {
	Active       bool
	DevEUI       string
	DeviceID     string
	Name         string
	Latitude     float64
	Longitude    float64
	BatteryLevel int
	LastSeen     time.Time
	HasAlerts    bool
	Type         string
	Online		 bool
}

type StatisticsViewModel struct {
	Total    int
	Active   int
	Inactive int
	Online   int
	Unknown  int
}

templ Statistics(l10n Localizer, model StatisticsViewModel) {
	<div class="flex items-start gap-10 dark:text-white">
		<div class="flex items-start gap-2">{ l10n.Get("total") }<span class="font-bold">{ fmt.Sprintf("%d", model.Total) } </span></div>
		<div class="flex items-start gap-2">{ l10n.Get("active") }<span class="font-bold">{ fmt.Sprintf("%d", model.Active) }</span></div>
		<div class="flex items-start gap-2">{ l10n.Get("inactive") }<span class="font-bold">{ fmt.Sprintf("%d", model.Inactive) }</span></div>
		<div class="flex items-start gap-2">{ l10n.Get("unknown") }<span class="font-bold">{ fmt.Sprintf("%d", model.Unknown) }</span></div>
	</div>
}

templ SensorsList(l10n Localizer, model SensorListViewModel) {
	<div class="flex flex-col items-start gap-6 flex-[1_0_0] w-full" id="sensor-view">
		<div class="flex flex-col items-start gap-6 w-full">
			<div class="flex items-center justify-between w-full">
				<h1 class="dark:text-white text-2xl font-bold font-heading leading-loose">{ l10n.Get("sensors") }</h1>
				<div class="flex flex-row items-center text-white dark:text-primary-dark font-bold gap-6">
					<label class="flex justify-center items-center gap-2 rounded-xl cursor-pointer font-bold px-4 py-2 bg-primary-surface hover:bg-primary-surface-hover dark:bg-primary-surface-dark dark:hover:bg-primary-surface-dark-hover">
						{ l10n.Get("import") }
						<input type="file" 
							class="hidden" 
							hx-post="/upload-file" 
							hx-target="#uploadStatus">
					</label>
						
					@Button(Primary, l10n.Get("export"), "")
				</div>
			</div>
			@Statistics(l10n, model.Statistics)
		</div>
		
		<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
		<div class="flex flex-col items-start self-stretch gap-10">
			@SensorsFilter(l10n, model)
			@DataList(l10n, SensorsTable(l10n, model), SensorMap(l10n, model), model.MapView)
		</div>
	</div>
}

templ SensorsFilter(l10n Localizer, model SensorListViewModel) {
	<div class="flex w-full flex-col gap-4">
		<div class="flex h-12 justify-between items-center">
			<div class="flex items-center dark:text-white">
				<div class="flex items-center gap-6">
					@CheckboxList(l10n.Get("type")) {
						for _, t := range model.DeviceProfiles {
							@CheckboxOption("type", t, "", l10n, templ.Attributes{
								"hx-get":    string(templ.SafeURL(fmt.Sprintf("/components/sensors/list"))),
								"hx-target": "#tableOrMap",
								"hx-swap":   "outerHTML",
								"hx-include": "[name=type]:checked, [name=active]:checked, [name=online]:checked",
								"onchange":  "updateSelectedFilters()",
								"data-text": l10n.Get(t),
								"value": t,
							})
						}
					}
					@RadioList(l10n.Get("status")) {
						@RadioOption("active", "true", l10n.Get("active"), l10n, templ.Attributes{
							"hx-get":    string(templ.SafeURL(fmt.Sprintf("/components/sensors/list"))),
							"hx-target": "#tableOrMap",
							"hx-swap":   "outerHTML",
							"hx-include": "[name=type]:checked, [name=active]:checked, [name=online]:checked",
							"onchange":  "updateSelectedFilters()",
						})
						@RadioOption("active", "false", l10n.Get("inactive"), l10n, templ.Attributes{
							"hx-get":    string(templ.SafeURL(fmt.Sprintf("/components/sensors/list"))),
							"hx-target": "#tableOrMap",
							"hx-swap":   "outerHTML",
							"hx-include": "[name=type]:checked, [name=active]:checked, [name=online]:checked",
							"onchange":  "updateSelectedFilters()",
						})
					}
					@RadioList(l10n.Get("Online")) {
						@RadioOption("online", "true", l10n.Get("online"), l10n, templ.Attributes{
							"hx-get":    string(templ.SafeURL(fmt.Sprintf("/components/sensors/list"))),
							"hx-target": "#tableOrMap",
							"hx-swap":   "outerHTML",
							"hx-include": "[name=type]:checked, [name=active]:checked, [name=online]:checked",
							"onchange":  "updateSelectedFilters()",
						})
						@RadioOption("online", "false", l10n.Get("offline"), l10n, templ.Attributes{
							"hx-get":    string(templ.SafeURL(fmt.Sprintf("/components/sensors/list"))),
							"hx-target": "#tableOrMap",
							"hx-swap":   "outerHTML",
							"hx-include": "[name=type]:checked, [name=active]:checked, [name=online]:checked",
							"onchange":  "updateSelectedFilters()",
						})
					}
				</div>
			</div>
			@TableOrMap(l10n, "/components/sensors/list")
		</div>
		@SelectedFilters(l10n, "/components/sensors/list")
	</div>
}

templ DataList(l10n Localizer, tableComponent, mapComponent templ.Component, mapView bool) {
	<div id="tableOrMap" class="w-full flex flex-col gap-6 items-start inline-flex">
		<input
			type="hidden"
			id="mapview"
			name="mapview"
			class="filter"
			if mapView {
				value="true"
			} else {
				value="false"
			}
		/>
		<div
			if mapView {
				id="map__view"
			} else {
				id="tableview"
			}
			class="w-full"
		>
			if mapView {
				@mapComponent
			} else {
				@tableComponent
			}
		</div>
	</div>
}

func sensorsToMapFeature(l10n Localizer, model SensorListViewModel) FeatureCollection {
	features := make([]Feature, 0, len(model.Sensors))

	for _, sensor := range model.Sensors {
		if sensor.Latitude == 0 || sensor.Longitude == 0 {
			continue
		}
		feature := NewFeature(NewPoint(sensor.Latitude, sensor.Longitude))
		feature.AddProperty("status", sensor.Active)
		feature.AddProperty("type", sensor.Type)
		feature.AddProperty("name", sensor.Name)
		feature.AddProperty("deveui", sensor.DevEUI)
		if sensor.BatteryLevel >= 0 {
			feature.AddProperty("batterylevel", fmt.Sprintf("%d%%", sensor.BatteryLevel))
		} else {
			feature.AddProperty("batterylevel", "-")
		}
		if !sensor.LastSeen.IsZero() {
			feature.AddProperty("lastseen", sensor.LastSeen.Format("2006-01-02, 15:04"))
		} else {
			feature.AddProperty("lastseen", "-")
		}
		feature.AddProperty("latitude", sensor.Latitude)
		feature.AddProperty("longitude", sensor.Longitude)
		feature.AddProperty("url", fmt.Sprintf("/sensors/%s", sensor.DeviceID))

		//Språkstöd
		feature.AddProperty("text_active", l10n.Get("active"))
		feature.AddProperty("text_inactive", l10n.Get("inactive"))
		feature.AddProperty("text_deveui", l10n.Get("deveui"))
		feature.AddProperty("text_sensortype", l10n.Get("sensortype"))
		feature.AddProperty("text_batterylevel", l10n.Get("batterylevel"))
		feature.AddProperty("text_position", l10n.Get("location"))
		feature.AddProperty("text_lastseen", l10n.Get("lastseen"))
		feature.AddProperty("text_moreinformation", l10n.Get("moreinformation"))

		features = append(features, feature)
	}

	return NewFeatureCollection(features)
}

func SensorMap(l10n Localizer, model SensorListViewModel) templ.Component {
	if !model.MapView {
		return templ.NopComponent
	}
	mapData := newMapData(62.3908, 17.3069)
	mapData.CurrentView = "sensor"
	return Map("large", true, false, mapData, sensorsToMapFeature(l10n, model))
}

templ SensorRow(l10n Localizer, sensor SensorViewModel) {
	<tr
		class="border-b border-gray-30 border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20 hover:cursor-pointer"
		hx-get={ string(templ.SafeURL(fmt.Sprintf("/components/sensors/details?id=%s", sensor.DeviceID))) }
		hx-target="#sensor-view"
		hx-push-url={ string(templ.SafeURL(fmt.Sprintf("/sensors/%s", sensor.DeviceID))) }
		hx-trigger="click"
		hx-disinherit="hx-target hx-push-url"
	>
		if sensor.Online {
			<td class="px-6 py-3 flex items-center gap-2 dark:fill-primary-surface-green-accent">
				@SVG("circle", FillColor("green-700", "primary-surface-green-accent"), Box(12, 12), Size(16))
				<span>
					{ l10n.Get("online") }
				</span>
			</td>
		} else {
			<td class="px-6 py-3 flex items-center gap-2 fill-red-600">
				@SVG("circle", FillColor("#D62E2E", "err-prim-surf"), Box(12, 12), Size(16))
				<span>
					{ l10n.Get("offline") }
				</span>
			</td>
		}
		<td class="px-6 py-3"><span class="font-bold">{ sensor.DeviceID }</span></td>
		<td class="px-6 py-3"><span class="font-bold">{ sensor.Name }</span></td>
		if sensor.Active {
			<td class="px-6 py-3"><span class="px-2.5 py-1 rounded-full justify-start items-center gap-1.5 bg-primary-green-accent"><span class="text-sm font-bold font-sans leading-none text-primary-green">{ l10n.Get("active") }</span></span></td>
		} else {
			<td class="px-6 py-3"><span class="px-2.5 py-1 rounded-full justify-start items-center gap-1.5 bg-tertiary-surface dark:bg-primary-surface-white"><span class="text-sm font-bold font-sans leading-none text-primary-dark dark:text-white">{ l10n.Get("inactive") }</span></span></td>
		}
		<td class="px-6 py-3 capitalize">{ sensor.Type }</td>
		<td class="px-6 py-3 break-all">
			if sensor.HasAlerts {
				<span class="font-bold">{ sensor.DevEUI }</span>
			} else {
				{ sensor.DevEUI }
			}
		</td>
		<td class="px-6 py-3">
			if sensor.BatteryLevel >=0 {
				{ fmt.Sprintf("%d%%", sensor.BatteryLevel) }
			} else {
				{ "-" }
			}
		</td>
		<td class="px-6 py-3">
			if sensor.LastSeen.IsZero() {
				{ l10n.Get("-") }
			} else {
				{ sensor.LastSeen.Format("2006-01-02, 15:04") }
			}
		</td>
	</tr>
}

templ SensorsTable(l10n Localizer, model SensorListViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-primary-dark dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("online") }</th>
				<th class="px-6 py-3">{ l10n.Get("id") }</th>
				<th class="px-6 py-3">{ l10n.Get("name") }</th>
				<th class="px-6 py-3">{ l10n.Get("status") }</th>
				<th class="px-6 py-3">{ l10n.Get("type") }</th>
				<th class="px-6 py-3">{ l10n.Get("deveui") }</th>
				<th class="px-6 py-3">{ l10n.Get("batterylevel") }</th>
				<th class="px-6 py-3">{ l10n.Get("lastseen") }</th>
			</tr>
		</thead>
		<tbody>
			for _, sensor := range model.Sensors {
				@SensorRow(l10n, sensor)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="8">
					@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ TableOrMap(l10n Localizer, hxGet string) {
	<div class="flex items-center ml-auto">
		<div class="flex p-2 items-center gap-4 bg-tertiary-surface bg-opacity-20 dark:bg-primary-surface-white rounded-2xl gap-2">
			<div class="relative group">
				<button
					id="tableButton"
					hx-get={ string(templ.SafeURL(fmt.Sprintf("%s?mapview=false", hxGet))) }
					hx-target="#tableOrMap"
					class="flex p-1.5 rounded-[10px] justify-center items-center gap-1 cursor-pointer bg-black fill-white dark:bg-white dark:fill-black stroke-white dark:stroke-black hover:bg-tertiary-surface-hover"
					hx-on:click="this.classList.add('bg-black', 'fill-white', 'dark:bg-white', 'dark:fill-black', 'stroke-white'); this.classList.remove('dark:fill-white', 'stroke-black');
					document.getElementById('mapButton').classList.add('fill-black', 'dark:fill-white');
					document.getElementById('mapButton').classList.remove('bg-black', 'fill-white', 'dark:bg-white', 'dark:fill-black');"
				>
					<svg class="w-[18px] h-[18px]">
						@SVG("table", Size(24), NoFill(), Box(24, 24), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
					</svg>
				</button>
				@Tooltip(l10n.Get("table"))
			</div>
			<div class="relative group">
				<button
					id="mapButton"
					hx-get={ string(templ.SafeURL(fmt.Sprintf("%s?mapview=true", hxGet))) }
					hx-target="#tableOrMap"
					class="flex p-1.5 rounded-[10px] justify-center items-center gap-1 cursor-pointer dark:fill-white hover:bg-tertiary-surface-hover"
					hx-on:click="this.classList.add('bg-black', 'fill-white', 'dark:bg-white', 'dark:fill-black' ); this.classList.remove('dark:fill-white');
					document.getElementById('tableButton').classList.add('fill-black', 'dark:fill-white', 'stroke-black');
					document.getElementById('tableButton').classList.remove('bg-black', 'fill-white', 'dark:bg-white', 'dark:fill-black', 'stroke-white');"
				>
					<svg class="w-[18px] h-[18px]">
						@templ.Raw(iconSVG("map"))
					</svg>
				</button>
				@Tooltip(l10n.Get("map"))
			</div>
		</div>
	</div>
}
