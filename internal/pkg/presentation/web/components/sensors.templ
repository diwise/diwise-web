package components

import (
	"fmt"
	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
	"github.com/diwise/diwise-web/internal/pkg/presentation/web/assets"
	"time"
)

type SensorViewModel struct {
	Active       bool
	DevEUI       string
	DeviceID     string
	Name         string
	BatteryLevel int
	LastSeen     time.Time
	HasAlerts    bool
}

type SensorListViewModel struct {
	Sensors []SensorViewModel
}

templ SearchField() {
	<div class="w-[237px] h-12 flex-col justify-center items-start gap-2 inline-flex">
		<div class="self-stretch pl-5 pr-4 py-3 bg-white bg-opacity-50 rounded-xl border border-[#0A0C0F] border-opacity-50 justify-start items-center gap-2 inline-flex dark:bg-gray-800 dark:border-zinc-600">
			<div class="w-[22px] h-[22px]">
				<svg class="w-[22px] h-[22px] fill-[#444450] dark:fill-zinc-600">
					@templ.Raw(iconSVG("search"))
				</svg>
			</div>
			<div class="grow shrink basis-0 text-[#0A0C0F] text-opacity-30 text-lg font-normal font-sans leading-normal inline-flex">
				<input
					class="w-[175px] rounded-xl bg-white dark:bg-gray-800 dark:rounded-none dark:text-white dark:font-normal"
					type="search"
					placeholder="  Sök"
				/>
			</div>
		</div>
	</div>
}

templ PrimaryButton(title string) {
	<div class="w-[200px] h-10 pl-[18px] pr-4 py-2 bg-amber-700 rounded-xl justify-center items-center gap-2 inline-flex dark:bg-gray-800 dark:border-zinc-600 dark:border-2 cursor-pointer">
		<div class="flex items-center gap-2">
			<div class="text-white text-base font-bold font-sans leading-normal">
				{ title }
			</div>
			<div class="w-[18px] h-[18px] flex items-center">
				<svg class="w-[18px] h-[18px] stroke-white fill-white">
					@templ.Raw(iconSVG("chevron-down"))
				</svg>
			</div>
		</div>
	</div>
}

templ SecondaryButton(title string) {
	<div class="w-28 h-10 pl-4 pr-[18px] py-2 rounded-xl border-2 border-[#1C1C284D] border-opacity-30 bg-white bg-opacity-20 dark:bg-gray-800 justify-center items-center gap-2 inline-flex dark:border-zinc-600">
		<svg class="w-[18px] h-[18px] dark:fill-zinc-600">
			@templ.Raw(iconSVG("filter"))
		</svg>
		<div class="text-[#444450] text-base font-bold font-sans leading-normal dark:text-white">
			{ title }
		</div>
	</div>
}

templ SensorTable(l10n locale.Localizer, asset assets.AssetLoaderFunc, sensors SensorListViewModel) {
	@Table(
		HeaderRow(TableHeaderText(l10n.Get("name")), TableHeaderText(l10n.Get("status")), TableHeaderText(l10n.Get("deveui")), TableHeaderText(l10n.Get("batterylevel")), TableHeaderText(l10n.Get("lastseen")), TableHeaderText(l10n.Get("alerts"))),
		TableData(tableRowsFromSensors(l10n, asset, sensors.Sensors)...),
		DataTableFooter("7", "sensors"),
	)
}

func listMapSwitch(name, icon string) templ.Component {

	/*selectedButtonClass := "bg-black text-white"
	  selectedIconClass := "fill-white"*/

	defaultButtonClass := "bg-white bg-opacity-95 text-gray-900 text-opacity-90"
	defaultIconClass := "fill-[#1c1c28] dark:fill-zinc-600"

	buttonClass := defaultButtonClass
	iconClass := defaultIconClass

	/*if isActive {
	    buttonClass = selectedButtonClass
	    iconClass = selectedIconClass
	}*/

	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, fmt.Sprintf(
			`
                <button class="h-[30px] px-3.5 py-1.5 rounded-xl justify-center items-center gap-2 flex cursor-pointer %s"
                    hx-get={"?selected=%s"}
                    hx-push-url="true"
                    hx-vals='{"state":"selected"}'
                    hx-trigger="click">
                    <svg class="w-[18px] h-[18px] %s"> 
                        %s
                    </svg>
                    <div class="text-sm font-bold font-sans leading-[18px]">%s</div>
                </button>
            `, buttonClass, name, iconClass, icon, name,
		))
		return err
	})
}

templ Sensors(l10n locale.Localizer, asset assets.AssetLoaderFunc, sensors SensorListViewModel) {
	<div class="flex flex-col items-start gap-14 flex-[1_0_0] py-8 w-full" id="sensor-view">
		<div class="flex flex-col items-start gap-6 self-stretch w-full px-8">
			<div class="">
				<h1 class="dark:text-white text-2xl font-bold font-heading leading-loose">{ l10n.Get("sensors") }</h1>
			</div>
			<div class="flex items-start gap-10">
				<div class="flex items-start gap-2">
					Totalt
					<span class="font-bold">1324</span> 
				</div>
				<div class="flex items-start gap-2">
					Aktiva
					<span class="font-bold">1300</span>
				</div>
				<div class="flex items-start gap-2">
					Inaktiva
					<span class="font-bold">24</span>
				</div>
				<div class="flex items-start gap-2">
					Oregistrerade
					<span class="font-bold">10</span>
				</div>
			</div>
		</div>
		<div class="h-px border-t border-[#1C1C284D] w-full dark:border-[#FFFFFF4D]"></div>
		<div class="flex px-8 flex-col items-start self-stretch gap-10">
			<div class="w-full h-12 justify-between items-center inline-flex">
				<div class="inline-flex justify-start items-center gap-[34px]">
					@SearchField()
					//@SecondaryButton("Filter")
					<div class="flex items-center flex-[1_0_0] gap-6">
						<div class="relative ml-4">
							<button id="dropdownButtonType" type="button" class="flex items-center justify-start text-left p-2 gap-2 font-bold hover:bg-[#1c1c2829] hover:rounded-lg" onclick={ toggleDropdownType() }>
								Sensortyp
								<svg class="w-[18px] h-[18px] dark:fill-white">
									@templ.Raw(iconSVG("chevron-down"))
								</svg>
							</button>

							<div id="dropdownMenuType" class="absolute z-10 hidden bg-[#FAFAFA] rounded-md shadow-lg mt-2.5">
								<ul class="p-3 space-y-2">
								<li>
										<label for="avlopp-checkbox" class="flex items-center justify-between w-full cursor-pointer">
											<span class="ml-2 text-gray-700 dark:text-gray-300 ">Avlopp</span>
											<div class="flex items-center">
												<input type="checkbox" id="avlopp-checkbox" class="sr-only peer form-checkbox cursor-pointer" value="avlopp" />
												<div class="w-[20px] h-[20px] bg-white rounded border border-gray-400 peer-checked:bg-black peer-checked:border-black flex justify-center items-center">
													<svg class="w-full h-full fill-none stroke-white stroke-2 opacity-100 peer-checked:opacity-0 transition-opacity" viewBox="0 0 24 24">
														@templ.Raw(iconSVG("check"))
													</svg>
												</div>
											</div>
										</label>
									</li> 
									<li>
										<label for="livboj-checkbox" class="flex items-center justify-between w-full cursor-pointer">
											<span class="ml-2 text-gray-700 dark:text-gray-300">Livboj</span>
											<div class="flex items-center">
												<input type="checkbox" id="livboj-checkbox" class="sr-only peer form-checkbox cursor-pointer" value="livboj" />
												<div class="w-[20px] h-[20px] bg-white rounded border border-gray-400 peer-checked:bg-black peer-checked:border-black flex justify-center items-center">
													<svg class="w-full h-full fill-none stroke-white stroke-2 opacity-100 peer-checked:opacity-0 transition-opacity" viewBox="0 0 24 24">
														@templ.Raw(iconSVG("check"))
													</svg>
												</div>
											</div>
										</label>
									</li>                           
									<li>
										<label for="sandficka-checkbox" class="flex items-center justify-between w-full cursor-pointer">
											<span class="ml-2 text-gray-700 dark:text-gray-300">Sandficka</span>
											<div class="flex items-center">
												<input type="checkbox" id="sandficka-checkbox" class="sr-only peer form-checkbox cursor-pointer" value="sandficka" />
												<div class="w-[20px] h-[20px] bg-white rounded border border-gray-400 peer-checked:bg-black peer-checked:border-black flex justify-center items-center">
													<svg class="w-full h-full fill-none stroke-white stroke-2 opacity-100 peer-checked:opacity-0 transition-opacity" viewBox="0 0 24 24">
														@templ.Raw(iconSVG("check"))
													</svg>
												</div>
											</div>
										</label>
									</li>
									<li>
										<label for="soptunna-checkbox" class="flex items-center justify-between w-full cursor-pointer">
											<span class="ml-2 mr-4 text-gray-700 dark:text-gray-300">Soptunna</span>
											<div class="flex items-center">
												<input type="checkbox" id="soptunna-checkbox" class="sr-only peer form-checkbox cursor-pointer" value="soptunna" />
												<div class="w-[20px] h-[20px] bg-white rounded border border-gray-400 peer-checked:bg-black peer-checked:border-black flex justify-center items-center">
													<svg class="w-full h-full fill-none stroke-white stroke-2 opacity-100 peer-checked:opacity-0 transition-opacity" viewBox="0 0 24 24">
														@templ.Raw(iconSVG("check"))
													</svg>
												</div>
											</div>
										</label>
									</li>
								</ul>
							</div>
						</div>
						<div class="relative">
                    <button id="dropdownButtonArea" type="button" class="flex items-center justify-start text-left p-2 gap-2 font-bold hover:bg-[#1c1c2829] hover:rounded-lg" onclick={ toggleDropdownArea() }>
                        Mättyp
                        <svg class="w-[18px] h-[18px] dark:fill-white">
                            @templ.Raw(iconSVG("chevron-down"))
                        </svg>
                    </button>
                    <div id="dropdownMenuArea" class="absolute z-10 bg-[#FAFAFA] rounded-md shadow-lg hidden mt-2.5 ">
                        <ul class="p-3 space-y-2">
                            <li>
                                <label for="bydalen-checkbox" class="flex items-center justify-between w-full cursor-pointer">
                                    <span class="ml-2 text-gray-700 dark:text-gray-300">Bydalen</span>
                                    <div class="flex items-center">
                                        <input type="checkbox" id="bydalen-checkbox" class="sr-only peer form-checkbox cursor-pointer" value="bydalen" />
                                        <div class="w-[20px] h-[20px] bg-white rounded border border-gray-400 peer-checked:bg-black peer-checked:border-black flex justify-center items-center">
                                            <svg class="w-full h-full fill-none stroke-white stroke-2 opacity-100 peer-checked:opacity-0 transition-opacity" viewBox="0 0 24 24">
                                                @templ.Raw(iconSVG("check"))
                                            </svg>
                                        </div>
                                    </div>
                                </label>
                            </li>
                            <li>
                                <label for="haga-checkbox" class="flex items-center justify-between w-full cursor-pointer">
                                    <span class="ml-2 text-gray-700 dark:text-gray-300">Haga</span>
                                    <div class="flex items-center">
                                        <input type="checkbox" id="haga-checkbox" class="sr-only peer form-checkbox cursor-pointer" value="haga" />
                                        <div class="w-[20px] h-[20px] bg-white rounded border border-gray-400 peer-checked:bg-black peer-checked:border-black flex justify-center items-center">
                                            <svg class="w-full h-full fill-none stroke-white stroke-2 opacity-100 peer-checked:opacity-0 transition-opacity" viewBox="0 0 24 24">
                                                @templ.Raw(iconSVG("check"))
                                            </svg>
                                        </div>
                                    </div>
                                </label>
                            </li>
                            <li>
                                <label for="centrum-checkbox" class="flex items-center justify-between w-full cursor-pointer">
                                    <span class="ml-2 text-gray-700 dark:text-gray-300">Centrum</span>
                                    <div class="flex items-center">
                                        <input type="checkbox" id="centrum-checkbox" class="sr-only peer form-checkbox cursor-pointer" value="centrum" />
                                        <div class="w-[20px] h-[20px] bg-white rounded border border-gray-400 peer-checked:bg-black peer-checked:border-black flex justify-center items-center">
                                            <svg class="w-full h-full fill-none stroke-white stroke-2 opacity-100 peer-checked:opacity-0 transition-opacity" viewBox="0 0 24 24">
                                                @templ.Raw(iconSVG("check"))
                                            </svg>
                                        </div>
                                    </div>
                                </label>
                            </li>
                            <li>
                                <label for="östermalm-checkbox" class="flex items-center justify-between w-full cursor-pointer">
                                    <span class="ml-2 text-gray-700 dark:text-gray-300">Östermalm</span>
                                    <div class="flex items-center">
                                        <input type="checkbox" id="östermalm-checkbox" class="sr-only peer form-checkbox cursor-pointer" value="östermalm" />
                                        <div class="w-[20px] h-[20px] bg-white rounded border border-gray-400 peer-checked:bg-black peer-checked:border-black flex justify-center items-center">
                                            <svg class="w-full h-full fill-none stroke-white stroke-2 opacity-100 peer-checked:opacity-0 transition-opacity" viewBox="0 0 24 24">
                                                @templ.Raw(iconSVG("check"))
                                            </svg>
                                        </div>
                                    </div>
                                </label>
                            </li>
                            <li>
                                <label for="skönsmon-checkbox" class="flex items-center justify-between w-full cursor-pointer">
                                    <span class="ml-2 mr-4 text-gray-700 dark:text-gray-300">Skönsmon</span>
                                    <div class="flex items-center">
                                        <input type="checkbox" id="skönsmon-checkbox" class="sr-only peer form-checkbox cursor-pointer" value="skönsmon" />
                                        <div class="w-[20px] h-[20px] bg-white rounded border border-gray-400 peer-checked:bg-black peer-checked:border-black flex justify-center items-center">
                                            <svg class="w-full h-full fill-none stroke-white stroke-2 opacity-100 peer-checked:opacity-0 transition-opacity" viewBox="0 0 24 24">
                                                @templ.Raw(iconSVG("check"))
                                            </svg>
                                        </div>
                                    </div>
                                </label>
                            </li>
                        </ul>
                    </div>
                </div>
					</div>
				</div>
				//@PrimaryButton("Lägg till sensor")
				<div class="h-14 flex justify-end items-center self-stretch">
					<div id="#list-map" class="w-[200px] h-[42px] p-1.5 bg-[#1C1C281F] bg-opacity-20 rounded-2xl gap-2 justify-end items-center inline-flex">
						@listMapSwitch("Lista", iconSVG("list"))
						@listMapSwitch("Karta", iconSVG("map"))
					</div>
				</div>
			</div>
			<div class="w-full flex flex-col gap-6 items-start inline-flex">
				
				<div id="sensors-table" class="w-full">
					@SensorTable(l10n, asset, sensors)
				</div>
			</div>
		</div>
	</div>
}

//HELPERS
func tableRowsFromSensors(l10n locale.Localizer, _ assets.AssetLoaderFunc, sensors []SensorViewModel) []templ.Component {
	rows := []templ.Component{}

	labelText := map[bool]string{
		false: l10n.Get("Inaktiv"),
		true:  l10n.Get("Aktiv"),
	}

	for _, sensor := range sensors {
		isActive := sensor.Active

		cells := []templ.Component{TextFirstCell(sensor.Name)}
		cells = append(cells, LabelCell(labelText[isActive], isActive))
		cells = append(cells, TextCell(sensor.DevEUI))
		//cells = append(cells, TextCell(sensor.net))
		cells = append(cells, TextCell(fmt.Sprintf("%d", sensor.BatteryLevel)))
		cells = append(cells, TextCell(sensor.LastSeen.Format(time.RFC3339)))

		if sensor.HasAlerts {
			cells = append(cells, Cell(SVG("alert-triangle", Size(24), AlertStyle())))
		} else {
			cells = append(cells, TextCell(""))
		}

		linkUrl := templ.URL(fmt.Sprintf("/components/sensors/details?id=%s",sensor.DeviceID))
		pushUrl := templ.URL(fmt.Sprintf("/sensors/%s",sensor.DeviceID))

		row := LinkRow(cells, linkUrl, pushUrl, "sensor")
		rows = append(rows, row)
	}

	return rows
}
