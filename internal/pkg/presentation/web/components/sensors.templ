package components

import (
	"context"
	"fmt"

	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
	"github.com/diwise/diwise-web/internal/pkg/presentation/web/assets"
	"io"
	"net/url"
	"strconv"
	"time"
)

type SensorViewModel struct {
	Active       bool
	DevEUI       string
	DeviceID     string
	Name         string
	BatteryLevel int
	LastSeen     time.Time
	HasAlerts    bool
}

func (s *SensorViewModel) Battery() string {
	if s.BatteryLevel < 0 || s.BatteryLevel > 100 {
		return "?"
	}
	return strconv.Itoa(s.BatteryLevel)
}

type StatisticsViewModel struct {
	Total    int
	Active   int
	Inactive int
	Online   int
	Unknown  int
}

type SensorListViewModel struct {
	Sensors    []SensorViewModel
	Statistics StatisticsViewModel
	Meta       Meta
}

type Meta struct {
	TotalRecords int
	Offset       int
	Limit        int
	Count        int
	PageIndex    int
	RawQuery     string
}

templ SearchField(l10n locale.Localizer) {
	<div class="w-[237px] h-12 flex-col justify-center items-start gap-2 inline-flex">
		<div class="self-stretch pl-5 pr-4 py-3 bg-white bg-opacity-50 rounded-xl border border-[#0A0C0F] border-opacity-50 justify-start items-center gap-2 inline-flex dark:bg-gray-800 dark:border-zinc-600">
			<div class="w-[22px] h-[22px]">
				<svg class="w-[22px] h-[22px] fill-[#444450] dark:fill-zinc-600">
					@templ.Raw(iconSVG("search"))
				</svg>
			</div>
			<div class="grow shrink basis-0 text-[#0A0C0F] text-opacity-30 text-lg font-normal font-sans leading-normal inline-flex">
				<input
					class="w-[175px] rounded-xl bg-white dark:bg-gray-800 dark:rounded-none dark:text-white dark:font-normal"
					type="search"
					placeholder={ l10n.Get("search") }
				/>
			</div>
		</div>
	</div>
}

templ PrimaryButton(title string) {
	<div class="w-[200px] h-10 pl-[18px] pr-4 py-2 bg-amber-700 rounded-xl justify-center items-center gap-2 inline-flex dark:bg-gray-800 dark:border-zinc-600 dark:border-2 cursor-pointer">
		<div class="flex items-center gap-2">
			<div class="text-white text-base font-bold font-sans leading-normal">
				{ title }
			</div>
			<div class="w-[18px] h-[18px] flex items-center">
				<svg class="w-[18px] h-[18px] stroke-white fill-white">
					@templ.Raw(iconSVG("chevron-down"))
				</svg>
			</div>
		</div>
	</div>
}

templ SecondaryButton(title string) {
	<div class="w-28 h-10 pl-4 pr-[18px] py-2 rounded-xl border-2 border-[#1C1C284D] border-opacity-30 bg-white bg-opacity-20 dark:bg-gray-800 justify-center items-center gap-2 inline-flex dark:border-zinc-600">
		<svg class="w-[18px] h-[18px] dark:fill-zinc-600">
			@templ.Raw(iconSVG("filter"))
		</svg>
		<div class="text-[#444450] text-base font-bold font-sans leading-normal dark:text-white">
			{ title }
		</div>
	</div>
}

templ SumOfStuff(l10n locale.Localizer, stats StatisticsViewModel) {
	<div class="flex items-start gap-10 dark:text-white">
		<div class="flex items-start gap-2">
			{ l10n.Get("total") }
			<span class="font-bold">{ fmt.Sprintf("%d", stats.Total) }</span>
		</div>
		<div class="flex items-start gap-2">
			{ l10n.Get("manyactive") }
			<span class="font-bold">{ fmt.Sprintf("%d", stats.Active) }</span>
		</div>
		<div class="flex items-start gap-2">
			{ l10n.Get("manyinactive") }
			<span class="font-bold">{ fmt.Sprintf("%d", stats.Inactive) }</span>
		</div>
		<div class="flex items-start gap-2">
			{ l10n.Get("unregistered") }
			<span class="font-bold">{ fmt.Sprintf("%d", stats.Unknown) }</span>
		</div>
	</div>
}

/*

templ SensorTable(l10n locale.Localizer, asset assets.AssetLoaderFunc, sensors SensorListViewModel) {
	@Table(
		HeaderRow(TableHeaderText(l10n.Get("name")), TableHeaderText(l10n.Get("status")), TableHeaderText(l10n.Get("deveui")), TableHeaderText(l10n.Get("batterylevel")), TableHeaderText(l10n.Get("lastseen")), TableHeaderText(l10n.Get("alerts"))),
		TableData(tableRowsFromSensors(l10n, asset, sensors.Sensors)...),
		DataTableFooter("7", "sensors"),
	)
}

*/
func listMapSwitch(name, icon string) templ.Component {

	/*selectedButtonClass := "bg-black text-white"
	  selectedIconClass := "fill-white"*/

	defaultButtonClass := "bg-white bg-opacity-95 text-gray-900 text-opacity-90"
	defaultIconClass := "fill-[#1c1c28] dark:fill-zinc-600"

	buttonClass := defaultButtonClass
	iconClass := defaultIconClass

	/*if isActive {
	    buttonClass = selectedButtonClass
	    iconClass = selectedIconClass
	}*/

	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, fmt.Sprintf(
			`
                <button class="h-[30px] px-3.5 py-1.5 rounded-xl justify-center items-center gap-2 flex cursor-pointer %s"
                    hx-get={"?selected=%s"}
                    hx-push-url="true"
                    hx-vals='{"state":"selected"}'
                    hx-trigger="click">
                    <svg class="w-[18px] h-[18px] %s"> 
                        %s
                    </svg>
                    <div class="text-sm font-bold font-sans leading-[18px]">%s</div>
                </button>
            `, buttonClass, name, iconClass, icon, name,
		))
		return err
	})
}

templ dropdownMenu(l10n locale.Localizer, id string, names []string) {
	<button id={ id } type="button" class="flex items-center justify-start text-left p-2 gap-2 font-bold hover:bg-[#1c1c2829] hover:rounded-lg" onclick={ toggleDropdownType() }>
		{ l10n.Get("sensortype") }
		<svg class="w-[18px] h-[18px] dark:fill-white">
			@templ.Raw(iconSVG("chevron-down"))
		</svg>
	</button>
	<div id={ id } class="absolute z-10 hidden bg-[#FAFAFA] rounded-md shadow-lg mt-2.5">
		<ul class="p-3 space-y-2">
			for _,n := range names {
				@dropdownMenuItem(n)
			}
		</ul>
	</div>
}

templ dropdownMenuItem(name string) {
	<li>
		<label for={ name + "-checkbox" } class="flex items-center justify-between w-full cursor-pointer">
			<span class="ml-2 text-gray-700 dark:text-gray-300 ">{ name }</span>
			<div class="flex items-center">
				<input type="checkbox" id={ name + "-checkbox" } class="sr-only peer form-checkbox cursor-pointer" value={ name }/>
				<div class="w-[20px] h-[20px] bg-white rounded border border-gray-400 peer-checked:bg-black peer-checked:border-black flex justify-center items-center">
					<svg class="w-full h-full fill-none stroke-white stroke-2 opacity-100 peer-checked:opacity-0 transition-opacity" viewBox="0 0 24 24">
						@templ.Raw(iconSVG("check"))
					</svg>
				</div>
			</div>
		</label>
	</li>
}

templ Sensors(l10n locale.Localizer, asset assets.AssetLoaderFunc, sensors SensorListViewModel) {
	<div class="flex flex-col items-start gap-14 flex-[1_0_0] py-8 w-full" id="sensor-view">
		<div class="flex flex-col items-start gap-6 self-stretch w-full px-8">
			<div class="">
				<h1 class="dark:text-white text-2xl font-bold font-heading leading-loose">{ l10n.Get("sensors") }</h1>
			</div>
			@SumOfStuff(l10n, sensors.Statistics)
		</div>
		<div class="h-px border-t border-[#1C1C284D] w-full dark:border-[#FFFFFF4D]"></div>
		<div class="flex px-8 flex-col items-start self-stretch gap-10">
			<div class="w-full h-12 justify-between items-center inline-flex">
				<div class="inline-flex justify-start items-center gap-[34px] dark:text-white">
					@SearchField(l10n)
					<div class="flex items-center flex-[1_0_0] gap-6">
						<div class="relative ml-4">
							@dropdownMenu(l10n, "dropdownMenuType", []string{"Avlopp", "Livboj", "Sandficka", "Soptunna"})
						</div>
						<div class="relative">
							@dropdownMenu(l10n, "dropdownMenuArea", []string{"Bydalen", "Haga", "Centrum", "Östermalm", "Skönsmon"})
						</div>
					</div>
				</div>
				//@PrimaryButton("Lägg till sensor")
				<div class="h-14 flex justify-end items-center self-stretch">
					<div id="#list-map" class="w-[200px] h-[42px] p-1.5 bg-[#1C1C281F] bg-opacity-20 rounded-2xl gap-2 justify-end items-center inline-flex">
						@listMapSwitch("Lista", iconSVG("list"))
						@listMapSwitch("Karta", iconSVG("map"))
					</div>
				</div>
			</div>
			<div class="w-full flex flex-col gap-6 items-start inline-flex">
				<div id="sensors-table" class="w-full" hx-boost="true">
					@SensorList(l10n, asset, sensors)
				</div>
			</div>
		</div>
	</div>
}

func SensorList(l10n locale.Localizer, asset assets.AssetLoaderFunc, viewModel SensorListViewModel) templ.Component {
	header := THead("border-b border-[#1F1F25] dark:border-white", headers(l10n, "name", "status", "deveui", "batterylevel", "lastseen", "alerts")...)
	body := TBody(sensorsFromRows(l10n, viewModel.Sensors)...)

	pg := []templ.Component{TRow("", HxOptions{}, Td(6, "", pageing("/sensors", viewModel.Meta)))}
	footer := TFoot(pg)

	tbl := Table(header, body, footer)

	return tbl
}

func pageing(baseUrl string, meta Meta) (templ.Component) {
	q, err := url.ParseQuery(meta.RawQuery)
	if err != nil {
		return nil
	}

	q.Del("page")
	q.Set("limit", strconv.Itoa(meta.Limit))

	links := make([]templ.Component, 0)
	links = append(links, PageSizeSelect())

	for i := range meta.TotalRecords / meta.Limit {
		q.Set("page", strconv.Itoa(i+1))
		u := fmt.Sprintf("%s?%s", baseUrl, q.Encode())
		links = append(links, Link(u, strconv.Itoa(i+1)))
	}

	component := ComposeComponents(links...)

	return component
}

func headers(l10n locale.Localizer, text ...string) []templ.Component {
	cells := make([]templ.Component, len(text))
	for i, s := range text {
		cells[i] = Td(0, "px-6 py-3", Text(l10n.Get(s)))
	}
	return cells
}

func sensorToRow(l10n locale.Localizer, sensor SensorViewModel) templ.Component {
	labelText := map[bool]string{
		false: l10n.Get("inactive"),
		true:  l10n.Get("active"),
	}

	td := func(contents templ.Component) templ.Component {
		return Td(0, "px-6 py-3", contents)
	}
	a := func(text string) templ.Component {
		return Link("/sensors/"+sensor.DeviceID, text)
	}

	cells := make([]templ.Component, 6)
	cells[0] = td(Span("font-bold", a(sensor.Name)))
	cells[1] = Td(0, "", Label(labelText[sensor.Active], sensor.Active))
	cells[2] = td(a(sensor.DevEUI))
	cells[3] = td(Text(sensor.Battery()))
	cells[4] = td(DateTime(sensor.LastSeen))

	if sensor.HasAlerts {
		cells[5] = td(SVG("alert-triangle", Size(24), AlertStyle()))
	} else {
		cells[5] = td(Text(""))
	}

	css := "border-b border-[#1C1C284D] border-opacity-70 hover:bg-[#FAFAFA] dark:border-white dark:bg-opacity-20 hover:cursor-pointer"
	hxOptions := HxOptions{}

	row := TRow(css, hxOptions, cells...)

	return row
}

func sensorsFromRows(l10n locale.Localizer, sensors []SensorViewModel) []templ.Component {
	rows := make([]templ.Component, 0)

	for _, sensor := range sensors {
		rows = append(rows, sensorToRow(l10n, sensor))
	}

	return rows
}
