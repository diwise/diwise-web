package components

import (
	"fmt"
	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
	"time"
)

type SensorListViewModel struct {
	Sensors    []SensorViewModel
	Statistics StatisticsViewModel
	Pageing    PagingViewModel
	MapView    bool
}

type SensorViewModel struct {
	Active       bool
	DevEUI       string
	DeviceID     string
	Name         string
	Latitude     float64
	Longitude    float64
	BatteryLevel int
	LastSeen     time.Time
	HasAlerts    bool
	Type		 string
}

type StatisticsViewModel struct {
	Total    int
	Active   int
	Inactive int
	Online   int
	Unknown  int
}

templ Statistics(l10n locale.Localizer, model StatisticsViewModel) {
	<div class="flex items-start gap-10 dark:text-white">
		<div class="flex items-start gap-2">{ l10n.Get("total") }<span class="font-bold">{ fmt.Sprintf("%d", model.Total) } </span></div>
		<div class="flex items-start gap-2">{ l10n.Get("active") }<span class="font-bold">{ fmt.Sprintf("%d", model.Active) }</span></div>
		<div class="flex items-start gap-2">{ l10n.Get("inactive") }<span class="font-bold">{ fmt.Sprintf("%d", model.Inactive) }</span></div>
		<div class="flex items-start gap-2">{ l10n.Get("unregistered") }<span class="font-bold">{ fmt.Sprintf("%d", model.Unknown) }</span></div>
	</div>
}

templ SensorsList(l10n locale.Localizer, model SensorListViewModel) {
	<div class="flex flex-col items-start gap-14 flex-[1_0_0] py-8 w-full" id="sensor-view">
		<div class="flex flex-col items-start gap-6 self-stretch w-full px-8">
			<div class="">
				<h1 class="dark:text-white text-2xl font-bold font-heading leading-loose">{ l10n.Get("sensors") }</h1>
			</div>
			@Statistics(l10n, model.Statistics)
		</div>
		<div class="h-px border-t border-gray-30 w-full dark:border-white-30"></div>
		<div class="flex px-8 flex-col items-start self-stretch gap-10">
			<div class="w-full h-12 justify-between items-center inline-flex">
				<div class="inline-flex justify-start items-center gap-[34px] dark:text-white">
					<div class="flex items-center flex-[1_0_0] gap-6">
						@CheckboxList(l10n.Get("type")) {
							for _, t := range []string{"axsensor", "elsys","elt_2_hp",  "enviot", "milesight",  "niab-fls","qalcosonic",   "senlabt","sensative","sensefarm","vegapuls_air_41"} {
								@CheckboxOption("type", t, templ.Attributes{
									"hx-get":    string(templ.SafeURL(fmt.Sprintf("/components/sensors/list"))),
									"hx-target": "#tableOrMap",
								})
							}
						}
					</div>
					<div class="flex items-center flex-[1_0_0] gap-6">
						@CheckboxList(l10n.Get("status")) {
							for _, t := range []string{"active", "inactive"} {
								@CheckboxOption("status", t, templ.Attributes{
									"hx-get":    string(templ.SafeURL(fmt.Sprintf("/components/sensors/list"))),
									"hx-target": "#tableOrMap",
								})
							}
						}
					</div>
				</div>
				@TableOrMap(l10n, "/components/sensors/list")
			</div>
			@DataList(l10n, SensorsTable(l10n, model), SensorMap(l10n, model), model.MapView)
		</div>
	</div>
}

templ DataList(l10n locale.Localizer, tableComponent, mapComponent templ.Component, mapView bool) {
	<div id="tableOrMap" class="w-full flex flex-col gap-6 items-start inline-flex">
		<input
			type="hidden"
			id="mapview"
			name="mapview"
			class="filter"
			if mapView {
				value="true"
			} else {
				value="false"
			}
		/>
		<div
			if mapView {
				id="mapview"
			} else {
				id="tableview"
			}
			class="w-full"
		>
			if mapView {
				@mapComponent
			} else {
				@tableComponent
			}
		</div>
	</div>
}

func sensorsToMapFeature(model SensorListViewModel) FeatureCollection {
	features := make([]Feature, 0, len(model.Sensors))

	for _, sensor := range model.Sensors {
		if sensor.Latitude == 0 || sensor.Longitude == 0 {
			continue
		}
		feature := NewFeature(NewPoint(sensor.Latitude, sensor.Longitude))
		feature.AddProperty("type", "sensor")
		features = append(features, feature)
	}

	return NewFeatureCollection(features)
}

func SensorMap(l10n locale.Localizer, model SensorListViewModel) templ.Component {
	if !model.MapView {
		return templ.NopComponent
	}
	return Map(newMapData(62.3908, 17.3069), sensorsToMapFeature(model))
}

templ SensorRow(l10n locale.Localizer, sensor SensorViewModel) {
	<tr
		class="border-b border-gray-30 border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20 hover:cursor-pointer"
		hx-get={ string(templ.SafeURL(fmt.Sprintf("/components/sensors/details?id=%s", sensor.DeviceID))) }
		hx-target="#tableview"
		hx-push-url={ string(templ.SafeURL(fmt.Sprintf("/sensors/%s", sensor.DeviceID))) }
		hx-trigger="click"
		hx-disinherit="hx-target hx-push-url"
	>
		<td class="px-6 py-3"><span class="font-bold">{ sensor.Name }</span></td>
		if sensor.Active {
			<td class="px-6 py-3"><span class="px-2.5 py-1 rounded-full justify-start items-center gap-1.5 bg-primary-green-accent"><span class="text-sm font-bold font-sans leading-none text-primary-green">{ l10n.Get("active") }</span></span></td>
		} else {
			<td class="px-6 py-3"><span class="px-2.5 py-1 rounded-full justify-start items-center gap-1.5 bg-primary-green-accent"><span class="text-sm font-bold font-sans leading-none text-primary-green">{ l10n.Get("inactive") }</span></span></td>
		}
		<td class="px-6 py-3">{ sensor.Type }</td>
		<td class="px-6 py-3">{ sensor.DevEUI }</td>
		<td class="px-6 py-3">
			if sensor.BatteryLevel >=0 {
				{ fmt.Sprintf("%d%%", sensor.BatteryLevel) }
			} else {
				{  }
			}
		</td>
		<td class="px-6 py-3">
			if sensor.LastSeen.IsZero() {
				{ l10n.Get("-") }
			} else {
				{ sensor.LastSeen.Format("2006-01-02, 15:04") }
			}
		</td>
	</tr>
}

templ SensorsTable(l10n locale.Localizer, model SensorListViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-primary-dark dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("name") }</th>
				<th class="px-6 py-3">{ l10n.Get("status") }</th>
				<th class="px-6 py-3">{ l10n.Get("type") }</th>
				<th class="px-6 py-3">{ l10n.Get("deveui") }</th>
				<th class="px-6 py-3">{ l10n.Get("batterylevel") }</th>
				<th class="px-6 py-3">{ l10n.Get("lastseen") }</th>
			</tr>
		</thead>
		<tbody>
			for _, sensor := range model.Sensors {
				@SensorRow(l10n, sensor)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="6">
					@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ TableOrMap(l10n locale.Localizer, hxGet string) {
	<div class="flex items-center self-stretch gap-6">
		<div class="flex p-2 items-center gap-4 bg-tertiary-surface bg-opacity-20 dark:bg-primary-surface-white rounded-2xl gap-2">
			<div class="relative group">
				<button
					id="tableButton"
					hx-get={ string(templ.SafeURL(fmt.Sprintf("%s?mapview=false", hxGet))) }
					hx-target="#tableOrMap"
					class="flex p-1.5 rounded-[10px] justify-center items-center gap-1 cursor-pointer bg-black fill-white dark:bg-white dark:fill-black stroke-white dark:stroke-black hover:bg-tertiary-surface-hover"
				>
					<svg class="w-[18px] h-[18px]">
						@SVG("table", Size(24), NoFill(), Box(24, 24), Stroke(templ.Attributes{"stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round"}))
					</svg>
				</button>
				@Tooltip(l10n.Get("table"))
			</div>
			<div class="relative group">
				<button
					id="mapButton"
					hx-get={ string(templ.SafeURL(fmt.Sprintf("%s?mapview=true", hxGet))) }
					hx-target="#tableOrMap"
					class="flex p-1.5 rounded-[10px] justify-center items-center gap-1 cursor-pointer dark:fill-white hover:bg-tertiary-surface-hover"
				>
					<svg class="w-[18px] h-[18px]">
						@templ.Raw(iconSVG("map"))
					</svg>
				</button>
				@Tooltip(l10n.Get("map"))
			</div>
		</div>
	</div>
}
