package components

import (
	"context"
	"fmt"
	"io"
	"strconv"
	"time"
)

templ Table(header templ.Component, data templ.Component, footer templ.Component) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-[#2F2F3C] dark:text-white">
		@header
		@data
		@footer
	</table>
}

templ THead(cssClass string, cells ...templ.Component) {
	<thead
		if cssClass != "" {
			class={ cssClass }
		}
	>
		for _, cell := range cells {
			@cell
		}
	</thead>
}

type HxOptions struct {
	Get     string
	PushURL string
	Target  string
	Trigger string
}

templ TRow(cssClass string, hxOptions HxOptions, cells ...templ.Component) {
	<tr
		if cssClass != "" {
			class={ cssClass }
		}
		if hxOptions.Get != "" {
			hx-get={ string(templ.URL(hxOptions.Get)) }
		}
		if hxOptions.PushURL != "" {
			hx-push-url={ string(templ.URL(hxOptions.PushURL)) }
		}
		if hxOptions.Target != "" {
			hx-target={ "#" + hxOptions.Target }
		}
		if hxOptions.Trigger != "" {
			hx-trigger={ hxOptions.Trigger }
		}
	>
		for _, cell := range cells {
			@cell
		}
	</tr>
}

templ TBody(rows ...templ.Component) {
	<tbody>
		for _, row := range rows {
			@row
		}
	</tbody>
}

templ Td(colspan int, cssClass string, contents templ.Component) {
	<td
		if colspan > 0 {
			colspan={ fmt.Sprintf("%d", colspan) }
		}
		if cssClass != "" {
			class={ cssClass }
		}
	>
		@contents
	</td>
}

templ TFoot(rows []templ.Component) {
	<tfoot>
		for _, r:= range rows {
			@r
		}
	</tfoot>
}

func DateTime(date time.Time) templ.Component {
	if date.IsZero() {
		return Text("")
	}
	return Text(date.Format(time.RFC3339))
}

templ PageSizeSelect() {
	<select
		class="appearance-none outline-none px-3 py-1.5 bg-transparent text-sm font-normal font-sans leading-tight w-full h-full cursor-pointer"
		name="pageSize"
	>
		@Options([]OptionViewModel{
			{
				Value:    "10",
				Text:     "10",
				Selected: true,
			},
			{
				Value:    "20",
				Text:     "20",
				Selected: false,
			},
			{
				Value:    "50",
				Text:     "50",
				Selected: false,
			},
			{
				Value:    "100",
				Text:     "100",
				Selected: false,
			},
			{
				Value:    "All",
				Text:     "All",
				Selected: false,
			},
		})
	</select>
}

/*

templ HeaderRow(titles ...templ.Component) {
	<thead class="border-b border-[#1F1F25] dark:border-white">
		<tr>
			for _, title := range titles {
				@title
			}
		</tr>
	</thead>
}

templ TableData(rows ...templ.Component) {
	<tbody>
		for _, row := range rows {
			@row
		}
	</tbody>
}

templ TableRow(cells ...templ.Component) {
	<tr class="border-b border-[#1C1C284D] border-opacity-70 hover:bg-[#FAFAFA] dark:border-white dark:bg-opacity-20">
		for _, cell := range cells {
			@cell
		}
	</tr>
}

templ LinkRow(cells []templ.Component, url, pushUrl templ.SafeURL, viewName string) {
	<tr
		class="border-b border-[#1C1C284D] border-opacity-70 hover:bg-[#FAFAFA] dark:border-white dark:bg-opacity-20 hover:cursor-pointer"
		hx-get={ string(url) }
		hx-target={ fmt.Sprintf("#%s-view", viewName) }
		hx-push-url={ string(pushUrl) }
		hx-trigger="click"
	>
		for _, cell := range cells {
			@cell
		}
	</tr>
}

*/

templ Label(label string, active bool) {
	<span
		class={ "px-2.5 py-1 rounded-full justify-start items-center gap-1.5",
        templ.KV("bg-[#AAD4BF]", active),
        //templ.KV("dark:bg-emerald-800", active),
        templ.KV("bg-gray-900", !active),
        templ.KV("bg-opacity-10", !active),
        templ.KV("dark:bg-white", !active),
        templ.KV("dark:bg-opacity-20", !active) }
	>
		<span
			class={ "text-sm font-bold font-sans leading-none",
            templ.KV("text-[#00592D]", active),
            //templ.KV("dark:text-gray-200", active),
            templ.KV("text-neutral-800", !active),
            templ.KV("dark:text-neutral-300", !active) }
		>
			{ label }
		</span>
	</span>
}

templ DataTableFooter(colspan, tableName string) {
	<tfoot>
		<tr>
			<td colspan={ colspan }>
				<div id="paginering" class="relative w-full h-[60px] px-4 py-3.5 rounded-b-2xl border-white border-opacity-30 justify-between items-center flex">
					<div class="h-8 justify-start items-center gap-2 flex">
						<span class="text-zinc-700 dark:text-neutral-200 text-sm font-normal font-sans leading-[18px]">Rader per sida:</span>
						<div class="relative inline-flex h-8 bg-white bg-opacity-50 rounded-xl border border-[#0A0C0F] border-opacity-50">
							@PageSizeSelect()
							<div class="absolute inset-y-0 right-0 pr-1 flex items-center pointer-events-none">
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-4 h-4 text-zinc-700 dark:text-neutral-200">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
								</svg>
							</div>
						</div>
					</div>
					<div class="absolute inset-0 flex justify-center items-center">
						<button
							class="p-1.5 rounded-full justify-center items-center gap-1 flex"
							if !isFirstPage(ctx) {
								hx-get={ fmt.Sprintf("/components/tables/%s?page=%d&limit=%s", tableName, prevPage(ctx), ctx2str(ctx, PageSize)) }
								hx-target={ fmt.Sprintf("#%s-table", tableName) }
								hx-trigger="click"
							} else {
								disabled
							}
						>
							<span class="w-5 h-5">
								if isFirstPage(ctx) {
									@SVG("arrow-left", DisabledStyle())
								} else {
									@SVG("arrow-left")
								}
							</span>
						</button>
						<span class="h-7 px-3 justify-between items-center flex">
							for _, page := range pagerIndexes(ctx) {
								@PageSelector(fmt.Sprintf("%d", page), tableName)
							}
						</span>
						<button
							class="p-1.5 rounded-full justify-center items-center gap-1 flex"
							if !isLastPage(ctx) {
								hx-get={ fmt.Sprintf("/components/tables/%s?page=%d&limit=%s", tableName, nextPage(ctx), ctx2str(ctx, PageSize)) }
								hx-target={ fmt.Sprintf("#%s-table", tableName) }
								hx-trigger="click"
							} else {
								disabled
							}
						>
							<span class="w-5 h-5">
								if isLastPage(ctx) {
									@SVG("arrow-right", DisabledStyle())
								} else {
									@SVG("arrow-right", Box(24, 24))
								}
							</span>
						</button>
					</div>
				</div>
			</td>
		</tr>
	</tfoot>
}

templ TableHeaderText(title string) {
	<th class="px-6 py-3">
		{ title }
	</th>
}

templ Text(data string) {
	{ data }
}

templ Link(url, value string) {
	<a href={ templ.URL(url) }>{ value }</a>
}

templ FirstText(data string) {
	<span class="font-bold">
		{ data }
	</span>
}

templ Cell(contents templ.Component) {
	<td class="px-6 py-3">
		@contents
	</td>
}

templ LinkCell(contents templ.Component, url, viewName string) {
	<td class="px-6 py-3 hover:cursor-pointer" hx-get={ url } hx-target={ fmt.Sprintf("#%s-view", viewName) } hx-trigger="click">
		@contents
	</td>
}

templ TextFirstCell(data string) {
	@Cell(FirstText(data))
}

templ TextLinkCell(data, url, viewName string) {
	@LinkCell(Text(data), url, viewName)
}

templ TextCell(data string) {
	@Cell(Text(data))
}

templ ProgressBarCell(data string) {
	@Cell(progressBar(data))
}

func progressBar(data string) templ.Component {
	value, _ := strconv.Atoi(data)

	colourClass := ""
	switch {
	case value >= 70:
		colourClass = "bg-[#B92424]" //red
	case value <= 40:
		colourClass = "bg-[#00733B]" //green
	default:
		colourClass = "bg-[#DB6900]" //orange
	}

	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, fmt.Sprintf(
			`<div>
                %s%%
            </div>
            <div class="bg-gray-200 w-full rounded-lg">
                <div class="%s rounded-lg" style="width: %s%%; height: 6px"></div>
            </div>`, data, colourClass, data,
		))
		return err
	})
}

templ LabelCell(label string, active bool) {
	@Cell(Label(label, active))
}

//PAGING
type PagingConfigKey string

var PageSize PagingConfigKey = "page.size"
var PageIndex PagingConfigKey = "page.index"
var PageLast PagingConfigKey = "page.last"

templ PageSelector(index, tableName string) {
	if index == ctx2str(ctx, PageIndex) {
		<div class="flex-col justify-start items-start inline-flex">
			<div class="w-[40.89px] rounded-lg justify-start items-center gap-0.5 inline-flex p-0.5 ">
				<div class="grow shrink basis-0 text-center text-zinc-700 dark:text-neutral-200 text-base font-bold font-sans leading-normal">
					{ index }
				</div>
			</div>
		</div>
	} else {
		<button class="flex-col justify-start items-start inline-flex" hx-get={ fmt.Sprintf("/components/tables/%s?page=%s&limit=%s", tableName, index, ctx2str(ctx, PageSize)) } hx-target={ fmt.Sprintf("#%s-table", tableName) } hx-trigger="click">
			<div class="w-[40.89px] rounded-lg justify-start items-center gap-0.5 inline-flex py-0.5 ">
				<div class="grow shrink basis-0 text-center text-zinc-500 dark:text-slate-300 text-base font-normal font-sans underline leading-normal">
					{ index }
				</div>
			</div>
		</button>
	}
}

//HELPERS
func isFirstPage(ctx context.Context) bool {
	return ctx2str(ctx, PageIndex) == "1"
}

func isLastPage(ctx context.Context) bool {
	return ctx2str(ctx, PageIndex) == ctx2str(ctx, PageLast)
}

func pageCount(ctx context.Context) int64 {
	count, _ := strconv.ParseInt(ctx2str(ctx, PageLast), 10, 64)
	return count
}

func pageIndex(ctx context.Context) int64 {
	current, _ := strconv.ParseInt(ctx2str(ctx, PageIndex), 10, 64)
	return current
}

func prevPage(ctx context.Context) int64 {
	current := pageIndex(ctx)
	return current - 1
}

func nextPage(ctx context.Context) int64 {
	current := pageIndex(ctx)
	return current + 1
}

func pagerIndexes(ctx context.Context) []int64 {
	start := pageIndex(ctx)
	last := pageCount(ctx)

	const PagerWidth int64 = 6

	start -= (PagerWidth / 2)

	if start > (last - PagerWidth) {
		start = last - PagerWidth
	}

	if start < 1 {
		start = 1
	}

	result := []int64{}

	if start != 1 {
		start = start + 1
		result = append(result, 1, start)
	} else {
		result = append(result, 1)
	}

	page := start + 1

	for len(result) < int(PagerWidth) {
		if page >= last {
			break
		}

		result = append(result, page)
		page = page + 1
	}

	if result[len(result)-1] < last {
		result = append(result, last)
	}

	return result
}

func ctx2str(ctx context.Context, key any) string {
	return fmt.Sprintf("%d", ctx.Value(key))
}
