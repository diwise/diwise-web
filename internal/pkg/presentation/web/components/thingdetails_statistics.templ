package components

import (
	"fmt"
	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
	"github.com/diwise/diwise-web/internal/pkg/presentation/web/assets"
	"strings"
	"time"
)

func ThingStatistics(l10n locale.Localizer, asset assets.AssetLoaderFunc, model ThingDetailsViewModel) templ.Component {
	thingType := strings.ToLower(model.Thing.Type)

	switch thingType {
	case "beach":
		fallthrough
	case "pointofinterest":
		return templ.NopComponent
	case "building":
		return templ.NopComponent
	case "wastecontainer":
		fallthrough
	case "container":
		return thingTypeStatistics(StatisticsWasteContainer(l10n, model))
	case "lifebuoy":
		return templ.NopComponent
	case "passage":
		return thingTypeStatistics(StatisticsPassage(l10n, model))
	case "pumpingstation":
		return templ.NopComponent
	case "room":
		return thingTypeStatistics(StatisticsRoom(l10n, model))
	case "sewer":
		return thingTypeStatistics(StatisticsSewer(l10n, model))
	case "watermeter":
	}

	return templ.NopComponent
}

templ thingTypeStatistics(c templ.Component) {
	<div class="flex flex-col items-start self-stretch gap-6 py-6 pl-9 text-secondary-dark dark:text-secondary">
		@c
	</div>
}

templ StatisticsFilter(l10n locale.Localizer, model ThingDetailsViewModel) {
	<div class="flex flex-col items-start gap-2">
		<div class="font-bold">
			{ l10n.Get("timeinterval") }
		</div>
		<div class="">
			<input
				name="timeAt"
				type="datetime-local"
				id="timeAt"
				hx-trigger="change, load"
				hx-include="#endTimeAt,#tableButton,#graphButton"
				hx-target="#measurementCharts"
				hx-get={ fmt.Sprintf("/components/things/measurements/%s?type=%s&subType=%s", model.Thing.ID, model.Thing.Type, model.Thing.SubType) }
				hx-params="*"
				class="border border-input-surface dark:border-white-50 rounded-xl py-2 px-3 dark:bg-input-surface-dark"
			/>
			-
			<input
				name="endTimeAt"
				type="datetime-local"
				id="endTimeAt"
				hx-trigger="change"
				hx-include="#timeAt,#tableButton,#graphButton"
				hx-target="#measurementCharts"
				hx-get={ fmt.Sprintf("/components/things/measurements/%s?type=%s&subType=%s", model.Thing.ID, model.Thing.Type, model.Thing.SubType) }
				hx-params="*"
				class="border border-input-surface dark:border-white-50 rounded-xl py-2 px-3 dark:bg-input-surface-dark"
			/>
		</div>
	</div>
	<div class="flex flex-col items-start gap-2">
		<div class="text-primary-dark font-bold">
			&nbsp;
		</div>
		<div class="">
			@graphTableButtons(l10n)
		</div>
	</div>
}

templ StatisticsData(l10n locale.Localizer, graphComponent, tableComponent templ.Component, tableView bool) {
	<div id="graphOrTable" class="w-full flex flex-col gap-6 items-start inline-flex">
		<input
			type="hidden"
			id="tableview"
			name="tableview"
			class="filter"
			if tableView {
				value="true"
			} else {
				value="false"
			}
		/>
		<div
			if tableView {
				id="tableview"
			} else {
				id="graphview"
			}
			class="w-full"
		>
			if tableView {
				@tableComponent
			} else {
				@graphComponent
			}
		</div>
	</div>
}

func RenderStatisticsGraph(l10n locale.Localizer, model ThingDetailsViewModel) templ.Component {
	startDate := time.Now().Add(-24 * time.Hour)
	endDate := time.Now()

	if len(model.Thing.Measurements) > 0 {
		startDate = model.Thing.Measurements[0].Timestamp.Add(-24 * time.Hour)
		endDate = model.Thing.Measurements[0].Timestamp
	}

	return Graph(l10n, startDate, endDate)
}

templ Graph(l10n locale.Localizer, startDate, endDate time.Time) {
	<div
		id="graphView"
		class="w-full"
		style="height: 40vh; position: relative;"
		data-start-date={ fmt.Sprintf("%s", startDate.Format("2006-01-02 15:04")) }
		data-end-date={ fmt.Sprintf("%s", endDate.Format("2006-01-02 15:04")) }
	>
		<canvas id="measurement-chart"></canvas>
		<div id="measurementCharts" style="display:none;"></div>
	</div>
	<script>
		(() => {
			const graphElement = document.getElementById('graphView');
			if (graphElement) {
				const startDateStr = graphElement.getAttribute('data-start-date');
				const endDateStr = graphElement.getAttribute('data-end-date');
				
				const timeAtInput = document.getElementById("timeAt");
				const endTimeAtInput = document.getElementById("endTimeAt");

				var startDate = dateFns.startOfDay(new Date(startDateStr));
  				var endDate = dateFns.endOfDay(new Date(endDateStr)); 

				var formattedStartDate = dateFns.format(startDate, 'yyyy-MM-dd HH:mm');
				var formattedEndDate = dateFns.format(endDate, 'yyyy-MM-dd HH:mm');

				if (timeAtInput && endTimeAtInput) {
					timeAtInput.value = formattedStartDate;
					endTimeAtInput.value = formattedEndDate;
				}
			}
		})();
	</script>
}

templ StatisticsWasteContainer(l10n locale.Localizer, model ThingDetailsViewModel) {
	<div class="flex items-center w-full justify-between">
		<div class="flex flex-col gap-2">
			<div class="">{ l10n.Get("currentlevel") }</div>
			<div class="text-3xl font-bold">
				{ fmt.Sprintf("%0.f%%", model.Thing.GetFloatOrDefault("percent", 0)) }
			</div>
		</div>
		<div class="flex items-center gap-6">
			@StatisticsFilter(l10n, model)
		</div>
	</div>
	<div id="statisticsGraph" class="w-full">
		@RenderStatisticsGraph(l10n, model)
	</div>
	<div id="statisticsTable" class="w-full">
		@StatisticsWasteContainerTable(l10n, model)
	</div>
	<script>
		function showGraph() {
			document.getElementById('statisticsGraph').style.display = 'block';
			document.getElementById('statisticsTable').style.display = 'none';
		}

		function showTable() {
			document.getElementById('statisticsGraph').style.display = 'none';
			document.getElementById('statisticsTable').style.display = 'block';
		}

		document.addEventListener('DOMContentLoaded', function () {
			showGraph();
		});
	</script>
}

func WastecontainerChart(datasets []ChartDataset) templ.Component {
	maxvalue := uint(100)
	stepsize := uint(10)
	cfg := NewChartConfiguration("line", false, nil, &maxvalue, &stepsize)
	cfg.Timeseries(true)
	cfg.Add(datasets...)

	return Chart("measurement-chart", "", cfg)
}

templ StatisticsWasteContainerTable(l10n locale.Localizer, model ThingDetailsViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-primary-dark dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("time") }</th>
				<th class="px-6 py-3">{ l10n.Get("fillinglevel") }</th>
			</tr>
		</thead>
		<tbody>
			for _, measurement := range model.Thing.Measurements {
				@StatisticsWasteContainerTableRow(l10n, measurement)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="6">
					//@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ StatisticsWasteContainerTableRow(l10n locale.Localizer, measurement MeasurementViewModel) {
	<tr class="border-b border-gray-30 border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20">
		<td class="px-6 py-3">{ measurement.Timestamp.Format("2006-01-02 15:04") }</td>
		<td class="px-6 py-3">
			if measurement.Value != nil {
				{ fmt.Sprintf("%0.f%%", *measurement.Value) }
			} else {
				{ l10n.Get("noData") }
			}
		</td>
	</tr>
}

templ StatisticsSewer(l10n locale.Localizer, model ThingDetailsViewModel) {
	//Statistik
	<div class="flex flex-col items-start self-stretch gap-6 py-6 pl-9 text-secondary-dark dark:text-secondary">
		<div class="flex items-center w-full justify-between">
			<div class="flex flex-col gap-2">
				<div class="">{ l10n.Get("currentlevel") }</div>
				<div class="text-3xl font-bold">{ fmt.Sprintf("%0.f%%", model.Thing.GetFloatOrDefault("percent", 0)) }</div>
			</div>
			<div class="flex items-center gap-6">
				@StatisticsFilter(l10n, model)
			</div>
		</div>
		@StatisticsData(l10n, StatisticsSewerContainerGraph(l10n, model), StatisticsSewerTable(l10n, model), model.TableView)
	</div>
}

templ StatisticsSewerContainerGraph(l10n locale.Localizer, model ThingDetailsViewModel) {
	<div id="graphView" class="w-full">
		<canvas id="measurement-chart"></canvas>
		<div id="measurementCharts" style="display:none;"></div>
	</div>
}

templ StatisticsSewerTable(l10n locale.Localizer, model ThingDetailsViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-primary-dark dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("time") }</th>
				<th class="px-6 py-3">{ l10n.Get("fillinglevel") }</th>
			</tr>
		</thead>
		<tbody>
			//TODO: Här ska mätningar listas
			for _, measurement := range model.Thing.Measurements {
				@StatisticsSewerTableRow(l10n, measurement)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="6">
					//@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ StatisticsSewerTableRow(l10n locale.Localizer, thing MeasurementViewModel) {
	<tr class="border-b border-gray-30 border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20">
		<td class="px-6 py-3">00:00</td>
		<td class="px-6 py-3">20%</td>
	</tr>
}

templ StatisticsSandStorage(l10n locale.Localizer, model ThingDetailsViewModel) {
	//Statistik
	<div class="flex flex-col items-start self-stretch gap-6 py-6 pl-9 text-secondary-dark dark:text-secondary">
		<div class="flex items-center w-full justify-between">
			<div class="flex flex-col gap-2">
				<div class="">{ l10n.Get("currentlevel") }</div>
				<div class="text-3xl font-bold">
					{ fmt.Sprintf("%0.f%%", model.Thing.GetFloatOrDefault("percent", 0)) }
				</div>
			</div>
			<div class="flex items-center gap-6">
				@StatisticsFilter(l10n, model)
			</div>
		</div>
		@StatisticsData(l10n, RenderStatisticsGraph(l10n, model), StatisticsSandStorageTable(l10n, model), model.TableView)
	</div>
}

func SandStorageChart(datasets []ChartDataset) templ.Component {
	maxvalue := uint(100)
	stepsize := uint(10)
	cfg := NewChartConfiguration("line", false, nil, &maxvalue, &stepsize)
	cfg.Timeseries(true)
	cfg.Add(datasets...)

	return Chart("measurement-chart", "", cfg)
}

templ StatisticsSandStorageTable(l10n locale.Localizer, model ThingDetailsViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-primary-dark dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("time") }</th>
				<th class="px-6 py-3">{ l10n.Get("fillinglevel") }</th>
			</tr>
		</thead>
		<tbody>
			//TODO: Här ska mätningar listas
			for _, measurement := range model.Thing.Measurements {
				@StatisticsSandStorageTableRow(l10n, measurement)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="6">
					//@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ StatisticsSandStorageTableRow(l10n locale.Localizer, thing MeasurementViewModel) {
	<tr class="border-b border-gray-30 border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20">
		<td class="px-6 py-3">00:00</td>
		<td class="px-6 py-3">20%</td>
	</tr>
}

templ SandStorageProperties(l10n locale.Localizer, model ThingDetailsViewModel) {
	<div class="">
		<div class="">
			Behållaren har en höjd på
			<span>222</span> mm
		</div>
		<div>
			med en max fyllnadshöjd på 
			<span>200</span> mm.
		</div>
		<div>
			Vinkeln är
			<span>38</span> grader.
		</div>
	</div>
}

templ StatisticsRoom(l10n locale.Localizer, model ThingDetailsViewModel) {
	//Statistik
	<div class="flex flex-col items-start self-stretch gap-6 py-6 pl-9 text-secondary-dark dark:text-secondary">
		<div class="flex items-center w-full justify-between">
			<div class="flex flex-col gap-2">
				<div class="">{ l10n.Get("currenttemperature") }</div>
				<div class="text-3xl font-bold">
					{ fmt.Sprintf("%0.f °C", model.Thing.GetFloatOrDefault("temperature", 0)) }
				</div>
			</div>
			<div class="flex items-center gap-6">
				@StatisticsFilter(l10n, model)
			</div>
		</div>
		@StatisticsData(l10n, RenderStatisticsGraph(l10n, model), StatisticsRoomTable(l10n, model), model.TableView)
	</div>
}

func RoomChart(datasets []ChartDataset) templ.Component {
	stepsize := uint(1)
	cfg := NewChartConfiguration("line", false, nil, nil, &stepsize)
	cfg.Timeseries(true)
	cfg.Add(datasets...)

	return Chart("measurement-chart", "", cfg)
}

templ StatisticsRoomTable(l10n locale.Localizer, model ThingDetailsViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-primary-dark dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("time") }</th>
				<th class="px-6 py-3">{ l10n.Get("temperature") }</th>
			</tr>
		</thead>
		<tbody>
			//TODO: Här ska mätningar listas
			for _, measurement := range model.Thing.Measurements {
				@StatisticsRoomTableRow(l10n, measurement)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="6">
					//@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ StatisticsRoomTableRow(l10n locale.Localizer, thing MeasurementViewModel) {
	<tr class="border-b border-gray-30 border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20">
		<td class="px-6 py-3">00:00</td>
		<td class="px-6 py-3">20 °C</td>
	</tr>
}

templ StatisticsPassage(l10n locale.Localizer, model ThingDetailsViewModel) {
	//Statistik
	<div class="flex flex-col items-start self-stretch gap-6 py-6 pl-9 text-secondary-dark dark:text-secondary">
		<div class="flex items-center w-full justify-between">
			<div class="flex flex-col gap-2">
				<div class="">{ l10n.Get("numberofpassagestoday") }</div>
				<div class="text-3xl font-bold">
					{ fmt.Sprintf("%0.f st", model.Thing.GetFloatOrDefault("passagesToday", 0)) }
				</div>
			</div>
			<div class="flex items-center gap-6">
				@StatisticsFilter(l10n, model)
			</div>
		</div>
		<div id="statisticsGraph" class="w-full">
			@RenderStatisticsGraph(l10n, model)
		</div>
		<div id="statisticsTable" class="w-full hidden">
			@StatisticsPassageTable(l10n, model)
		</div>
		<script>
			function showGraph() {
				document.getElementById('statisticsGraph').style.display = 'block';
				document.getElementById('statisticsTable').style.display = 'none';
			}

			function showTable() {
				document.getElementById('statisticsTable').style.display = 'block';
				document.getElementById('statisticsGraph').style.display = 'none';
			}

			document.addEventListener('DOMContentLoaded', function () {
				showGraph();
			});
		</script>
		//@StatisticsData(l10n, RenderStatisticsGraph(l10n, model), StatisticsPassageTable(l10n, model), model.TableView)
	</div>
}

func PassagesChart(datasets []ChartDataset) templ.Component {
	minvalue := uint(0)
	stepsize := uint(1)
	cfg := NewChartConfiguration("bar", false, &minvalue, nil, &stepsize)
	cfg.Timeseries(true)
	cfg.Add(datasets...)

	return Chart("measurement-chart", "", cfg)
}

templ StatisticsPassageTable(l10n locale.Localizer, model ThingDetailsViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-primary-dark dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("time") }</th>
				<th class="px-6 py-3">{ l10n.Get("numberofpassages") }</th>
			</tr>
		</thead>
		<tbody>
			//TODO: Här ska mätningar listas
			for _, measurement := range model.Thing.Measurements {
				@StatisticsPassageTableRow(l10n, measurement)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="6">
					//@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ StatisticsPassageTableRow(l10n locale.Localizer, measurement MeasurementViewModel) {
	<tr class="border-b border-gray-30 border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20">
		<td class="px-6 py-3">{ measurement.Timestamp.Format("2006-01-02 15:04") }</td>
		<td class="px-6 py-3">
			if measurement.Value != nil {
				{ fmt.Sprintf("%d st", int(*measurement.Value)) }
			} else {
				{ l10n.Get("noData") }
			}
		</td>
	</tr>
}

templ StatisticsCombinedSewageOverflow(l10n locale.Localizer, model ThingDetailsViewModel) {
	//Statistik
	<div class="flex flex-col items-start self-stretch gap-6 py-6 pl-9 text-secondary-dark dark:text-secondary">
		<div class="flex items-center w-full justify-between">
			<div class="flex flex-col gap-2">
				<div class="">{ l10n.Get("overflowrightnow") }</div>
				<div class="text-3xl font-bold">{ fmt.Sprintf("%t", model.Thing.GetBoolOrDefault("overflowObserved", false)) }</div>
			</div>
			<div class="flex items-center gap-6">
				@StatisticsFilter(l10n, model)
			</div>
		</div>
		<div id="statisticsGraph" class="w-full">
			@RenderStatisticsGraph(l10n, model)
		</div>
		<div id="statisticsTable" class="w-full hidden">
			@StatisticsCombinedSewageOverflowTable(l10n, model)
		</div>
		<script>
			function showGraph() {
				document.getElementById('statisticsGraph').style.display = 'block';
				document.getElementById('statisticsTable').style.display = 'none';
			}

			function showTable() {
				document.getElementById('statisticsTable').style.display = 'block';
				document.getElementById('statisticsGraph').style.display = 'none';
			}

			document.addEventListener('DOMContentLoaded', function () {
				showGraph();
			});
		</script>
		//@StatisticsData(l10n, StatisticsCombinedSewageOverflowGraph(l10n, model), StatisticsCombinedSewageOverflowTable(l10n, model), model.TableView)
	</div>
}

templ StatisticsCombinedSewageOverflowGraph(l10n locale.Localizer, model ThingDetailsViewModel) {
	<div id="graphView" class="w-full">
		<canvas id="measurement-chart"></canvas>
		<div id="measurementCharts" style="display:none;"></div>
	</div>
}

templ StatisticsCombinedSewageOverflowTable(l10n locale.Localizer, model ThingDetailsViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-primary-dark dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("starttime") }</th>
				<th class="px-6 py-3">{ l10n.Get("endtime") }</th>
				<th class="px-6 py-3">{ l10n.Get("time") }</th>
			</tr>
		</thead>
		<tbody>
			//TODO: Här ska mätningar listas
			for _, measurement := range model.Thing.Measurements {
				@StatisticsCombinedSewageOverflowTableRow(l10n, measurement)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="6">
					//@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ StatisticsCombinedSewageOverflowTableRow(l10n locale.Localizer, thing MeasurementViewModel) {
	<tr class="border-b border-gray-30 border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20">
		<td class="px-6 py-3">00:00</td>
		<td class="px-6 py-3">23:59</td>
		<td class="px-6 py-3">2 timmar</td>
	</tr>
}
