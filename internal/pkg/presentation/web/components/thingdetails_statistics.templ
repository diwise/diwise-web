package components

import (
	"fmt"
	. "github.com/diwise/frontend-toolkit"
	"github.com/diwise/frontend-toolkit/pkg/middleware/csp"
	"slices"
	"strings"
)

templ ThingStatistics(l10n Localizer, asset AssetLoaderFunc, model ThingDetailsViewModel) {
	@StatisticsWrapper(l10n, model) {
		if model.Thing.HasWarning() {
			<div class="flex items-center gap-2">
				{ l10n.Get("missingdata") }
			</div>
		} else {
			for k, v := range model.Thing.Latest {
				<div id={ fmt.Sprintf("latest-%s", k) } data-tab={ k } hidden?={ k != model.Tabs[0] }>
					<div class="">{ l10n.Get(k) }</div>
					<div class="text-3xl font-bold">
						if v.Value != nil {
							{ fmt.Sprintf("%.1f %s", *v.Value, v.Unit) }
						}
						if v.BoolValue != nil {
							{ fmt.Sprintf("%t", *v.BoolValue) }
						}
					</div>
				</div>
			}
		}
	}
}

templ Tab(tab string, firstTab bool, model ThingDetailsViewModel, l10n Localizer) {
	<button
		class={ "flex flex-col items-center px-4 py-2",
			templ.KV("border-b-4 border-primary-dark dark:border-white active-tab", firstTab),
			templ.KV("hover:border-b-4 hover:border-gray-200 dark:hover:border-white-30", !firstTab) }
		data-tab={ tab }
	>
		@SVG(omaToTabIcon(tab), Box(24, 24), Size(24), FillColor("primary-dark", "white"), StrokeColor("primary-dark", "white"))
		{ l10n.Get(tab) }
	</button>
}

func omaToTabIcon(oma string) string {
	if oma == "" {
		return ""
	}

	oma = oma[:strings.Index(oma, "-")]
	mymap := map[string]string{
		"3":    "rss",              //Sensor
		"10351": "door-open",		//Antal passager
		"3200": "file-digit",       //Digital ingång
		"3301": "lightbulb",        //Belysningsstyrka
		"3302": "ghost",            //Närvaro
		"3303": "thermometer",      //Temperatur
		"3304": "droplet",          //Luftfuktighet
		"3323": "gauge",            //Tryck
		"3327": "shuffle",          //Ledningsförmåga
		"3328": "battery-charging", //Effekt
		"3330": "distance",         //Distans
		"3331": "zap",              //Energiförbrukning
		"3350": "timer",            //Tidtagning
		"3411": "battery",          //Batteri
		"3424": "drop",             //Vattenmätning
		"3428": "cloud-sun",        //Luftkvalitet
		"3434": "person-plus",      //Personräknare
		"3435": "fillinglevel",     //Fyllnadsnivå
	}

	if icon, ok := mymap[oma]; ok {
		return icon
	}
	return ""
}

templ Tabs(model ThingDetailsViewModel, l10n Localizer) {
	<div class="flex gap-4">
		for i, tab := range model.Tabs {
			@Tab(tab, i == 0, model, l10n)
		}
	</div>
	<script nonce={ csp.Nonce(ctx) }>
		(()=>{
			const buttons = document.querySelectorAll('button[data-tab]');
			buttons.forEach(button => {
				button.addEventListener('click', (event) => {        
					const tabValue = event.currentTarget.getAttribute('data-tab');        

					document.querySelectorAll('button[data-tab]').forEach(el => {
						el.classList.remove('border-b-4', 'border-primary-dark', 'dark:border-white', 'active-tab');
						el.classList.add('hover:border-b-4', 'hover:border-gray-200', 'dark:hover:border-white-30');
					});

					document.querySelectorAll('div[data-tab]').forEach(el => {
						v = el.getAttribute('data-tab');
						el.hidden = v !== tabValue;						
					});

					event.currentTarget.classList.remove('hover:border-b-4', 'hover:border-gray-200', 'dark:hover:border-white-30');
					event.currentTarget.classList.add('border-b-4', 'border-primary-dark', 'dark:border-white', 'active-tab');
        			
        			const tabEl = document.getElementById('tab');
					tabEl.value = tabValue;

					const changeEvent = new Event('change');
					tabEl.dispatchEvent(changeEvent);
				});
			});
		})()
	</script>
}

templ StatisticsWrapper(l10n Localizer, model ThingDetailsViewModel) {
	<style type="text/css">
		.chart-wrapper {
			height: 40vh; position: relative;
		}
	</style>
	<div id="statistics-wrapper" class="flex flex-col items-start self-stretch gap-6 pl-9 text-secondary-dark dark:text-secondary">
		<div class="flex gap-4 text-secondary-dark dark:text-secondary border-b border-gray-30 dark:border-white-30 w-full">
			@Tabs(model, l10n)
		</div>
		<div class="flex items-center w-full justify-between">
			<div class="flex flex-col gap-2">
				{ children... }
			</div>
			<div class="flex items-start gap-6">
				<div class="flex flex-col items-start gap-2">
					<div class="font-bold">
						{ l10n.Get("export") }
					</div>
					<div class="">
						@Button(Secondary, "", "download-cloud",
							HxUrl("get", fmt.Sprintf("/admin/export?export=thing&accept=text/csv&thingid=%s", model.Thing.ID)),
							Trigger("click"),
							Include("#timeAt,#endTimeAt,#tab"))
					</div>
				</div>
				@StatisticsFilter(l10n, model.Thing.ID, model.Thing.Type, model.Thing.SubType, model.Tabs[0])
			</div>
		</div>
		<div id="measurement-chart-wrapper" class={ "w-full", "chart-wrapper" } hidden?={ model.TableView }>
			<canvas id="measurement-chart"></canvas>
		</div>
		<div id="statistics-data" class="w-full overflow-x-auto max-h-64"></div>
	</div>
	<script nonce={ csp.Nonce(ctx) }>
		showGraph = () => {
			const tbl = document.getElementById('statistics-table');
			const grp = document.getElementById('measurement-chart-wrapper');
			const tb = document.getElementById('tableButton');				
			const gb = document.getElementById('graphButton'); 
			
			if (tbl) {				
				tbl.hidden = true;				
			}

			if (grp){
				grp.hidden = false;
			}

			sessionStorage.setItem('showGraphOrTable', 'graph');

			if (gb != null) {
				gb.classList.add('bg-black', 'stroke-white', 'dark:bg-white', 'dark:stroke-black');
				gb.classList.remove('stroke-black', 'dark:stroke-white');
			}
			if (tb != null) {
				tb.classList.add('fill-black', 'dark:fill-white', 'stroke-black');
				tb.classList.remove('bg-black', 'fill-white', 'dark:bg-white', 'dark:fill-black', 'stroke-white');
			}
		};
		
		showTable = () => {
			const tbl = document.getElementById('statistics-table');
			const grp = document.getElementById('measurement-chart-wrapper');
			const tb = document.getElementById('tableButton');				
			const gb = document.getElementById('graphButton'); 
			
			if (tbl) {				
				tbl.hidden = false;				
			}

			if (grp){
				grp.hidden = true;
			}

			sessionStorage.setItem('showGraphOrTable', 'table');
			
			if (tb != null) {
				tb.classList.add('bg-black', 'fill-white', 'dark:bg-white', 'dark:fill-black', 'dark:stroke-black', 'stroke-white' );
				tb.classList.remove('dark:fill-white', 'dark:stroke-white');
			}
			if (gb != null) {
				gb.classList.add('stroke-black', 'dark:stroke-white');
				gb.classList.remove('bg-black', 'stroke-white', 'dark:bg-white', 'dark:stroke-black');
			}
		};
							
		htmx.onLoad(() => {			
			if (sessionStorage.getItem('showGraphOrTable') === 'table') {				
				showTable();
			} else {				
				showGraph();
			}
		});
	</script>
}

templ StatisticsFilter(l10n Localizer, thingID, thingType, thingSubType, tab string) {
	<div class="flex flex-col items-start gap-2">
		<div class="font-bold">
			{ l10n.Get("timeinterval") }
		</div>
		<div class="">
			<input
				type="hidden"
				id="tab"
				class="filter"
				name="tab"
				value={ tab }
				hx-trigger="change"
				hx-include="#timeAt,#endTimeAt,#tableButton,#graphButton,#tab"
				hx-target="#statistics-data"
				hx-get={ fmt.Sprintf("/components/things/%s/measurements?type=%s&subType=%s", thingID, thingType, thingSubType) }
				hx-params="*"
			/>
			<input
				name="timeAt"
				type="datetime-local"
				id="timeAt"
				hx-trigger="change, load"
				hx-include="#endTimeAt,#tableButton,#graphButton,#tab"
				hx-target="#statistics-data"
				hx-get={ fmt.Sprintf("/components/things/%s/measurements?type=%s&subType=%s", thingID, thingType, thingSubType) }
				hx-params="*"
				class="border border-input-surface dark:border-white-50 rounded-xl py-2 px-3 dark:bg-input-surface-dark"
			/>
			-
			<input
				name="endTimeAt"
				type="datetime-local"
				id="endTimeAt"
				hx-trigger="change"
				hx-include="#timeAt,#tableButton,#graphButton,#tab"
				hx-target="#statistics-data"
				hx-get={ fmt.Sprintf("/components/things/%s/measurements?type=%s&subType=%s", thingID, thingType, thingSubType) }
				hx-params="*"
				class="border border-input-surface dark:border-white-50 rounded-xl py-2 px-3 dark:bg-input-surface-dark"
			/>
		</div>
	</div>
	<div class="flex flex-col items-start gap-2">
		<div class="text-primary-dark font-bold">
			&nbsp;
		</div>
		<div class="">
			@graphTableButtons(l10n)
		</div>
	</div>
}

templ StatisticsTable(l10n Localizer, dataset ChartDataset, timeAt, endTimeAt string) {
	<table id="statistics-table" class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white" data-timeAt={ timeAt } data-endTimeAt={ endTimeAt } hidden>
		<thead class="border-b border-primary-dark dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("time") }</th>
				<th class="px-6 py-3">{ l10n.Get(dataset.Label) }</th>
			</tr>
		</thead>
		<tbody>
			for _, v := range slices.Backward(dataset.Data) {
				@StatisticsTableRow(l10n, v)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="6">
					//@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
	<script nonce={ csp.Nonce(ctx) }>
		(() => {
			const graphElement = document.getElementById('statistics-table');
			if (graphElement) {
				const startDateStr = graphElement.getAttribute('data-timeAt');
				const endDateStr = graphElement.getAttribute('data-endTimeAt');

				const timeAtInput = document.getElementById("timeAt");
				const endTimeAtInput = document.getElementById("endTimeAt");

				const startDate = startDateStr.replace("Z", "");
				const endDate = endDateStr.replace("Z", "");

				var formattedStartDate = dateFns.format(startDate, 'yyyy-MM-dd HH:mm');
				var formattedEndDate = dateFns.format(endDate, 'yyyy-MM-dd HH:mm');

				if (timeAtInput && endTimeAtInput) {
					timeAtInput.value = formattedStartDate;
					endTimeAtInput.value = formattedEndDate;
				}
			}
		})();
	</script>
}

templ StatisticsTableRow(l10n Localizer, value ChartValue) {
	<tr class="border-b border-gray-30 border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20">
		<td class="px-6 py-3">{ value.X }</td>
		<td class="px-6 py-3">{ fmt.Sprintf("%v", value.Y) }</td>
	</tr>
}

func StatisticsChart(datasets []ChartDataset, chartType string, stepsize, minvalue, maxvalue *uint, keepRatio, isDark bool) templ.Component {
	cfg := NewChartConfiguration(chartType, keepRatio, isDark, minvalue, maxvalue, stepsize)
	cfg.Timeseries(true)

	datasets = setChartColors(datasets, chartType, isDark)

	cfg.Add(datasets...)

	return Chart("measurement-chart", "", cfg)
}

func setChartColors(datasets []ChartDataset, chartType string, isDark bool) []ChartDataset {
    for i := range datasets {
        if chartType == "bar" {
            if isDark {
                datasets[i].BackgroundColor = "#FFFFFF" // Bakgrundsfärg i dark mode
                datasets[i].BorderColor = "#FFFFFF"     // Kantfärg i dark mode
				
            } else {
                datasets[i].BackgroundColor = "#68686D" // Bakgrundsfärg i light mode
                datasets[i].BorderColor = "#68686D"     // Kantfärg i light mode
            }
        } else { // Standardfärger för andra typer av diagram
            if isDark {
                datasets[i].BackgroundColor = "#FFFFFF" // Transparent vit
                datasets[i].BorderColor = "#FFFFFF"
            } else {
                datasets[i].BackgroundColor = "#1F1F25" // Transparent mörk
                datasets[i].BorderColor = "#1F1F25"
            }
        }
    }
    return datasets
}