package components

import (
	"fmt"
	. "github.com/diwise/frontend-toolkit"
	"strings"
)

templ ThingStatistics(l10n Localizer, asset AssetLoaderFunc, model ThingDetailsViewModel) {
	@StatisticsWrapper(l10n, model) {
		if model.Thing.HasWarning() {
			<div class="flex items-center gap-2">
				{ l10n.Get("missingdata") }
			</div>
		} else {
			if strings.HasSuffix(model.Type,":beach") || model.Type == "room" {
				<div class="">{ l10n.Get("currenttemperature") }</div>
				<div class="text-3xl font-bold">
					{ fmt.Sprintf("%.1f Â°C", model.Thing.GetFloatOrDefault("temperature", 0)) }
				</div>
			}
			if model.Type == "building" {
				<div class="">{ l10n.Get("consumption") }</div>
				<div class="text-3xl font-bold">
					{ fmt.Sprintf("%.1f kWh", model.Thing.GetFloatOrDefault("power", 0)) } / { fmt.Sprintf("%.1f kW", model.Thing.GetFloatOrDefault("energy", 0)) }
				</div>
			}
			if strings.HasPrefix(model.Type, "container:") {
				<div class="">{ l10n.Get("currentlevel") }</div>
				<div class="text-3xl font-bold">
					{ fmt.Sprintf("%0.f%%", model.Thing.GetFloatOrDefault("percent", 0)) }
				</div>
			}
			if model.Type == "pumpingstation" {
				<div class="">{ l10n.Get("pumping") }</div>
				<div class="text-3xl font-bold">
					if model.Thing.GetBoolOrDefault("pumpingObserved", false) {
						{ l10n.Get("yes") }
					} else {
						{ l10n.Get("no") }
					}
				</div>
			}
			if model.Type == "lifebuoy" {
				<div class="">{ l10n.Get("inplace") }</div>
				<div class="text-3xl font-bold">
					if model.Thing.GetBoolOrDefault("presence", false) {
						{ l10n.Get("yes") }
					} else {
						{ l10n.Get("no") }
					}
				</div>
			}
			if model.Type =="passage" {
				<div class="">{ l10n.Get("numberofpassagestoday") }</div>
				<div class="text-3xl font-bold">
					{ fmt.Sprintf("%0.f st", model.Thing.GetFloatOrDefault("passagesToday", 0)) }
				</div>
			}
		}
	}
}

templ StatisticsWrapper(l10n Localizer, model ThingDetailsViewModel) {
	<style type="text/css">
		.chart-wrapper {
			height: 40vh; position: relative;
		}
	</style>
	<div id="statistics-wrapper" class="flex flex-col items-start self-stretch gap-6 py-6 pl-9 text-secondary-dark dark:text-secondary">
		<div class="flex items-center w-full justify-between">
			<div class="flex flex-col gap-2">
				{ children... }
			</div>
			<div class="flex items-center gap-6">
				@StatisticsFilter(l10n, model.Thing.ID, model.Thing.Type, model.Thing.SubType)
			</div>
		</div>
		<div id="measurement-chart-wrapper" class={ "w-full", "chart-wrapper" } hidden?={ model.TableView }>
			<canvas id="measurement-chart"></canvas>
		</div>
		<div id="statistics-data" class="w-full overflow-x-auto max-h-64"></div>
	</div>
	<script>				
		showGraph = () => {
			const tbl = document.getElementById('statistics-table');
			const grp = document.getElementById('measurement-chart-wrapper');
			
			if (tbl) {				
				tbl.hidden = true;				
			}

			if (grp){
				grp.hidden = false;
			}

			sessionStorage.setItem('showGraphOrTable', 'graph');
		};
		
		showTable = () => {
			const tbl = document.getElementById('statistics-table');
			const grp = document.getElementById('measurement-chart-wrapper');
			
			if (tbl) {				
				tbl.hidden = false;				
			}

			if (grp){
				grp.hidden = true;
			}

			sessionStorage.setItem('showGraphOrTable', 'table');
		};
							
		htmx.onLoad(() => {			
			if (sessionStorage.getItem('showGraphOrTable') === 'table') {				
				showTable();
			} else {				
				showGraph();
			}
		});
	</script>
}

templ StatisticsFilter(l10n Localizer, thingID, thingType, thingSubType string) {
	<div class="flex flex-col items-start gap-2">
		<div class="font-bold">
			{ l10n.Get("timeinterval") }
		</div>
		<div class="">
			<input
				name="timeAt"
				type="datetime-local"
				id="timeAt"
				hx-trigger="change, load"
				hx-include="#endTimeAt,#tableButton,#graphButton"
				hx-target="#statistics-data"
				hx-get={ fmt.Sprintf("/components/things/measurements/%s?type=%s&subType=%s", thingID, thingType, thingSubType) }
				hx-params="*"
				class="border border-input-surface dark:border-white-50 rounded-xl py-2 px-3 dark:bg-input-surface-dark"
			/>
			-
			<input
				name="endTimeAt"
				type="datetime-local"
				id="endTimeAt"
				hx-trigger="change"
				hx-include="#timeAt,#tableButton,#graphButton"
				hx-target="#statistics-data"
				hx-get={ fmt.Sprintf("/components/things/measurements/%s?type=%s&subType=%s", thingID, thingType, thingSubType) }
				hx-params="*"
				class="border border-input-surface dark:border-white-50 rounded-xl py-2 px-3 dark:bg-input-surface-dark"
			/>
		</div>
	</div>
	<div class="flex flex-col items-start gap-2">
		<div class="text-primary-dark font-bold">
			&nbsp;
		</div>
		<div class="">
			@graphTableButtons(l10n)
		</div>
	</div>
}

templ StatisticsTable(l10n Localizer, dataset ChartDataset, timeAt, endTimeAt string) {
	<table id="statistics-table" class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white" data-timeAt={ timeAt } data-endTimeAt={ endTimeAt } hidden>
		<thead class="border-b border-primary-dark dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("time") }</th>
				<th class="px-6 py-3">{ l10n.Get(dataset.Label) }</th>
			</tr>
		</thead>
		<tbody>
			for _, v := range dataset.Data {
				@StatisticsTableRow(l10n, v)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="6">
					//@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
	<script>
		(() => {
			const graphElement = document.getElementById('statistics-table');
			if (graphElement) {
				const startDateStr = graphElement.getAttribute('data-timeAt');
				const endDateStr = graphElement.getAttribute('data-endTimeAt');
				
				const timeAtInput = document.getElementById("timeAt");
				const endTimeAtInput = document.getElementById("endTimeAt");

				var startDate = dateFns.startOfDay(new Date(startDateStr));
  				var endDate = dateFns.endOfDay(new Date(endDateStr)); 

				var formattedStartDate = dateFns.format(startDate, 'yyyy-MM-dd HH:mm');
				var formattedEndDate = dateFns.format(endDate, 'yyyy-MM-dd HH:mm');

				if (timeAtInput && endTimeAtInput) {
					timeAtInput.value = formattedStartDate;
					endTimeAtInput.value = formattedEndDate;
				}
			}
		})();
	</script>
}

templ StatisticsTableRow(l10n Localizer, value ChartValue) {
	<tr class="border-b border-gray-30 border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20">
		<td class="px-6 py-3">{ value.X }</td>
		<td class="px-6 py-3">{ fmt.Sprintf("%v", value.Y) }</td>
	</tr>
}

func StatisticsChart(datasets []ChartDataset, chartType string, stepsize, minvalue, maxvalue *uint, keepRatio bool) templ.Component {
	cfg := NewChartConfiguration(chartType, keepRatio, minvalue, maxvalue, stepsize)
	cfg.Timeseries(true)
	cfg.Add(datasets...)

	return Chart("measurement-chart", "", cfg)
}
