package components

import (
	"fmt"
	"github.com/diwise/diwise-web/internal/pkg/presentation/locale"
)

templ StatisticsSandStorage(l10n locale.Localizer, model ThingDetailsViewModel) {
	//Statistik
	<div class="flex flex-col items-start self-stretch gap-6 py-6 pl-9 text-secondary-dark dark:text-secondary">
		<div class="flex items-center w-full justify-between">
			<div class="flex flex-col gap-2">
				<div class="">{ l10n.Get("currentlevel") }</div>
				<div
					class="text-3xl font-bold"
					hx-get={ fmt.Sprintf("/components/things/measurements/%s/current", model.Thing.Type) }
					hx-include="#sensorMeasurementTypes"
					hx-trigger="every 60s"
				>
					if v,ok := model.Thing.FillingLevel(); ok {
						{ fmt.Sprintf("%0.f%%", v) }
					} else {
						{ l10n.Get("noData") }
					}
				</div>
				<input type="hidden" class="filter" id="sensorMeasurementTypes" name="sensorMeasurementTypes" value={ fillingLevelSensor(model) }/>
			</div>
			<div class="flex items-center gap-6">
				@FilterStatistics(l10n, model)
				/*<div class="flex flex-col items-start gap-2">
					<div class="text-primary-dark font-bold">
						&nbsp;						
					</div>
					<div class="">
						@graphTableButtons(l10n, fmt.Sprintf("/things/%s", model.Thing.ThingID))
					</div>
				</div>*/
			</div>
		</div>
		@StatisticsData(l10n, RenderStatisticsGraph(l10n, model), StatisticsSandStorageTable(l10n, model), model.TableView)
	</div>
}

func SandStorageChart(datasets []ChartDataset) templ.Component {
	maxvalue := uint(100)
	stepsize := uint(10)
	cfg := NewChartConfiguration("line", false, nil, &maxvalue, &stepsize)
	cfg.Timeseries(true)
	cfg.Add(datasets...)

	return Chart("measurement-chart", "", cfg)
}

templ StatisticsSandStorageTable(l10n locale.Localizer, model ThingDetailsViewModel) {
	<table class="table-auto min-w-full text-sm text-left dark:bg-content-background dark:text-white">
		<thead class="border-b border-primary-dark dark:border-white">
			<tr>
				<th class="px-6 py-3">{ l10n.Get("time") }</th>
				<th class="px-6 py-3">{ l10n.Get("fillinglevel") }</th>
			</tr>
		</thead>
		<tbody>
			//TODO: Här ska mätningar listas
			for _, measurement := range model.Measurements {
				@StatisticsSandStorageTableRow(l10n, measurement)
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="6">
					//@Paging(l10n, model.Pageing)
				</td>
			</tr>
		</tfoot>
	</table>
}

templ StatisticsSandStorageTableRow(l10n locale.Localizer, thing MeasurementViewModel) {
	<tr class="border-b border-gray-30 border-opacity-70 hover:bg-background-100 dark:border-white dark:bg-opacity-20">
		<td class="px-6 py-3">00:00</td>
		<td class="px-6 py-3">20%</td>
	</tr>
}

templ SandStorageProperties(l10n locale.Localizer, model ThingDetailsViewModel) {
	<div class="">
		<div class="">Behållaren har en höjd på
			<span>222</span> mm
        </div>
		<div>
			med en max fyllnadshöjd på 
			<span>200</span> mm.
		</div>
        <div>
            Vinkeln är
            <span>38</span> grader.
        </div>
	</div>
}

templ EditSandStorage(l10n locale.Localizer, model ThingDetailsViewModel) {
	<div class="flex flex-start gap-10 self-stretch">
		<div class="flex flex-col gap-2 flex-1">
			<div class="font-bold">{ l10n.Get("maxheight") }</div>
				<div class="flex items-center">
					<input
						type="number"
						name="maxheight"
						class="border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl p-2"
						placeholder=""
						value={ model.Thing.Name }
					/>
					<span class="ml-2">{ l10n.Get("mm") }</span>
				</div>
		</div>
		<div class="flex flex-col gap-2 flex-1">
			<div class="font-bold">{ l10n.Get("maxlevel") }</div>
				<div class="flex items-center">
					<input
						type="number"
						name="maxlevel"
						class="border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl p-2"
						placeholder=""
						value={ model.Thing.Name }
					/>
					<span class="ml-2">{ l10n.Get("mm") }</span>
				</div>
		</div>
	</div>
    <div class="w-full flex flex-start gap-10 self-stretch">
		<div class="w-full flex flex-col gap-2 flex-1">
			<div class="font-bold">{ l10n.Get("angle") }</div>
				<div class="flex items-center w-1/2">
					<input
						type="number"
						name="angle"
                        min="0"
                        max="90"
                        step="1"
						class="w-full h-[40px] border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl p-2"
						placeholder=""
						value={ model.Thing.Name }
					/>
					<span class="ml-2">{ l10n.Get("degrees") }</span>
				</div>
		</div>
	</div>
    //Koppla flera sensorer
	<div class="flex flex-start self-stretch">
		<div class="flex flex-col gap-6 flex-1">
			<div class="flex flex-col gap-2 flex-1">
				<div class="font-bold">{ l10n.Get("sensorconnected") }</div>
				<div class="flex items-center gap-2 self-stretch text-sm dark:text-white">
					<div id="selectedSensorContainer" class="flex items-center gap-2 flex-wrap overflow-hidden max-w-full">
						/*for _, sensor := range model.RelatedDevice {
							<div class="flex items-center p-2 rounded-full gap-1 sensorItem border-gray-30 dark:border-white-30 dark:text-secondary border stroke-primary-dark dark:stroke-white">
								<span>{ sensor }</span>
								<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x removeTagIcon cursor-pointer">
									<line x1="18" y1="6" x2="6" y2="18"></line>
									<line x1="6" y1="6" x2="18" y2="18"></line>
								</svg>
							</div>
						}*/
					</div>
				</div>
			</div>	
			<div class="flex flex-start self-stretch gap-3">
				<div class="relative inline-block w-full border border-input-surface dark:border-white-50 dark:bg-input-surface-dark rounded-xl">
					<input
						list="sensor-options"
						name="relatedDevice"
						placeholder={ l10n.Get("picksensor") }
						class="text-sm p-2 rounded-xl w-full block focus:outline-none dark:border-white-50 dark:bg-input-surface-dark"
						id="sensorInput"
					/>
					<datalist id="sensor-options">
						for _, sensor := range model.ValidSensors {
							<option value={ sensor.DeviceID }>{ fmt.Sprintf("%s (%s)", sensor.SensorID, sensor.Decoder) }</option>
						}
					</datalist>
					<div class="pointer-events-none absolute bg-white dark:bg-input-surface-dark rounded-xl inset-y-0 right-0 flex items-center px-2 text-gray-700">
						<svg class="w-[18px] h-[18px] dark:fill-white">
							@templ.Raw(iconSVG("chevron-down"))
						</svg>
					</div>
				</div>
				<div id="addSensorButton" class="flex gap-2 rounded-xl whitespace-nowrap cursor-pointer font-bold px-4 py-2 bg-tertiary-surface rounded-xl hover:bg-tertiary-surface-hover dark:bg-primary-surface-white dark:hover:bg-white-30 text-primary-dark dark:text-white">
					{ l10n.Get("add") }
				</div>
			</div>

			<!-- Ett hidden input för alla sensorer separerade med kommatecken, förifylld från backend -->
			<input type="hidden" id="selectedSensors" name="currentDevice" value={ model.RelatedDevice }/>
		</div>
	</div>
}
